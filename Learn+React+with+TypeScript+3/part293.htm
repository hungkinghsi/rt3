<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Handling errors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part292.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part294.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark791">Handling errors</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s adjust the URL in our request:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/<span class="s21">postsX</span>&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: center;">If we look at the running app, the posts are no longer being rendered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We want to handle this situation and give the user some feedback. We can do this using a <span class="s22">catch </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/postsX&quot;)</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">.then( ... )</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">.catch(ex =&gt; { const error =</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;line-height: 10pt;text-align: center;">ex.response.status === 404</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">? &quot;Resource not found&quot;</p><p class="s21" style="padding-left: 90pt;text-indent: 21pt;line-height: 106%;text-align: left;">: &quot;An unexpected error has occurred&quot;; this.setState({ error });</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, unlike <span class="s22">fetch</span>, HTTP status error codes can be handled in the <span class="s22">catch </span>method. The error object argument in <span class="s22">catch </span>contains a <span class="s22">response </span>property containing information about the response, including the HTTP status code.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: justify;">3. We just referenced a piece of state called <span class="s22">error </span>in the <span class="s22">catch </span>method. We&#39;ll use this in the next step to render the error message. However, we first need to add this state to our interface and initialize it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 118%;text-align: left;">interface IState { posts: IPost[]; <span class="s21">error: string;</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class App extends React.Component&lt;{}, IState&gt; { public constructor(props: {}) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">super(props); this.state = {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">posts: [],</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">error: &quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s then render the error if it contains a value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;posts&quot;&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">...</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{this.state.error &amp;&amp; &lt;p className=&quot;error&quot;&gt;{this.state.error}&lt;/p&gt;}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s add the <span class="s22">error </span>CSS class we just referenced to <span class="s22">index.css</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.error { color: red;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: center;">If we look at the running app now, we&#39;ll see <b>Resource not found </b>in red.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Let&#39;s now change the URL to a valid URL so that we can move on to looking at how we can include HTTP headers in the next section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/<span class="s21">posts</span>&quot;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, handling HTTP errors with <span class="s22">axios </span>is different than with <span class="s22">fetch</span>. We handle them in the first <span class="s22">then </span>method with <span class="s22">fetch</span>, whereas we handle them in the <span class="s22">catch </span>method with <span class="s22">axios</span>.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part292.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part294.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
