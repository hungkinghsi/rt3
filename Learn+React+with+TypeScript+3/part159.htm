<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part158.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part160.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark293">Summary</a><a name="bookmark377">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this chapter we learned a couple of different ways we can create a React and TypeScript project. The more manual way taught us just how many moving parts there are. We&#39;ll use <span class="s22">create-react-app </span>regularly to quickly create our apps in this book.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We learned how all React class components have a <span class="s22">render </span>method that returns JSX, which tells React what to display. JSX is very flexible and powerful, because JavaScript expressions can be mixed in with HTML.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We learned how components can be configured using props, and how we can add TypeScript types to props, to help prevent mistakes when consuming components.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Next, we learnt how components manage what is rendered and how they behave using state. Like props, state in a React and TypeScript app is strongly typed. We initialize state in the constructor, and change it via a <span class="s22">setState </span>method.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We also learnt about event handlers, which allow us to react to how users interact with our components. JSX gives us handy <span class="s22">onEventName </span>attributes for handling events.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Next, we learnt about the various life cycle methods that can be implemented to execute logic at various points in the process. The most commonly used life cycle method is <span class="s22">componentDidMount </span>, which occurs when a component has just been added to the DOM.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Finally, we learned about function components, which are an alternative approach to implementing components. In recent versions of React, we are able to use state within them, access common life cycle hooks, and even optimize rendering cycles.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: justify;"><a href="part117.htm#bookmark297" class="s20" name="bookmark294">In </a><span class="s12">Chapter 3</span>, <i>Getting Started with React and TypeScript</i>, we will learn about how we can efficiently build React and TypeScript apps that have multiple pages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part158.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part160.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
