<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part328.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part330.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark836">Summary</a><a name="bookmark892">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">GraphQL shines over REST because it allows us to efficiently get the data we need in the shape we need with far less effort. The GitHub GraphQL Explorer is a great tool for getting comfortable with the syntax. There are two main types of requests we can make to a GraphQL server:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_546.png"/></span></p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">We can execute a <span class="s22">query </span>to read data</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_547.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">We can execute a <span class="s22">mutation </span>to write data</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;">Queries allow us to specify the objects and fields we want in the response. We can rename them by using aliases. We can parameterize a query by defining variables. We can give variables types and specify whether each one is required or not with <span class="s22">! </span>at the end. There are query features that we didn&#39;t cover in this chapter, such as conditionally including fields and the powerful paging capability. In summary, it&#39;s an extremely powerful query language!</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Mutations share some of the same features as queries, such as being able to pass parameters into them. It&#39;s great how we get to control what data is included in the response as well.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">GraphQL operates over HTTP with HTTP <span class="s22">POST </span>requests to a single URL. The HTTP body contains the query or <span class="s22">mutation </span>information. We can use an HTTP client to interact with a GraphQL server, but we&#39;ll probably be more productive with a library like Apollo that is built specifically to interact with GraphQL servers.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">React Apollo is a set of React bits and pieces that work with the core Apollo library. It gives us nice <span class="s22">Query </span>and <span class="s22">Mutation </span>React components for including queries and mutations right in our JSX, making our code arguably easier to read. Before we can use these components, we need to set up our <span class="s22">ApolloClient </span>object with the URL to the GraphQL server and any credentials. We also need to include an <span class="s22">ApolloProvider </span>component high in our component tree, above all the components that need GraphQL data.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Caching is switched on out-of-the-box when we scaffold our project with <span class="s22">apollo-boost</span>. The <span class="s22">Mutation </span>component gives us <span class="s22">update </span>and <span class="s22">refetchQueries </span>props to manage cache updates.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">All in all, GraphQL is a very productive way to interact with backends, and it works really nicely with React and TypeScript apps.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">So, we&#39;ve learned many different aspects of React and TypeScript in this book so far. One big topic that we haven&#39;t covered yet is how we can robustly test the apps we build. We&#39;ll cover this in the next chapter.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part328.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part330.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
