<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Implementing interfaces</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">Implementing interfaces</a><a name="bookmark126">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We can use classes and interfaces together by defining the contract in an interface and then implementing the class as per the interface. We specify that a class is implementing a particular interface using the <span class="s22">implements </span>keyword.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">As an example, we can define an interface for the order detail and then a class that implements this interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IOrderDetail { product: Product; quantity: number;</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number;</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 110%;text-align: left;">class OrderDetail <span class="s21">implements IOrderDetail </span>{ product: Product;</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">quantity: number;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 50pt;text-indent: -5pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In the preceding example, we&#39;ve prefixed the interface with <span class="s22">I </span>so that readers of the code can quickly see when we are referencing interfaces.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark35">Why would we use this approach? It seems like more code than we need to write. So, what&#39;s the benefit? This approach allows us to have multiple implementations of an interface, which can be useful in certain situations.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
