<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Writing GraphQL data</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part310.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part312.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark853">Writing GraphQL data</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Let&#39;s turn our attention to writing to a GraphQL server now. We do this with what are called mutations. In this section, we&#39;ll create a <span class="s22">mutation </span>to add a GitHub star to a repository:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. In order to star a repository, we need the repository <span class="s22">id</span>. So, let&#39;s add this to the query we have been working on to get this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 110%;text-align: left;">query <span class="s21">(</span>$org: String!, $repo: String!<span class="s21">) </span>{ repository (owner:$org, name:$repo) {</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">id</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark854">2. Let&#39;s copy the </a><span class="s22">id </span>that is returned in the result. The <span class="s22">id </span>for the React repository is the shown in the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We can now write our first <span class="s22">mutation</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">mutation ($repoId: ID!) {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">addStar(input: { starrableId: $repoId }) { starrable {</p><p class="s12" style="padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">stargazers { totalCount</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Here are some key points on this <span class="s22">mutation</span>:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_522.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: justify;">We prefix a mutation with the <span class="s22">mutation </span>keyword.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_523.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: justify;">We put parameters to be passed into the <span class="s22">mutation </span>after the <span class="s22">mutation </span>keyword in parentheses. In our case, we have a single parameter for the repository <span class="s22">id </span>we want to star.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_524.png"/></span></p><p class="s22" style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">addStar <span class="p">is the </span>mutation <span class="p">function we are calling, which has a parameter called </span>input <span class="p">that we need to pass to it.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_525.png"/></span></p><p class="s22" style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">input <span class="p">is actually an object that has a field called </span>starrableId <span class="p">we need to include. The value of this is the repository </span>id <span class="p">we want to star, so we set it to our repository </span>id <span class="p">variable </span>$repoId<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_526.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">After the <span class="s22">mutation </span>parameters, we can specify what we want returned in the response. In our case, we want to return the number of stars on the repository.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">4. We can specify the parameter value for the repository <span class="s22">id </span>in the <b>Query Variables</b></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">pane:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 37pt;text-indent: 0pt;text-align: center;">&quot;repoId&quot;: &quot;MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark855">5. If we execute the </a><span class="s22">mutation</span>, the star will be added to the repository and the new total number of stars will be returned:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="332" alt="image" src="Image_527.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark819">We have a good grasp on both GraphQL queries and mutations now. In the next section, we&#39;ll start to interact with a GraphQL server from a React and TypeScript app.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part310.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part312.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
