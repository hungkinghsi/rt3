<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Arrays</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part49.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part51.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark101">Arrays</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Arrays are structures that TypeScript inherits from JavaScript. We add type annotations to arrays as usual, but with square brackets at the end to denote that this is an array type.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s take a look at an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s declare the following array of numbers in the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const numbers: number[] = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Here, we have initialized the array as empty.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We can add an item to the array by using the array&#39;s <span class="s22">push </span>function. Let&#39;s add the number <span class="s22">1 </span>to our array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">numbers.push(1);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_071.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We used <span class="s22">const </span>to declare the <span class="s22">numbers </span>variable and was able to change its array elements later in the program. The array reference hasn&#39;t changed</p><p class="s23" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">â€“ <span class="p">just the elements within it. So, this is fine with the TypeScript compiler.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark102">3. If we add an element with an incorrect type, the TypeScript compiler will complain, as we would expect:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="564" height="91" alt="image" src="Image_072.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. We can use type inference to save a few keystrokes if we declare an array with some initial values. As an example, if we type in the following declaration and hover over the <span class="s22">numbers </span>variable, we&#39;ll see the type has been inferred as <span class="s22">number[]</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const numbers = [1, 3, 5];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. We can access an element in an array by using the element number in square brackets. Element numbers start at <span class="s22">0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s take an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s log out the number of elements under the numbers variable declaration, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: justify;">console.log(numbers[0]); console.log(numbers[1]); console.log(numbers[2]);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. Let&#39;s now click the <b>Run </b>option on the right-hand side of the TypeScript playground to run our program. A new browser tab should open with a blank page. If we press <i>F12 </i>to open the <b>Developer tools </b>and go to the console section, we&#39;ll see <b>1</b>, <b>3</b>, and <b>5 </b>output to the console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark103">3. There are several ways to iterate through elements in an array. One option is to use a </a><span class="s22">for </span>loop, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 110%;text-align: left;">for <span class="s12">(let i in numbers) { console.log(numbers[i]);</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: center;">If we run the program, we&#39;ll see <b>1</b>, <b>3</b>, and <b>5 </b>output to the console again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">4. Arrays also have a useful function for iterating through their elements, called</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">forEach<span class="p">. We can use this function as follows:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 110%;text-align: left;">numbers.<span class="s21">forEach</span>(function (num) { console.log(num);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. <span class="s22">forEach </span>calls a nested function for each array element, passing in the array element. If we hover over the <span class="s22">num </span>variable, we&#39;ll see it has been correctly inferred as a <span class="s22">number</span>. We could have put a type annotation here, but we have saved ourselves a few keystrokes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><span><img width="558" height="97" alt="image" src="Image_073.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark24">Arrays are one of the most common types we&#39;ll use to structure our data. In the preceding examples, we&#39;ve only used an array with elements having a number type, but any type can be used for elements, including objects, which in turn have their own properties.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part49.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part51.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
