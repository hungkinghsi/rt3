<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Removing CSS class references from our tests</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part341.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part343.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark934">Removing CSS class references from our tests</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ll make our first improvement to our test by removing the dependencies on the <span class="s22">form- error </span>CSS class. Instead, we will get a reference to the errors via the error text, which is what the user sees onscreen and not an implementation detail:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">1. We&#39;ll import a <span class="s22">render </span>function from <span class="s22">react-testing-library</span>, which we will now use to render our component. We&#39;ll also import a <span class="s22">cleanup </span>function, which we&#39;ll use at the end of our tests to remove the test component from the DOM:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import { render, cleanup} from &quot;react-testing-library&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We can render our component using the <span class="s22">render </span>function we have just imported, rather than using <span class="s22">ReactDOM.render</span>, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">success: true</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-top: 1pt;padding-left: 32pt;text-indent: 0pt;text-align: center;">const { container, getAllByText } = render(</p><p class="s21" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">&lt;ContactUs onSubmit={handleSubmit} /&gt;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const form = container.querySelector(&quot;form&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We get the container DOM node back in a <span class="s22">container </span>variable, along with a <span class="s22">getallByText </span>function, which we&#39;ll use to get a reference to the displayed errors.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Let&#39;s now use the <span class="s22">getAllByText </span>function to get the errors displayed on the page:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Simulate.submit(form!);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const errorSpans = getAllByText(&quot;This must be populated&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">expect(errorSpans.length).toBe(2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. The last change we are going to make is to clean up our DOM at the end of the test using the <span class="s22">cleanup </span>function we just imported, rather</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">than <span class="s22">ReactDOM.unmountComponentAtNode</span>. We are also going to do this outside our test, in Jest&#39;s <span class="s22">afterEach </span>function. Our completed test should now look like the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">afterEach(cleanup);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">describe(&quot;ContactUs&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">success: true</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><a name="bookmark935">const { container, getAllByText } = render(</a></p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;ContactUs onSubmit={handleSubmit} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">const form = container.querySelector(&quot;form&quot;); expect(form).not.toBeNull(); Simulate.submit(form!);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">const errorSpans = getAllByText(&quot;This must be populated&quot;); expect(errorSpans.length).toBe(2);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: center;"><a name="bookmark906">When the test runs, it should still execute okay and the tests should pass.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part341.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part343.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
