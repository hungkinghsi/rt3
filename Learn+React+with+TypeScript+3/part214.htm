<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding asynchronous data fetching</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark513">Adding asynchronous data fetching</a><a name="bookmark551">&zwnj;</a><a name="bookmark552">&zwnj;</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">At the moment, the data fetching in our shop is instantaneous because all the data is local. So, before working on the <span class="s22">withLoader </span>component, let&#39;s refactor the data fetching functions to include a delay and be asynchronous as well. This will better simulate a real data fetching function that gets the data using a web API:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. In <span class="s22">ProductData.ts</span>, let&#39;s add the following arrow function that can be used to get a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">export const getProduct = async (id: number): Promise&lt;IProduct | null&gt; =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">await wait(1000);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const foundProducts = products.filter(customer =&gt; customer.id === id);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">return foundProducts.length === 0 ? null : foundProducts[0];</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The function takes in the product ID and uses the <span class="s22">filter </span>function in the</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">products <span class="p">array to find the product and then returns it.</span></p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The function is prefixed with the <span class="s22">async </span>keyword because it is asynchronous.</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. The function also calls a function called <span class="s22">wait </span>asynchronously with the <span class="s22">await</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">keyword in front of it. So, let&#39;s create the <span class="s22">wait </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const wait = (ms: number): Promise&lt;void&gt; =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return new Promise(resolve =&gt; setTimeout(resolve, ms));</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_329.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">Don&#39;t worry if the <span class="s22">async </span>and <span class="s22">await </span>keywords along with promises don&#39;t make much sense at the moment. We&#39;ll look at these in detail later in the book.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">This function uses the standard JavaScript <span class="s22">setTimeout </span>function to wait for the number of milliseconds we specify in the function parameter. The function returns a <span class="s22">Promise </span>that is resolved when <span class="s22">setTimeout </span>completes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">So, we have a function that now fetches a product asynchronously taking at least 1 second. Let&#39;s plug this into our product page. The <span class="s22">ProductPage </span>component is a container component responsible for fetching data, so let&#39;s plug this in here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark553">3. First, let&#39;s import the </a><span class="s22">getProduct </span>function into <span class="s22">ProductPage</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 25pt;text-indent: 0pt;text-align: center;">import { <span class="s21">getProduct</span>, IProduct } from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. Let&#39;s add a property called <span class="s22">loading </span>to the state of <span class="s22">ProductPage </span>to indicate whether the data is loading or not:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 119%;text-align: left;">interface IState { product?: IProduct; added: boolean; <span class="s21">loading: boolean;</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s also initialize this state to <span class="s22">true </span>in the constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public constructor(props: Props) { super(props);</p><p class="s12" style="padding-left: 90pt;text-indent: -10pt;line-height: 118%;text-align: left;">this.state = { added: false, <span class="s21">loading: true</span></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 8pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. Now, we can use the <span class="s22">getProduct </span>function when the <span class="s22">ProductPage </span>component loads:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 110%;text-align: left;">public <span class="s21">async </span>componentDidMount() { if (this.props.match.params.id) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">const id: number = parseInt(this.props.match.params.id, 10);</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;line-height: 106%;text-align: left;">const product = await getProduct(id); if (product !== null) {</p><p class="s12" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: center;">this.setState({ product, <span class="s21">loading: false </span>});</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We call <span class="s22">getProduct </span>asynchronously using the <span class="s22">await </span>keyword. In order to do this, we need to mark the <span class="s22">componentDidMount </span>lifecycle method as asynchronous with the <span class="s22">async </span>keyword. After we&#39;ve got the product, we set it in the state and reset the <span class="s22">loading </span>flag to <span class="s22">false</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark554">7. If our shop isn&#39;t running, let&#39;s run this:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">npm start</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 90%;text-align: left;">If we go to the product page, we see that it takes roughly 1 second for the product to load now. You may notice <b>Product not found! </b>being displayed whilst the product loads. This is because the product is not set on the initial render. We&#39;ll ignore this for the time being because our <span class="s22">withLoader </span>HOC will resolve this issue.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark514">So, now that we are getting data asynchronously and roughly taking 1 second, we are ready to implement our </a><span class="s22">withLoader </span>HOC and use it on the product page. We&#39;ll do just this in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
