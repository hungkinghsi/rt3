<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Querying the GraphQL server</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part314.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part316.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark822">Querying the GraphQL server</a><a name="bookmark861">&zwnj;</a><a name="bookmark862">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Now that we have our React and TypeScript project in place, let&#39;s make a GraphQL query using <span class="s22">axios</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. In <span class="s22">Header.tsx</span>, we&#39;ll start by creating two interfaces for the GraphQL query response and the viewer data within it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IViewer { name: string; avatarUrl: string;</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IQueryResult { data: {</p><p class="s12" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">viewer: IViewer;</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s create some state within our <span class="s22">Header </span>component for the <span class="s22">viewer</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const [viewer, setViewer]: [ IViewer,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(viewer: IViewer) =&gt; void</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">] = React.useState({name: &quot;&quot;, avatarUrl: &quot;&quot;});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: justify;">3. It&#39;s nearly time to make the GraphQL query. We are going to do this when the component has just been mounted. We can use the <span class="s22">useEffect </span>function to do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">React.useEffect(() =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">// TODO - make a GraphQL query</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We pass an empty array as the second parameter so that the query only executes when the component is mounted and not on each render.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s use <span class="s22">axios </span>then to make the GraphQL query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">React.useEffect(() =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">axios</p><p class="s21" style="padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">.post&lt;IQueryResult&gt;( &quot;https://api.github.com/graphql&quot;,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s21" style="padding-left: 145pt;text-indent: -10pt;line-height: 106%;text-align: left;">query: `query { viewer {</p><p class="s21" style="padding-left: 155pt;text-indent: 0pt;line-height: 10pt;text-align: left;">name</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 155pt;text-indent: 0pt;text-align: left;">avatarUrl</p><p class="s21" style="padding-left: 145pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">}`</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">)</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that we are doing an HTTP <span class="s22">POST </span>even though we are reading data. GraphQL requires us to use an HTTP <span class="s22">POST </span>because the details of the query are in the request body.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We are also using the interface we used earlier, <span class="s22">IQueryResult</span>, for the response data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. As mentioned earlier, we need to pass our bearer token in the HTTP Authorization header. So, let&#39;s do that:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">.post&lt;IQueryResult&gt;( &quot;https://api.github.com/graphql&quot;,</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">query: `query { viewer {</p><p class="s12" style="padding-left: 145pt;text-indent: 0pt;line-height: 120%;text-align: left;">name avatarUrl</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}`</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">},</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">headers: {</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">Authorization: &quot;bearer our-bearer-token&quot;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Obviously, we need to substitute in our real bearer token that we obtained earlier from GitHub.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. We aren&#39;t handling the response yet, so let&#39;s do that and set the <span class="s22">viewer </span>state variable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.post&lt;IQueryResult&gt;(</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.then(response =&gt; {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 21pt;text-indent: 0pt;text-align: center;"><a name="bookmark863">setViewer(response.data.data.viewer);</a></p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">7. Now that we have the data in state from the GraphQL query, let&#39;s render our avatar and name along with our app title:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;img src={viewer.avatarUrl} className=&quot;avatar&quot; /&gt;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;viewer&quot;&gt;{viewer.name}&lt;/div&gt;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;GitHub Search&lt;/h1&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s add the avatar CSS class we just referenced into <span class="s22">App.css</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.avatar { width: 60px;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">border-radius: 50%;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app, we should see our avatar and name in our app header:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 157pt;text-indent: 0pt;text-align: left;"><span><img width="164" height="167" alt="image" src="Image_528.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">So, we&#39;ve just interacted with a GraphQL server using an HTTP library. All GraphQL requests are made using the HTTP POST method, even for reading data. All</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: justify;">GraphQL requests are made to the same endpoint as well. The resource we want data from isn&#39;t in the URL, it&#39;s in the request body. So, whilst we can use an HTTP library, like <span class="s22">axios</span>, for querying GraphQL servers, it feels a little strange.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In the next section, we&#39;ll look at a GraphQL client that will help us query a GraphQL server in a more natural way.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part314.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part316.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
