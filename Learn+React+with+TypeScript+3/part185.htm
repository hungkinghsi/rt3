<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>String literal types</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part184.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part186.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark465">String literal types</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">A variable of a string literal type can only be assigned the exact string value specified in the string literal type.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the TypeScript playground, let&#39;s go through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s create a string literal type called <span class="s22">Control </span>that can only be set to the <span class="s22">&quot;Textbox&quot; </span>string:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type Control = &quot;Textbox&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark466">2. Let&#39;s now create a variable called </a><span class="s22">notes </span>with our <span class="s22">Control </span>type and set this to</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">&quot;Textbox&quot;<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">let notes: Control; notes = &quot;Textbox&quot;;</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">As we would expect, the TypeScript compiler is happy with this.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Now let&#39;s set our variable to a different value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">notes = &quot;DropDown&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We get the compilation error <b>Type &#39;&quot;DropDown&quot;&#39; is not assignable to type &#39;&quot;Textbox&quot;&#39;</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><span><img width="460" height="133" alt="image" src="Image_270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. As with all other types in TypeScript, <span class="s22">null </span>and <span class="s22">undefined </span>are valid values as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">notes = null; notes = undefined;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark445">String literal types aren&#39;t that useful on their own. However, they become extremely useful when used in a union type, which we&#39;ll look at in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part184.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part186.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
