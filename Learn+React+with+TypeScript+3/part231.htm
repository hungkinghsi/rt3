<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding a validation rules prop to form</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part230.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part232.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark619">Adding a validation rules prop to form</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Let&#39;s think about how we would want to specify validation rules to a form. We need to be able to specify one or more rules for a field. Some rules could have a parameter, such as a minimum length. It would be nice if we could specify the rules, as in the example that follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">&lt;Form</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">validationRules={{</p><p class="s21" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">email: { validator: required },</p><p class="s21" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">name: [{ validator: required }, { validator: minLength, arg: 3 }]</p><p class="s21" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">&lt;/Form&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s have a go at implementing the <span class="s22">validationRules </span>prop on the <span class="s22">Form </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Start by defining a type for the <span class="s22">Validator </span>function in <span class="s22">Form.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export type Validator = ( fieldName: string, values: IValues,</p><p class="s12" style="text-indent: 0pt;text-align: right;">args?: any</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">) =&gt; string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">A <span class="s22">Validator </span>function will take in the field name, the values for the whole form, and an optional argument specific to the function. A string containing the validation error message will be returned. If the field is valid, a blank string will be returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark620">2. Let&#39;s use this type to create a </a><span class="s22">Validator </span>function to check that a field called</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">required <span class="p">under the </span>Validator <span class="p">type is populated:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export const required: Validator = ( fieldName: string,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">values: IValues, args?: any</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">): string =&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">values[fieldName] === undefined || values[fieldName] === null || values[fieldName] === &quot;&quot;</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">? &quot;This must be populated&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">: &quot;&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">We export the function so that it can be used in our <span class="s22">ContactUs </span>implementation later. The function checks whether the field value is <span class="s22">undefined</span>, <span class="s22">null</span>, or an empty string and if so, it returns a <b>This must be populated </b>validation error message.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If the field value isn&#39;t <span class="s22">undefined</span>, <span class="s22">null</span>, or an empty string, then an empty string is returned to indicate the value is valid.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Similarly, let&#39;s create a <span class="s22">Validator </span>function for checking that a field input is over a minimum length:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export const minLength: Validator = ( fieldName: string,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">values: IValues, length: number</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">): string =&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">values[fieldName] &amp;&amp; values[fieldName].length &lt; length</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">? `This must be at least ${length} characters`</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">: &quot;&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: justify;">The function checks whether the length of the field value is less than the length argument, and if so it returns a validation error message. Otherwise, an empty string is returned to indicate the value is valid.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">4. Now, let&#39;s add the ability to pass validation rules via a prop to the <span class="s22">Form</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: justify;">interface IValidation { validator: Validator; arg?: any;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><a name="bookmark621">interface IValidationProp {</a></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">[key: string]: IValidation | IValidation[];</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 118%;text-align: left;">interface IFormProps { defaultValues: IValues; <span class="s21">validationRules: IValidationProp;</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_374.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">validationRules </span>prop is an indexable key/value type, where the key is the field name and the value is one or more validation rules of type <span class="s22">IValidation</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_375.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">A validation rule contains the validation function of type <span class="s22">Validator</span>, and an argument to pass into the validation function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">5. With the new <span class="s22">validationRules </span>prop in place, let&#39;s add this to the <span class="s22">ContactUs</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component. Import the validator functions first:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { Form, <span class="s21">minLength, required </span>} from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Now, let&#39;s add the validation rules to the <span class="s22">ContactUs </span>component JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Form</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">defaultValues={{ name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; }}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">validationRules={{</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">email: { validator: required },</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">name: [{ validator: required }, { validator: minLength, arg: 2</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}]</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Form&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Now, our form is valid if the name and email are populated, and the name is at least two characters long.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark575">That&#39;s the </a><span class="s22">validationRules </span>prop complete. In the next section, we&#39;ll track the validation error messages in preparation for rendering them on the page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part230.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part232.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
