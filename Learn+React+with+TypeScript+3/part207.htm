<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Leveraging the compound component pattern</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part206.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part208.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark536">Leveraging the compound component pattern</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our tab headings can only be strings at the moment. What if we want to allow the consumer of the component to define richer content in the headings? For example, a consumer might want to put an icon in front of a tab heading or make a heading bold. So, the consuming JSX could look something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">&lt;Tabs&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;Tabs.Tab name=&quot;Description&quot; initialActive={true}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">&lt;b&gt;Description&lt;/b&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;/Tabs.Tab&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 50pt;text-indent: -16pt;line-height: 120%;text-align: left;">&lt;Tabs.Tab name=&quot;Reviews&quot;&gt; Reviews</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;/Tabs.Tab&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">&lt;/Tabs&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">In the previous example, <span class="s22">Tabs </span>and <span class="s22">Tabs.Tab </span>are compound components:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_304.png"/></span></p><p class="s22" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">Tabs <span class="p">is the component that renders the </span>Tabs.Tab <span class="p">components within it. It also manages the state for whichever tab is active.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_305.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">Tabs.Tab <span class="p">renders a single heading. It takes a unique tab name as a property, which allows the active tab to be managed. It also takes in a</span></p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">boolean <span class="p">property called </span>initialActive <span class="p">that sets that tab to be active when</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">first loaded. The heading that is rendered is the content within the <span class="s22">Tabs.Tab </span>tag. So, the first tab will render <b>Description </b>in bold.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, let&#39;s refactor our basic tabs component into a compound component that can be used similarly to the previous example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;">1. Our <span class="s22">Tabs </span>component no longer takes in any properties, so, let&#39;s remove the <span class="s22">IProps </span>interface. We can remove the constructor because we no longer need to initialize the state from the props. Let&#39;s also change the name of our state property from <span class="s22">activeHeading </span>to <span class="s22">activeName </span>as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IState {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">activeName<span class="s12">: string;</span></p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 110%;text-align: left;">class Tabs extends React.Component&lt;<span class="s21">{}</span>, IState&gt; { public render() {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We are going to work on the <span class="s22">Tab </span>component within <span class="s22">Tabs</span>, first. So, let&#39;s create an interface for its properties:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ITabProps { name: string; initialActive?: boolean;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_306.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">name </span>property is a unique name for the tab. This will be used later to help us manage the active tab.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_307.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">initialActive </span>property specifies whether the tab is active when the component first loads.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Let&#39;s add the following <span class="s22">Tab </span>function component inside our <span class="s22">Tabs </span>class component now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class Tabs extends React.Component&lt;IProps, IState&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 106%;text-align: left;">public static Tab: React.SFC&lt;ITabProps&gt; = props =&gt; &lt;li&gt;TODO - render the nodes child nodes&lt;/li&gt;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">public render() {...}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This is the start of the component that will render each tab. The <span class="s22">Tab </span>component is defined as a static property on the <span class="s22">Tabs </span>component. This means <span class="s22">Tab </span>lives on the actual <span class="s22">Tabs </span>class and not in its instances. So, we must remember we don&#39;t have access to any <span class="s22">Tabs </span>instance members (for instance, <span class="s22">this</span>). However, we can reference <span class="s22">Tab </span>in JSX using <span class="s22">Tabs.Tab </span>now, which was one of our requirements.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">At the moment, <span class="s22">Tab </span>is just rendering <span class="s22">li </span>with a note reminding us that we need to somehow render the child nodes of the component. Remember that we want the consuming markup for our <span class="s22">Tabs </span>component to be as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Tabs.Tab name=&quot;Description&quot; initialActive={true}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;b&gt;Description&lt;/b&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/Tabs.Tab&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. So, our render function needs to somehow render <span class="s22">&lt;b&gt; Description &lt;/b&gt; </span>inside our <span class="s22">li </span>tag. How do we do this? The answer is via a special property called <span class="s22">children</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public static Tab: React.SFC&lt;ITabProps&gt; = props =&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="86" alt="image" src="Image_308.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">React component properties can be of any type, including React nodes. The <span class="s22">children </span>property is a special property that React gives a component that contains the component&#39;s child nodes. We render a</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">component&#39;s child nodes in JSX by referencing the <span class="s22">children </span>property in curly brackets.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;li&gt;<span class="s21">{props.children}</span>&lt;/li&gt;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Our <span class="s22">Tab </span>component is not finished, but we&#39;ll leave it like this for the time being. We now need to move on to the <span class="s22">Tabs </span>component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. The <span class="s22">render </span>method in the <span class="s22">Tabs </span>class is simply going to render its child nodes now. Let&#39;s replace this method with the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;tabs&quot;&gt;{this.props.children}&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We again use the magical <span class="s22">children </span>property to render the child nodes within</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Tabs<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark507">We are progressing well with our compound </a><span class="s22">Tabs </span>and <span class="s22">Tab </span>components but our project no longer compiles because we have the tab click handler, <span class="s22">handleTabClick</span>, that is not referenced anymore. We need to somehow reference it from the <span class="s22">Tab </span>component when a tab heading is clicked, but remember <span class="s22">Tab </span>doesn&#39;t have access to members of <span class="s22">Tabs</span>. So, how can we do this? We&#39;ll find the answer to this problem in the next section.<a name="bookmark537">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part206.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part208.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
