<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a second test for a valid form submission</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part343.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part345.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark938">Creating a second test for a valid form submission</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Now that we have got the gist of how to write robust tests, let&#39;s add a second test to check that no validation errors are shown when the form is filled incorrectly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We&#39;ll start by creating a new test in our <span class="s22">ContactUs </span>group:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">describe(&quot;ContactUs&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 10pt;line-height: 106%;text-align: left;">test(&quot;When submit after filling in fields should submit okay&quot;, () =&gt; {</p><p class="s21" style="padding-left: 91pt;text-indent: 21pt;line-height: 106%;text-align: left;">// TODO - render component, fill in fields, submit the form and check there are no errors</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We&#39;ll render the component in the same way as the first test, but destructuring slightly different variables:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When submit after filling in fields should submit okay&quot;, () =&gt; {</p><p class="s21" style="padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 10pt;text-align: left;">success: true</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const { container, getByText, getByLabelText } = render(</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;ContactUs onSubmit={handleSubmit} /&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Now:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_584.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ll need the <span class="s22">container </span>object to check whether there are any errors displayed</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_585.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">We&#39;ll use the <span class="s22">getByText </span>function to locate the <b>Submit </b>button</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_586.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We&#39;ll use the <span class="s22">getByLabelText </span>function to get references to our inputs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">3. We can now get a reference to the name input using the <span class="s22">getByLabelText</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">function. After that, we do a little check to verify that the name input does exist:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const { container, getByText, getByLabelText } = render(</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;ContactUs onSubmit={handleSubmit} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">const nameField: HTMLInputElement = getByLabelText( &quot;Your name&quot;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">) as HTMLInputElement; expect(nameField).not.toBeNull();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. We then need to simulate the user filling in this input. We do this by calling the native <span class="s22">change </span>event, passing in the required event argument, which includes our input value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const nameField: HTMLInputElement = getByLabelText( &quot;Your name&quot;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 118%;text-align: left;">) as HTMLInputElement; expect(nameField).not.toBeNull(); <span class="s21">fireEvent.change(nameField, {</span></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 9pt;text-align: left;">target: { value: &quot;Carl&quot; }</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_587.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">We use a type assertion after the call to <span class="s22">getByLabelText </span>to inform the TypeScript compiler that the returned element is of type <span class="s22">HTMLInputElement</span>, so that we don&#39;t get a compilation error.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We have simulated the user setting the name field as <span class="s22">Carl</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. We then can follow the same pattern for filling in the email field:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const nameField: HTMLInputElement = getByLabelText( &quot;Your name&quot;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">) as HTMLInputElement; expect(nameField).not.toBeNull(); fireEvent.change(nameField, {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">target: { value: &quot;Carl&quot; }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">const emailField = getByLabelText(&quot;Your email address&quot;) as HTMLInputElement;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">expect(emailField).not.toBeNull(); fireEvent.change(emailField, {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="mailto:carl.rippon@testmail.com" class="s26" target="_blank">target: { value: </a>&quot;carl.rippon@testmail.com&quot; }</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Here, we have simulated the user setting the email field as</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a href="mailto:carl.rippon@testmail.com" class="s7" target="_blank">carl.rippon@testmail.com</a><a href="mailto:carl.rippon@testmail.com" class="s20" target="_blank">.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. We can then submit the form by clicking the <b>Submit </b>button, in the same way as in our first test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">fireEvent.change(emailField, {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;"><a href="mailto:carl.rippon@testmail.com" class="a" target="_blank">target: { value: </a>&quot;carl.rippon@testmail.com&quot; }</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">const submitButton = getByText(&quot;Submit&quot;); fireEvent.click(submitButton);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 90%;text-align: left;">7. Our final task is to verify there are no errors displayed on the screen. Unfortunately, we can&#39;t use the <span class="s22">getAllByText </span>function we used in the last test, as this expects to find at least one element, and in our case we expect there to be no elements. So, before we carry out this check, we are going to add a wrapping <span class="s22">div </span>tag around errors. Let&#39;s go to <span class="s22">Form.tsx </span>and do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{context.errors[name] &amp;&amp; context.errors[name].length &gt; 0 &amp;&amp; (</p><p class="s21" style="padding-top: 1pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">&lt;div data-testid=&quot;formErrors&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{context.errors[name].map(error =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;span key={error} className=&quot;form-error&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">{error}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/span&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">))}</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">We&#39;ve given the <span class="s22">div </span>tag a <span class="s22">data-testid </span>attribute, which we&#39;ll use in our test.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark939">8. Let&#39;s go back to our test. We can now locate the </a><span class="s22">div </span>tag around the errors using the <span class="s22">data-testid </span>attribute. We can then verify that this <span class="s22">div </span>tag is <span class="s22">null</span>, because no errors are displayed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">fireEvent.click(submitButton);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">const errorsDiv = container.querySelector(&quot;[data- testid=&#39;formErrors&#39;]&quot;); expect(errorsDiv).toBeNull();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;text-indent: 0pt;text-align: right;">When the test runs in our suite of tests, we&#39;ll find we now have three passing tests.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Isn&#39;t referencing the <span class="s22">data-testid </span>attribute an implementation detail, though? The user doesn&#39;t see or care about the <span class="s22">data-testid </span>attribute<span class="s23">—</span>this seems to contradict what we said earlier.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">It is kind of an implementation detail, but it is specifically for our test. So, an implementation refactor is unlikely to unexpectedly break our test.</p><p style="padding-top: 7pt;text-indent: 0pt;text-align: right;"><a name="bookmark908">In the next section, we are going to add another test, this time using Jest snapshot tests.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part343.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part345.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
