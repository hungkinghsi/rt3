<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Animated transitions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part176.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part178.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark395">Animated transitions</a><a name="bookmark432">&zwnj;</a><a name="bookmark433">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">In this section, we are going to add a bit of animation when users navigate to different pages. We do this using the <span class="s22">TransitionGroup </span>and <span class="s22">CSSTransition </span>components from the <span class="s22">react-transition-group npm </span>package, as shown in the following steps:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. So, let&#39;s first install this package with its TypeScript types:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">npm install react-transition-group</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">npm install @types/react-transition-group --save-dev</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">TransitionGroup <span class="p">keeps track of all its children inside its local state and calculates when children are entering or exiting. </span>CSSTransition <span class="p">takes whether children are leaving or exiting from </span>TransitionGroup <span class="p">and applies CSS classes to the children based on that status.</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 12pt;text-align: left;">So, <span class="s22">TransitionGroup </span>and <span class="s22">CSSTransition </span>can wrap our routes and invoke CSS</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">classes that we can create to animate pages in and out.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. So, let&#39;s import these components into <span class="s22">Routes.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { CSSTransition, TransitionGroup } from &quot;react- transition-group&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We also need to import <span class="s22">RouteComponentProps </span>from React Router:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">import { Redirect, Route, <span class="s21">RouteComponentProps</span>, Switch} from &quot;react-router-dom&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s use <span class="s22">RouteComponentProps </span>as the <span class="s22">Route </span>component props type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const Routes: React.SFC&lt;<span class="s21">RouteComponentProps</span>&gt; = props =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Let&#39;s add the <span class="s22">CSSTransition </span>and <span class="s22">TransitionGroup </span>components to the JSX around the <span class="s22">Switch </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;TransitionGroup&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;CSSTransition key={props.location.key} timeout={500} classNames=&quot;animate&quot;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;Switch&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/Switch&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="text-indent: 0pt;text-align: right;">&lt;/CSSTransition&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/TransitionGroup&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">TransitionGroup <span class="p">requires children to have a unique key for it to determine what is exiting and entering. So, we have specified a </span>key <span class="p">attribute on </span>CSSTransition <span class="p">to be the </span>location.key <span class="p">property</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">from <span class="s22">RouteComponentProps</span>. We have specified that the transition is going to run for up to half a second via the <span class="s22">timeout </span>attribute. We have also specified the CSS classes that are going to be invoked with an <span class="s22">animate </span>prefix via the <span class="s22">classNames </span>attribute.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. So, let&#39;s add these CSS classes in <span class="s22">index.css</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.animate-enter { opacity: 0;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">z-index: 1;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.animate-enter-active { opacity: 1;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">transition: opacity 450ms ease-in;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.animate-exit { display: none;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">CSSTransition <span class="p">is going to invoke these CSS classes when its key changes. The CSS classes initially hide the element being transitioned and gradually ease the element&#39;s opacity so that it shows.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="481" height="111" alt="image" src="Image_255.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="497" height="129" alt="image" src="Image_256.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. If we go to <span class="s22">index.tsx</span>, we get a compilation error where we reference the <span class="s22">Routes </span>component because it is expecting us to pass props such as <span class="s22">history </span>from the router:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark434">Unfortunately, we can&#39;t use the </a><span class="s22">withRouter </span>higher order component because this would be outside the <span class="s22">Router </span>component. To resolve this, we can add a new component called <span class="s22">RoutesWrap</span>, which doesn&#39;t take in any props and wraps our existing <span class="s22">Routes </span>component. The <span class="s22">Router </span>will move up to <span class="s22">RoutesWrap </span>and will contain a <span class="s22">Route </span>component that always renders our <span class="s22">Routes </span>component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">8. So, let&#39;s add this <span class="s22">RoutesWrap </span>component to <span class="s22">Routes.tsx </span>and export</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">RoutesWrap <span class="p">instead of </span>Routes<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">const RoutesWrap: React.SFC = () =&gt; { return (</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;Router&gt;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;Route component={Routes} /&gt;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/Router&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">class Routes extends React.Component&lt;RouteComponentProps, IState&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">export default <span class="s21">RoutesWrap;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 55pt;text-indent: 0pt;text-align: left;">The compilation error goes away, which is great.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">9. Let&#39;s now remove <span class="s22">Router </span>from our <span class="s22">Routes </span>component, leaving the <span class="s22">div </span>tag as its root:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;Header /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;TransitionGroup&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/TransitionGroup&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we go to the running app and navigate to the different pages, you&#39;ll see a nice fade animation as the page comes into view.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part176.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part178.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
