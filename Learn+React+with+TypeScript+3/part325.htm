<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Implementing a mutation with Apollo</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part324.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part326.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark832">Implementing a mutation with Apollo</a><a name="bookmark883">&zwnj;</a><a name="bookmark884">&zwnj;</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Let&#39;s allow users to star a GitHub repository in our app. This will involve sending a</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">mutation <span class="p">via Apollo:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, let&#39;s import the <span class="s22">Mutation </span>component from <span class="s22">react-apollo</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import { Mutation } from &quot;react-apollo&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Now let&#39;s create the <span class="s22">mutation</span>. The is the same query we executed in the GitHub GraphQL Explorer earlier:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const STAR_REPO = gql` mutation($repoId: ID!) {</p><p class="s12" style="padding-left: 123pt;text-indent: -10pt;line-height: 120%;text-align: left;">addStar(input: { starrableId: $repoId }) { starrable {</p><p class="s12" style="padding-left: 145pt;text-indent: -10pt;line-height: 120%;text-align: left;">stargazers { totalCount</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">`;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">3. In the JSX, under where we render the description, let&#39;s place the <span class="s22">Mutation</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{repo.description}&lt;/p&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">{!repo.viewerHasStarred &amp;&amp; (</p><p class="s21" style="padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;Mutation mutation={STAR_REPO}</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 10pt;text-align: left;">variables={{ repoId: repo.id }}</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">{() =&gt; (</p><p class="s21" style="padding-left: 150pt;text-indent: -16pt;line-height: 106%;text-align: left;">// render Star button that invokes the mutation when clicked</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;line-height: 10pt;text-align: center;">)}</p><p class="s21" style="padding-left: 15pt;text-indent: 0pt;text-align: center;">&lt;/Mutation&gt;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">)}</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">Last 5 issues:</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_539.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We only render the <span class="s22">mutation </span>if the <span class="s22">viewer </span>hasn&#39;t already starred the repository</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_540.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Mutation </span>component takes in the mutation we just defined along with the variables, which is the repository <span class="s22">id </span>in our case</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">4. The <span class="s22">Mutation </span>component has a children function that gives us access to the</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s22">addStar </span>function. So, let&#39;s render a <b>Star! </b>button that calls <span class="s22">addStar </span>when clicked:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Mutation</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{(<span class="s21">addStar</span>) =&gt; (</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s21" style="padding-left: 145pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;button onClick={() =&gt; addStar()}&gt; Star!</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;/button&gt;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">5. The <span class="s22">Mutation </span>component also tells us when the <span class="s22">mutation </span>is being executed via a <span class="s22">loading </span>property in a second argument in the children function. Let&#39;s use this to disable the button and inform the user that the star is being added:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Mutation</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{(addStar, { <span class="s21">loading </span>}) =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button <span class="s21">disabled={loading} </span>onClick={() =&gt; addStar()}&gt;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">{loading ? &quot;Adding ...&quot; : &quot;Star!&quot;}</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. The <span class="s22">Mutation </span>component also tells us when there is an error. So, let&#39;s use this and render the error if one happens:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Mutation</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{(addStar, { loading, <span class="s21">error </span>}) =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button ...&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;"><a name="bookmark885">...</a></p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">{error &amp;&amp; &lt;div&gt;{error.toString()}&lt;/div&gt;}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a href="http://github.com/" class="s20" target="_blank">If we try to add a star to a repository, the star should be successfully added. We can go to the GitHub repository in </a><a href="http://github.com/" class="a" target="_blank">github.com</a> <span class="p">to verify this.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a name="bookmark833">So, we are really getting to grips with Apollo now that we&#39;ve implemented both queries and a </a><span class="s22">mutation</span>. There is one thing that was a little odd, though, that we may have spotted. The number of stars doesn&#39;t update in our app after we star a repository. Even if we search for the repository again, the number of stars is the number before we started it. However, if we refresh the browser and search for the repository again, we do get the correct number of stars. So, what&#39;s going on here? We&#39;ll find out in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part324.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part326.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
