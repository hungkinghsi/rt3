<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding a onSubmit form prop</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part237.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part239.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark638">Adding a onSubmit form prop</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">In our <span class="s22">Form </span>component, we need a new prop that allows a consumer to specify the <span class="s22">submit</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">function to be called. We&#39;ll do this in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by creating a new prop function called <span class="s22">onSubmit </span>in the <span class="s22">Form </span>props interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">export interface ISubmitResult { success: boolean;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><a name="bookmark639">errors?: IErrors;</a></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IFormProps { defaultValues: IValues; validationRules: IValidationProp;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;line-height: 10pt;text-align: center;">onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The function will take in the field values and asynchronously return whether the submission was successful, with any validation errors that occurred on the server.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">2. We are going to track whether the form is being submitted or not in the <span class="s22">Form </span>state. We are also going to track whether the form has successfully been submitted in the <span class="s22">Form </span>state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 114%;text-align: left;">interface IState { values: IValues; errors: IErrors; <span class="s21">submitting: boolean; submitted: boolean;</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s initialize those state values in the constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">constructor(props: IFormProps) {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 118%;text-align: left;">this.state = { errors, <span class="s21">submitted: false,</span></p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 9pt;text-align: left;">submitting: false,</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">values: props.defaultValues</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. We can now disable the submit button if the form is being submitted, or has successfully been submitted:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;button type=&quot;submit&quot;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">disabled={this.state.submitting || this.state.submitted}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">Submit</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark640">5. Let&#39;s reference a submit handler in the </a><span class="s22">form </span>tag:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;form className=&quot;form&quot; noValidate={true}</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">onSubmit={this.handleSubmit}<span class="s12">&gt;</span></p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: center;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: center;">&lt;/form&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. We can now start to implement the submit handler we just referenced:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">e.preventDefault();</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We call <span class="s22">preventDefault </span>in the submit event argument to stop the browser automatically posting the form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">7. We need to make sure all the fields are valid before starting the form submission process. Let&#39;s reference and create a <span class="s22">validateForm </span>function that does this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">private validateForm(): boolean { const errors: IErrors = {};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">let haveError: boolean = false; Object.keys(this.props.defaultValues).map(fieldName =&gt; {</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">errors[fieldName] = this.validate( fieldName, this.state.values[fieldName]</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">);</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (errors[fieldName].length &gt; 0) { haveError = true;</p><p class="s21" style="text-indent: 0pt;line-height: 10pt;text-align: right;">}</p><p class="s21" style="text-indent: 0pt;text-align: right;">});</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">this.setState({ errors }); return !haveError;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">e.preventDefault();</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">if (this.validateForm()) {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark641">The </a><span class="s22">validateForm </span>function iterates through the fields, calling the <span class="s22">validate </span>function that has already been implemented. The state is updated with the latest validation errors, and we return whether there are any errors or not in any of the fields.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s implement the rest of the submit handler now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">e.preventDefault();</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">if (this.validateForm()) {</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">this.setState({ submitting: true });</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 106%;text-align: left;">const result = await this.props.onSubmit(this.state.values); this.setState({</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">errors: result.errors || {}, submitted: result.success, submitting: false</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If the form is valid, we start by setting the <span class="s22">submitting </span>state to <span class="s22">true</span>. We then call the <span class="s22">onSubmit </span>prop function asynchronously. When the <span class="s22">onSubmit </span>prop function has finished, we set any validation errors from the function in the state along with whether the submission was successful. We also set in the state the fact that the submission process has finished.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark582">Now, our </a><span class="s22">Form </span>component has an <span class="s22">onSubmit </span>function prop. In the next section, we&#39;ll consume this in our <b>Contact Us </b>page.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part237.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part239.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
