<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Clearing the caching using refetchQueries</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part326.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part328.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark888">Clearing the caching using refetchQueries</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We need a way of clearing the cached query result after a <span class="s22">mutation </span>has happened. One way of doing this is to use the <span class="s22">refetchQueries </span>prop on the <span class="s22">Mutation </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">1. Let&#39;s give this a go. The <span class="s22">refetchQueries </span>prop takes in an array of objects that contain the queries with the corresponding variable values that should be removed from the cache:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;Mutation mutation={STAR_REPO}</p><p class="s12" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">variables={{ repoId: repo.id }}</p><p class="s21" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">refetchQueries={[</p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">{</p><p class="s21" style="padding-left: 146pt;text-indent: 0pt;line-height: 106%;text-align: left;">query: GET_REPO, variables: {</p><p class="s21" style="padding-left: 156pt;text-indent: 0pt;line-height: 106%;text-align: left;">orgName: search.orgName, repoName: search.repoName</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 146pt;text-indent: 0pt;text-align: left;"><a name="bookmark889">}</a></p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">]}</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. If we star a repository now, the number of stars doesn&#39;t update straight away. However, if the <b>Search </b>button is pressed, the stars are updated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, the cache was cleared but the experience still isn&#39;t ideal. Ideally, we want the number of stars to be updated immediately after the <b>Star! </b>button is clicked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we think through what we have just done, we are trying to bypass the cache. However, the cache is in place to help our app perform well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark835">So, this approach doesn&#39;t feel great. The user experience still isn&#39;t ideal, and we have just made our app less performant. There must be a better way! We&#39;ll explore a different approach in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part326.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part328.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
