<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating reducers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part251.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part253.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark689">Creating reducers</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">A reducer is a function that is responsible for creating new state for a given action. So, the function takes in an action with the current state and returns the new state. In this section, we&#39;ll create a reducer for the two actions we have created on products.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by creating a file called <span class="s22">ProductsReducer.ts </span>with the following import statements:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { Reducer } from &quot;redux&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { IProductsState, ProductsActions, ProductsActionTypes } from &quot;./ProductsTypes&quot;;</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We are importing the <span class="s22">Reducer </span>type from Redux along with types for the actions and state we created earlier.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Next, we need to define what the initial state is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const initialProductState: IProductsState = { products: [],</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">productsLoading: false</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">So, we are setting the products to an empty array and product loading state to</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">false<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We can now start to create the reducer function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">export const productsReducer: Reducer&lt;IProductsState, ProductsActions&gt; = (</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">state = initialProductState, action</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">) =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">switch (action.type) {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">// TODO - change the state</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">return state;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: justify;">We&#39;ve typed the function with the <span class="s22">Reducer </span>generic type from Redux, passing in our state and action types. This gives us a nice level of type safety.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_426.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark690">The function takes in parameters for the state and action as required by Redux.</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_427.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_428.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The state defaults to the initial state object we just set in the previous step. At the end of the function, we return the default state if the action type is not recognized by the switch statement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s carry on implementing our reducer:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">switch (action.type) {</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">case ProductsActionTypes.LOADING: { return {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">...state, productsLoading: true</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">case ProductsActionTypes.GETALL: { return {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...state,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">products: action.products, productsLoading: false</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: justify;">We have implemented a switch branch for each action. Both branches follow the same pattern by returning a new state object that has the old state spread into it and the appropriate properties merged over the top.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark658">So, that&#39;s our first reducer complete. In the next section, we&#39;ll create our store.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part251.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part253.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
