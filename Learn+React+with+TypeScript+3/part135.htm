<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>JSX</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part134.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part136.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark328">JSX</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: justify;">As mentioned in the previous section, JSX looks a bit like HTML. We can have JSX in our JavaScript (or TypeScript) code, as we did in the last section in our <span class="s22">render </span>function. JSX isn&#39;t valid JavaScript though<span class="s23">â€”</span>we need a preprocessor step to convert it into JavaScript.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">We&#39;re going to use an online Babel REPL to play with JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;"><a href="https://babeljs.io/repl" class="s20" target="_blank">1. Open a browser, go to </a><a href="https://babeljs.io/repl" class="a" target="_blank">https://babeljs.io/</a>repl<span class="p">, and enter the following JSX in the left-hand pane:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 27pt;text-indent: 0pt;text-align: center;">&lt;span&gt;This is where our title should go&lt;/span&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The following appears in the right-hand pane, which is what our JSX has compiled down to:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.createElement( &quot;span&quot;,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">null,</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&quot;This is where our title should go&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We can see that it compiles down to a call to <span class="s22">React.createElement</span>, which has three parameters:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_161.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The element type, which can be an HTML tag name string (such as <span class="s22">&quot;span&quot;</span>), a React component type, or a React fragment type</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_162.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_163.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">An object containing the props to be applied to the element The children for the element</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s expand our example by putting <span class="s22">div </span>tags around our <span class="s22">span</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-title-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;span&gt;This is where our title should go&lt;/span&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">This now compiles down to two calls to <span class="s22">React.createElement</span>, with</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">span <span class="p">being passed in as a child to </span>div<span class="p">:</span></p><p class="s12" style="padding-top: 9pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.createElement( &quot;div&quot;,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">{ className: &quot;confirm-title-container&quot; }, React.createElement(</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">&quot;span&quot;, null,</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&quot;This is where our title should go&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. This is starting to make sense, but so far our JSX has consisted of only HTML. Let&#39;s add some JavaScript now, by declaring a props object literal. Let&#39;s also reference the <span class="s22">title </span>prop inside the <span class="s22">span </span>using curly braces:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const props = {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">title: &quot;React and TypeScript&quot;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-title-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;span&gt;<span class="s21">{props.title}</span>&lt;/span&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">This is more interesting now. It compiles down to this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">var props = {</p><p class="s12" style="padding-top: 1pt;padding-left: 96pt;text-indent: 0pt;text-align: left;">title: &quot;React and TypeScript&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 96pt;text-indent: -5pt;line-height: 120%;text-align: left;">React.createElement( &quot;div&quot;,</p><p class="s12" style="padding-left: 96pt;text-indent: 0pt;line-height: 120%;text-align: left;">{ className: &quot;confirm-title-container&quot; }, React.createElement(</p><p class="s12" style="padding-left: 96pt;text-indent: 0pt;line-height: 120%;text-align: left;">&quot;span&quot;, null, props.title</p><p class="s12" style="text-indent: 0pt;text-align: right;">)</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">The key point is that we can inject JavaScript into HTML by using curly braces.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. To further illustrate the point, let&#39;s empty the <span class="s22">props </span>object literal, and use a JavaScript ternary inside <span class="s22">span</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const props = {};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-title-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 106%;text-align: left;">&lt;span&gt;<span class="s21">{props.title ? props.title : &quot;React and TypeScript&quot;}</span>&lt;/span&gt;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We see that the nested call to <span class="s22">React.createElement </span>uses our ternary as the child of <span class="s22">span</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.createElement( &quot;span&quot;,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">null,</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">props.title ? props.title : &quot;React and TypeScript&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark329">So, why do we use the </a><span class="s22">className </span>attribute rather than <span class="s22">class</span>? Well, we now understand that JSX compiles down to JavaScript, and as <span class="s22">class </span>is a keyword in JavaScript, having a <span class="s22">class </span>attribute in JSX would clash. So, React uses <span class="s22">className </span>instead for CSS class references.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Now that we understand a little more about JSX, let&#39;s come back to our <span class="s22">Confirm</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark270">component.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part134.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part136.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
