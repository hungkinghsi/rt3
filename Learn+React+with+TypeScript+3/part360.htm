<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Chapter 7: Working with Forms</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part359.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part361.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark962">Chapter 7: Working with Forms</a><a name="bookmark974">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Extend our generic <span class="s22">Field </span>component to include a number editor using the native number input.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_610.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">Firstly, add <span class="s22">&quot;Number&quot; </span>to the <span class="s22">type </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">interface IFieldProps {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">type?: &quot;Text&quot; | &quot;Email&quot; | &quot;Select&quot; | &quot;TextArea&quot; <span class="s21">| &quot;Number&quot;</span>;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_611.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">Include the <span class="s22">&quot;Number&quot; </span>type when rendering the <span class="s22">input</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">{(type === &quot;Text&quot; || type === &quot;Email&quot; <span class="s21">|| type === &quot;Number&quot;</span>) &amp;&amp; (</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">type={type.toLowerCase()} id={name} value={context.values[name]}</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">onChange={e =&gt; handleChange(e, context)} onBlur={e =&gt; handleBlur(e, context)}</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. Implement an urgency field on the <b>Contact Us </b>form to indicate how urgent a response is. The field should be numeric.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Add the following field immediately after the notes field:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">&lt;Form.Field name=&quot;urgency&quot; label=&quot;How urgent is a response?&quot; type=&quot;Number&quot; /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Implement a new validator function in the generic <span class="s22">Form </span>component, that validates a number is between two other numbers.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Add the following function in <span class="s22">Form.tsx</span>:</p><p class="s12" style="padding-top: 9pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export const between: Validator = ( fieldName: string,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">values: IValues,</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">bounds: { lower: number; upper: number }</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">): string =&gt; values[fieldName] &amp;&amp;</p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">(values[fieldName] &lt; bounds.lower || values[fieldName] &gt; bounds.upper)</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">? `This must be between ${bounds.lower} and ${bounds.upper}`</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">: &quot;&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Implement a validation rule on the urgency field to ensure it is between 1 and 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_612.png"/></span></p><p style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: center;">Firstly import the <span class="s22">between </span>validator into <span class="s22">ContactUs.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">import { <span class="s21">between</span>, Form, ISubmitResult, IValues, minLength, required } from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_613.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">Add the rule on urgency in the <span class="s22">validationRules </span>prop in <span class="s22">ContactUs.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">validationRules={{</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">email: { validator: required },</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">name: [{ validator: required }, { validator: minLength, arg: 3 }],</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">urgency: [{ validator: between, arg: { lower: 1, upper: 10 }</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}]</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. Our validation triggers when a users clicks in and out of a field without typing anything. How can we just trigger validation, still when a field loses focus but only when it has been changed? Have a go at an implementation for this.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_614.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We need to track whether a field has been touched in the form state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 124pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface ITouched { [key: string]: boolean;</p><p class="s21" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">interface IState {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">touched: ITouched;</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_615.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We initialize the <span class="s22">touched </span>values for each field to <span class="s22">false </span>in the constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">constructor(props: IFormProps) { super(props);</p><p class="s12" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">const errors = {};</p><p class="s21" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">const touched = {};</p><p class="s12" style="padding-top: 1pt;padding-left: 135pt;text-indent: -10pt;line-height: 120%;text-align: left;">Object.keys(props.defaultValues).forEach(fieldName =&gt; { errors[fieldName] = [];</p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;line-height: 10pt;text-align: left;">touched[fieldName] = false;</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 135pt;text-indent: -10pt;line-height: 120%;text-align: left;">this.state = { errors, submitted: false,</p><p class="s12" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">submitting: false,</p><p class="s21" style="padding-top: 1pt;padding-left: 135pt;text-indent: 0pt;text-align: left;">touched,</p><p class="s12" style="padding-top: 1pt;padding-left: 135pt;text-indent: 0pt;text-align: left;">values: props.defaultValues</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_616.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">In the <span class="s22">setValue </span>method, we update the <span class="s22">touched </span>value to <span class="s22">true </span>for the field being updated:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">private setValue = (fieldName: string, value: any) =&gt; { const newValues = { ...this.state.values, [fieldName]:</p><p class="s12" style="padding-left: 129pt;text-indent: 0pt;text-align: left;">value };</p><p class="s21" style="padding-top: 1pt;padding-left: 129pt;text-indent: -5pt;line-height: 106%;text-align: left;">const newTouched = { ...this.state.touched, [fieldName]: true };</p><p class="s12" style="padding-left: 124pt;text-indent: 0pt;line-height: 10pt;text-align: left;">this.setState({ values: newValues, <span class="s21">touched: newTouched</span></p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_617.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">At the top of the validate method, we check whether the field has been touched and if not, we return an empty array to indicate the field is valid:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">private validate = (fieldName: string, value: any): string[] =&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (!this.state.touched[fieldName]) { return [];</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part359.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part361.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
