<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Connecting ProductsPage to the store</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part256.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part258.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark697">Connecting ProductsPage to the store</a></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The first component we are going to connect to the store is going to be the <span class="s22">ProductsPage</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s open up <span class="s22">ProductsPage.tsx </span>and start to refactor it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, let&#39;s import the <span class="s22">connect </span>function from React Redux:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import { connect } from &quot;react-redux&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We&#39;ll use the <span class="s22">connect </span>function at the end of this section to connect the</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">ProductsPage <span class="p">component to the store.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Let&#39;s import the store state type and the <span class="s22">getProducts </span>action creator from our store:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { IApplicationState } from &quot;./Store&quot;; import { getProducts } from &quot;./ProductsActions&quot;;</p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. The <span class="s22">ProductPage </span>component won&#39;t contain any state now because this will be held in the Redux store. So, let&#39;s start by removing the state interface, the</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 12pt;text-align: left;">static <span class="s22">getDerivedStateFromProps </span>method, as well as the constructor. The</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">ProductsPage <span class="p">component should now have the following shape:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class ProductsPage extends React.Component&lt;RouteComponentProps&gt; { public async componentDidMount() { ... }</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">public render() { ... }</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. The data is going to come from the store via props now. So, let&#39;s refactor our props interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface IProps extends RouteComponentProps { getProducts: typeof getProducts;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">loading: boolean; products: IProduct[];</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class ProductsPage extends React.Component&lt;<span class="s21">IProps</span>&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_433.png"/></span></p><p style="padding-left: 76pt;text-indent: -25pt;line-height: 22pt;text-align: left;">So, we&#39;ll get the following data passed from the store to our component: The <span class="s22">getProducts </span>action creator</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_434.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_435.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 109%;text-align: left;">A flag called <span class="s22">loading </span>that indicates whether products are being fetched The array of products</p><p style="padding-top: 6pt;padding-left: 22pt;text-indent: 0pt;line-height: 14pt;text-align: center;">5.  So, let&#39;s adjust the <span class="s22">componentDidMount </span>life cycle method to invoke the</p><p class="s22" style="padding-left: 39pt;text-indent: 0pt;line-height: 14pt;text-align: center;">getProducts <span class="p">action creator to start the process of products being fetched:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.props.getProducts();</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. We no longer reference the <span class="s22">products </span>array directly from <span class="s22">ProductsData.ts</span>. So, let&#39;s remove that from the input statement so that it looks as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { IProduct } from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. There is still no sign of the <span class="s22">search </span>state we used to have. We are just going to pick this up at the start of the <span class="s22">render </span>method now and not store it in state at all:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 106%;text-align: left;">const searchParams = new URLSearchParams(this.props.location.search);</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">const search = searchParams.get(&quot;search&quot;) || &quot;&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return ( ... );</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s stay in the <span class="s22">render </span>method and replace the old <span class="s22">state </span>references:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;product-list&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">{this.<span class="s21">props.products.</span>map(product =&gt; { if (!<span class="s21">search </span>|| (<span class="s21">search </span>&amp;&amp;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">product.name.toLowerCase().indexOf(<span class="s21">search</span>.toLowerCase()) &gt; -1)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">) { ... }</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">})}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">9. Under the class, but before the export statement, let&#39;s create a function that will map the state coming from the store to the component props:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const mapStateToProps = (store: IApplicationState) =&gt; { return {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">loading: store.products.productsLoading, products: store.products.products</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we are getting whether products are being loaded as well as the products from the store and passing these to our props.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: justify;">10. There is one more prop we need to map to and that is the <span class="s22">getProducts </span>function prop. Let&#39;s create another function that will map this action from the store to this function prop in the component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const mapDispatchToProps = (dispatch: any) =&gt; { return {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><a name="bookmark698">getProducts: () =&gt; dispatch(getProducts())</a></p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">11. There&#39;s one more job to do at the bottom of the file. This is to wrap the React Redux <span class="s22">connect </span>HOC around our <span class="s22">ProductsPage </span>component before it is exported:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">export default connect( mapStateToProps, mapDispatchToProps</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">)(ProductsPage);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">The <span class="s22">connect </span>HOC connects the component to our store, which is provided to us by the <span class="s22">Provider </span>component higher up in the component tree. The <span class="s22">connect </span>HOC also invokes the mapper functions that map the state and action creators from the store into the component props.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;">12. It&#39;s finally time to give our enhanced page a try. Let&#39;s start the dev server and the app via the terminal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">npm start</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We should find the page behaves exactly the same as it did before. The only difference is now the state is being managed in our Redux store.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark663">In the next section, we are going enhance our Products page by adding the loading spinner we already have in our project.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part256.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part258.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
