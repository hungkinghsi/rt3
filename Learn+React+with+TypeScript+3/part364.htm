<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Chapter 11: Unit Testing with Jest</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part363.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part365.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark966">Chapter 11: Unit Testing with Jest</a><a name="bookmark978">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. Let&#39;s say we are implementing a Jest test and we have a variable</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">called <span class="s22">result</span>, which we want to check isn&#39;t <span class="s22">null</span>. How can we do this with Jest matcher functions?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">expect(result).not.toBeNull()</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s say we have variable called <span class="s22">person </span>that is of type <span class="s22">IPerson</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We want to check that the <span class="s22">person </span>variable is <span class="s22">{ id: 1, name: &quot;bob&quot; }</span>. How can we do this with Jest matcher functions?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 19pt;text-indent: 0pt;text-align: center;">expect(person).not.toBeEqual({ id: 1, name: &quot;bob&quot; });</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. Is it possible to carry out our check in the last question with a Jest snapshot test? If so how?</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Yes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">expect(person).toMatchSnapshot();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;">4. We have implemented a component called <span class="s22">CheckList</span>, which renders text from an array in a list. Each list item has a checkbox so that the user can select list items. The component has a function prop called <span class="s22">onItemSelect </span>that is called when a user selects an item by checking the checkbox. We are implementing a test to verify that the <span class="s22">onItemSelect </span>prop works. The following line of code renders the component in the test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const { container } = render(&lt;SimpleList data={[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Strawberry&quot;]} onItemSelect={handleListItemSelect} /&gt;);</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">How can we use a Jest mock function for <span class="s22">handleListItemSelect </span>and check that it is called?</p><p class="s21" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const handleListItemSelect = jest.fn();</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const { container } = render(&lt;SimpleList data={[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Strawberry&quot;]} onItemSelect={handleListItemSelect} /&gt;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">// TODO - select the list item</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">expect(handleListItemSelect).toBeCalledTimes(1);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">5. In the implementation of <span class="s22">SimpleList </span>in the last question,</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">the <span class="s22">onItemSelect </span>function takes in a parameter called <span class="s22">item </span>which is</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">the <span class="s22">string </span>value that the user has selected. In our test, let&#39;s pretend we have already simulated the user selecting <span class="s22">&quot;Banana&quot; </span>. How can we check</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">the <span class="s22">onItemSelect </span>function was called with the item parameter being</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">&quot;Banana&quot;<span class="p">?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">expect(handleListItemSelect).toBeCalledWith(&quot;Banana&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. In the implementation of <span class="s22">SimpleList </span>in the last two questions, the text is displayed using a label that is tied to the checkbox is using the <span class="s22">for </span>attribute. How can we use functions in React Testing Library to firstly locate the <span class="s22">&quot;Banana&quot; </span>checkbox and then check it?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const checkbox = getByLabelText(&quot;Banana&quot;) as HTMLInputElement; fireEvent.change(checkbox, {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">target: { checked: true }</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">7. In this chapter, we found out the coverage was low in our code that rendered posts from the JSONPlaceholder REST API. One of the areas that wasn&#39;t covered was handling HTTP error codes in the <span class="s22">componentDidMount </span>function when we get the posts from the REST API. Create a test to cover this area of code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When the post GET request errors when the page is loaded, an error is shown&quot;, async () =&gt; {</p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const mock = new MockAdapter(axios); mock.onGet(&quot;https://jsonplaceholder.typicode.com/posts&quot;).reply(404)</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 22pt;text-align: left;">const { getByTestId } = render(&lt;App /&gt;); const error: any = await waitForElement(() =&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">getByTestId(&quot;error&quot;));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">expect(error).toMatchSnapshot();</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">A test ID needs to be added to the <span class="s22">App </span>component code:</p><p class="s12" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">{this.state.error &amp;&amp; &lt;p className=&quot;error&quot; data- testid=&quot;error&quot;&gt;{this.state.error}&lt;/p&gt;}</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part363.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part365.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
