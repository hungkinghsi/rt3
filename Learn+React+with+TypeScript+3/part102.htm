<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Empty tuples</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part101.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part103.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark192">Empty tuples</a><a name="bookmark223">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In TypeScript 3, we can now define an empty tuple type. Let&#39;s have a little play with this in the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s create the following type alias for an empty tuple:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">type Empty = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s declare a variable of this type and assign it to an empty array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">const empty: Empty = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Now, let&#39;s try to declare a variable of this type and assign it to a non-empty array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">const notEmpty: Empty = [&quot;Billy&quot;];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">As expected, we get a compilation error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="529" height="135" alt="image" src="Image_122.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark224">Why is an empty tuple type useful, though? On its own, it perhaps is not that useful, but it can be used as part of a union type, which we&#39;ll cover in detail later in the book. As a quick example for now, we can create a type for no more than three scores, where no scores is also acceptable:</a></p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;line-height: 22pt;text-align: left;">type Scores = [] | [number] | [number, number] | [number, number, number] const benScores: Scores = [];</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;line-height: 120%;text-align: left;">const samScores: Scores = [55]; const bobScores: Scores = [95, 75];</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">const jayneScores: Scores = [65, 50, 70];</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">const sarahScores: Scores = [95, 50, 75, 75];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">All the scores are valid except Sarah&#39;s, because four scores aren&#39;t allowed in the <span class="s22">Scores</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark193">type.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part101.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part103.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
