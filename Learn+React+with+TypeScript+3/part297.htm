<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating data with axios</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part296.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part298.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark798">Creating data with axios</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Let&#39;s move on to creating data now. We are going to allow the user to enter a post title and body and save it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s first create a new state for the title and body:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IState {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">editPost: IPost;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s initialize this new state as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public constructor(props: {}) { super(props);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.state = {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...,</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">editPost: { body: &quot;&quot;,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">title: &quot;&quot;, userId: 1</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. We&#39;ll create an <span class="s22">input </span>and <span class="s22">textarea </span>to capture the post title and body from the user:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;App&quot;&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;post-edit&quot;&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">type=&quot;text&quot; placeholder=&quot;Enter title&quot;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">value={this.state.editPost.title} onChange={this.handleTitleChange}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;textarea placeholder=&quot;Enter body&quot;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">value={this.state.editPost.body}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">onChange={this.handleBodyChange}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;button onClick={this.handleSaveClick}&gt;Save&lt;/button&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">{this.state.loading &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;button onClick={this.handleCancelClick}&gt;Cancel&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s implement the change handlers we have just referenced to update the state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">private handleTitleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.setState({</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 21pt;line-height: 120%;text-align: left;">editPost: { ...this.state.editPost, title: e.currentTarget.value }</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">private handleBodyChange = (e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.setState({</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">editPost: { ...this.state.editPost, body: e.currentTarget.value</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. We can add a bit of CSS in <span class="s22">index.css </span>to make this all look reasonable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.post-edit { display: flex;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">flex-direction: column; width: 300px;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">margin: 0px auto;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.post-edit input {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">font-family: inherit; width: 100%;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">margin-bottom: 5px;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.post-edit textarea { font-family: inherit; width: 100%;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">margin-bottom: 5px;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;"><a name="bookmark799">.post-edit button { font-family: inherit; width: 100px;</a></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. We can also start work on the save click handler and <span class="s22">POST </span>the new post to the REST API using <span class="s22">axios</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleSaveClick = () =&gt; { axios</p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.post&lt;IPost&gt;( &quot;https://jsonplaceholder.typicode.com/posts&quot;,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;line-height: 120%;text-align: left;">body: this.state.editPost.body, title: this.state.editPost.title, userId: this.state.editPost.userId</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">headers: {</p><p class="s12" style="padding-top: 1pt;padding-left: 25pt;text-indent: 0pt;text-align: center;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We can handle response using the <span class="s22">then </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.then(response =&gt; { this.setState({</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">posts: this.state.posts.concat(response.data)</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we concatenate the new post with the existing post to create a new posts array for the state.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The structure of the <span class="s22">post </span>function call is very similar to <span class="s22">get</span>. In fact, we could add error handling, a timeout, and the ability to cancel the request in the same way as we did for <span class="s22">get</span>.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we add a new post in the running app and click the <b>Save </b>button, we see it added to the bottom of the posts list.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Next up, we will allow users to update posts.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part296.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part298.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
