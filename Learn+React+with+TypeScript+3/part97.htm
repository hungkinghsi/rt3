<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Tuples</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part96.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part98.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark187">Tuples</a><a name="bookmark212">&zwnj;</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Tuples have had a few enhancements in TypeScript 3, so that they can be used with the popular <span class="s22">rest </span>and <span class="s22">spread </span>JavaScript syntax. Before we get into the specific enhancements, we&#39;ll go through what tuples are, along with what the <span class="s22">rest </span>and <span class="s22">spread </span>syntax is. A tuple is like an array but the number of elements are fixed. It&#39;s a simple way to structure data and use some type safety.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s have a play with tuples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. In the TypeScript playground, let&#39;s enter the following example of a tuple variable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">let product: [string, number];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ve initialized a <span class="s22">product </span>variable to a tuple type with two elements. The first element is a string and the second a number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We can store a product name and its unit price in the <span class="s22">product </span>variable on the next line, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">product = [&quot;Table&quot;, 500];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s try to store the product name and unit price the other way around:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">product = [500, &quot;Table&quot;];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">Not surprisingly, we get a compilation error. If we hover over <span class="s22">500</span>, the compiler quite rightly complains that it was expecting a string. If we hover over <span class="s22">&quot;Table&quot;</span>, the compiler complains that it expects a number:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><span><img width="524" height="106" alt="image" src="Image_118.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: justify;">So, we do get type safety, but tuples tell us nothing about what should be in the elements. So, they are nice for small structures or structures where the elements are obvious.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. The following examples are arguably fairly readable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let flag: [string, boolean]; flag = [&quot;Active&quot;, false]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let last3Scores: [string, number, number, number] last3Scores = [&quot;Billy&quot;, 60, 70, 75];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let point: [number, number, number]; point = [100, 200, 100];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. However, the following example is not so readable:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let customer: [string, number, number]; customer = [&quot;Tables Ltd&quot;, 500100, 10500];</p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">What exactly do those last two numbers represent?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;"><a name="bookmark213">6. We can access items in a tuple in the same way as an array, by using the element&#39;s index. So, let&#39;s access the product name and unit price in our </a><span class="s22">product </span>variable in the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let product: [string, number]; product = [&quot;Table&quot;, 500]; console.log(product[0]); console.log(product[1]);</p><p style="padding-top: 7pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">If we run the program, we&#39;ll get <b>&quot;Table&quot; </b>and <b>500 </b>output to the console.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. We can iterate through elements in a tuple like we can an array, using a <span class="s22">for </span>loop or the array <span class="s22">forEach </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">let product: [string, number]; product = [&quot;Table&quot;, 500];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 96pt;text-indent: -5pt;line-height: 110%;text-align: left;">for <span class="s12">(let element in product) { console.log(product[element]);</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 96pt;text-indent: -5pt;line-height: 110%;text-align: left;">product.<span class="s21">forEach</span>(function(element) { console.log(element);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Running the program, will output <span class="s22">Table </span>and <span class="s22">500 </span>to the console twice. Notice that we don&#39;t need to add a type annotation to the <span class="s22">element </span>variable because the TypeScript compiler cleverly infers this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><a name="bookmark188">So, that&#39;s the tuple type, but&#39;s what&#39;s new in TypeScript 3? The enhancements have been largely driven by the popularity of JavaScript&#39;s </a><span class="s22">rest </span>and <span class="s22">spread </span>syntax, so let&#39;s briefly cover this in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part98.htm">JavaScript rest and spread syntax</a><a class="toc0" href="part99.htm">Open-ended tuples</a><a class="toc0" href="part100.htm">Tuple function parameters</a><a class="toc0" href="part101.htm">Spread expressions</a><a class="toc0" href="part102.htm">Empty tuples</a><a class="toc0" href="part103.htm">Optional tuple elements</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part96.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part98.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
