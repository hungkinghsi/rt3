<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Container and presentational components</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part202.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part204.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark502">Container and presentational components</a><a name="bookmark522">&zwnj;</a><a name="bookmark523">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Splitting pages up into container and presentational components makes the presentational component easier to reuse. The container component is responsible for how things work, fetching any data from a web API and managing state. The presentational component</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">is responsible for how things look. Presentational components receive data via their properties and also have property event handlers so that their container can manage the user interactions.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">We are going use this pattern in our React shop to split the product page into container and presentational components. The <span class="s22">ProductPage </span>component will be the container and we&#39;ll introduce a new component called <span class="s22">Product </span>that will be the presentational component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s start by opening our shop project in Visual Studio Code and entering the following command in a terminal to start the app:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">npm start</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. If we navigate to a product, let&#39;s remind ourselves what the product page looks like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;"><span><img width="450" height="220" alt="image" src="Image_301.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark524">3. Let&#39;s create a new file called </a><span class="s22">Product.tsx </span>that will contain our presentational component with the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const Product: React.SFC&lt;{}&gt; = props =&gt; { return &lt;React.Fragment&gt;TODO&lt;/React.Fragment&gt;;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default Product;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: center;">Our presentational component is a function component.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. Presentational components receive data via props and also delegate event handling via props. So, let&#39;s create props for the product data item, whether it has been added to the basket, and the handler for adding it to the basket:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p class="s21" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">import { IProduct } from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface IProps { product: IProduct; inBasket: boolean;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">onAddToBasket: () =&gt; void;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 110%;text-align: left;">const Product: React.SFC&lt;<span class="s21">IProps</span>&gt; = props =&gt; { return &lt;React.Fragment&gt;TODO&lt;/React.Fragment&gt;;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default Product;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">5. If we look at <span class="s22">ProductsPage.tsx</span>, we are going to copy the JSX for when there is a product that is the <span class="s22">React.Fragment </span>section. We then paste this into the return statement for our <span class="s22">Product </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const Product: React.SFC&lt;IProps&gt; = props =&gt; { return (</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;React.Fragment&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;{product.name}&lt;/h1&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{product.description}&lt;/p&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;p className=&quot;product-price&quot;&gt;</p><p class="s21" style="padding-left: 122pt;text-indent: -10pt;line-height: 106%;text-align: left;">{new Intl.NumberFormat(&quot;en-US&quot;, { currency: &quot;USD&quot;,</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;line-height: 10pt;text-align: left;">style: &quot;currency&quot;</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">}).format(product.price)}</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/p&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">{!this.state.added &amp;&amp; (</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 43pt;line-height: 106%;text-align: left;">&lt;button onClick={this.handleAddClick}&gt;Add to basket&lt;/button&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">)}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We have a few reference issues now to resolve.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Let&#39;s define a product variable above the return statement to resolve the issue with the product reference in the JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const product = props.product;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. Whether the product is in the basket is passed in via the <span class="s22">inBasket </span>prop now. So, let&#39;s change the conditional around the <b>Add to Basket </b>button to use this prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{!<span class="s21">props.inBasket </span>&amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;button onClick={this.handleAddClick}&gt;Add to basket&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">8. The final reference issue we need to resolve is with the handler for clicking the <b>Add to Basket </b>button. Let&#39;s first create a handler that simply calls the <span class="s22">onAddToBasket </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const product = props.product;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleAddClick = () =&gt; { props.onAddToBasket();</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">9. We can remove the <span class="s22">this </span>reference where we reference this handler in the JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{!props.inBasket &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;button onClick={<span class="s21">handleAddClick</span>}&gt;Add to basket&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">That&#39;s our <span class="s22">Product </span>presentational component complete for the time being. So, let&#39;s reference our <span class="s22">Product </span>component in our <span class="s22">ProductPage </span>component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a name="bookmark525">10. First, let&#39;s import our </a><span class="s22">Product </span>component into <span class="s22">ProductPage.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import Product from &quot;./Product&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">11. Now, let&#39;s replace the section we copied in the JSX with our <span class="s22">Product </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">&lt;Prompt when={!this.state.added} message={this.navAwayMessage}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">{product ? (</p><p class="s21" style="padding-top: 1pt;padding-left: 106pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;Product product={product}</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;line-height: 106%;text-align: left;">inBasket={this.state.added} onAddToBasket={this.handleAddClick}</p><p class="s21" style="padding-left: 95pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">) : (&lt;p&gt;Product not found!&lt;/p&gt;)}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We pass the product, whether the product has been added to basket, and the handler for adding to the basket together as props to the <span class="s22">Product </span>component.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the shop again and go to the product page, it will look exactly the same.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;">So, we just implemented our first container and presentational components. Container components are great as the top-level component within a page, fetching data from a web API, and managing all the state within the page. Presentational components just focus on what needs to be rendered to the screen. A benefit of this pattern is that presentational components can be used elsewhere in the app more easily. For example, our <span class="s22">Product </span>component could fairly easily be used on other pages that we create in our shop.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Another benefit of this pattern is that presentational components are generally easier to unit-test. In our example, our <span class="s22">Product </span>component is a pure function and so unit-testing this is simply a case of checking that the output is correct for different inputs because there are no side-effects. We&#39;ll cover unit testing in detail later in the book.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;ll continue to enhance our product page in the next section by adding reviews to it and adding tabs to separate the product description from the reviews.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part202.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part204.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
