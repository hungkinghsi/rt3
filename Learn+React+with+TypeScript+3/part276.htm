<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>async and await</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part275.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part277.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark765">async and await</a></h4><p class="s22" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">async <span class="p">and </span>await <span class="p">are two JavaScript keywords we can use to make asynchronous code read almost identically to synchronous code:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">1. Let&#39;s look at an example of consuming our <span class="s22">wait </span>function we created in the last section by entering the following code into the TypeScript playground, after the <span class="s22">wait </span>function declaration:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 110%;text-align: left;">const someWork = <span class="s21">async </span>() =&gt; { try {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 110%;text-align: left;">const result = <span class="s21">await </span>wait(500); console.log(result);</p><p class="s12" style="padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">} catch (ex) { console.log(ex);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">someWork();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_480.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We have created an arrow function called <span class="s22">someWork </span>that is marked as asynchronous with the <span class="s22">async </span>keyword.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_481.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We then call <span class="s22">wait </span>prefixed with the <span class="s22">await </span>keyword. This halts execution of the next line until <span class="s22">wait </span>has completed.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_482.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The <span class="s22">try / catch </span>will catch any errors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">So, the code is very similar to how you would write it in a synchronous manner.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark766">If we run this example, we get confirmation that the </a><span class="s22">console.log </span>statement in the <span class="s22">try </span>branch waited until the <span class="s22">wait </span>function had completely finished before executing:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><span><img width="439" height="50" alt="image" src="Image_483.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s change the wait to <span class="s22">1500 </span>milliseconds:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const result = await wait(<span class="s21">1500</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">If we run this, we see that an error is raised and caught:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="400" height="53" alt="image" src="Image_484.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">So, <span class="s22">async </span>and <span class="s22">await </span>make our code nice and easy to read. A bonus for using these in TypeScript is that the code can be transpiled to work in older browsers. So, for example, we can code with <span class="s22">async </span>and <span class="s22">await </span>and still support IE.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark724">Now that we have a good understanding of writing asynchronous code, we&#39;ll put this into practice when we interact with RESTful APIs in the following sections.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part275.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part277.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
