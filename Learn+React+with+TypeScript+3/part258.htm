<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Connecting ProductsPage to the loading store state</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part257.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part259.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark699">Connecting ProductsPage to the loading store state</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this section, we are going to add a loading spinner to the Products page. Before we can do this, we are going to extract the list of products out into its own component. We can then add the <span class="s22">withLoader </span>HOC to the extracted component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1. Let&#39;s create a new file for the extracted component called <span class="s22">ProductsList.tsx</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">with the following imports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { Link } from &quot;react-router-dom&quot;; import { IProduct } from &quot;./ProductsData&quot;; import withLoader from &quot;./withLoader&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. The component will take in props for the products array and the search string:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps { products?: IProduct[]; search: string;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. We&#39;ll call the component <span class="s22">ProductList </span>and it will be an SFC. Let&#39;s start to create the component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const ProductsList: React.SFC&lt;IProps&gt; = props =&gt; { const search = props.search;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">return ();</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. We can now move the <span class="s22">ul </span>tag from the <span class="s22">ProductsPage </span>component JSX into our return statement in our new <span class="s22">ProductList </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;product-list&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">{props.products &amp;&amp; props.products.map(product =&gt; {</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">if (</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;line-height: 120%;text-align: left;">!search || (search &amp;&amp;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">product.name.toLowerCase().indexOf(search.toLowerCase())</p><p class="s12" style="padding-top: 1pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">&gt; -1)</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">) {</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">&lt;li key={product.id} className=&quot;product-list-item&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 144pt;text-indent: 0pt;text-align: left;">&lt;Link to={`/products/${product.id}`}&gt;{product.name}</p><p class="s12" style="padding-top: 1pt;padding-left: 144pt;text-indent: 0pt;text-align: left;">&lt;/Link&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: -10pt;line-height: 120%;text-align: left;">} else { return null;</p><p class="s12" style="text-indent: 0pt;text-align: right;">}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">})}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Note that we remove references to <span class="s22">this </span>after moving the JSX.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">5. To finish off the <span class="s22">ProductList </span>component, let&#39;s export it wrapped with our</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">withLoader <span class="p">HOC:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default withLoader(ProductsList);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. Let&#39;s change the return statement in <span class="s22">ProductPage.tsx </span>to reference the extracted component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 32pt;line-height: 120%;text-align: left;">Welcome to React Shop where you can get all your tools for ReactJS!</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/p&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;ProductsList search={search}</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">products={this.props.products} loading={this.props.loading}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/&gt;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We mustn&#39;t forget to import the <span class="s22">ProductsList </span>component having referenced it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import ProductsList from &quot;./ProductsList&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">8. Finally, we can remove the imported <span class="s22">Link </span>component in <span class="s22">ProductsPage.tsx </span>as this is no longer referenced.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we go to the running app and browse to the <b>Products </b>page, we should now see a loading spinner while the products load:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 47pt;text-indent: 0pt;text-align: left;"><span><img width="458" height="228" alt="image" src="Image_436.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, our <b>Products </b>page is nicely wired up to our Redux store now. In the next section, we&#39;ll wire up the <b>Product </b>page to the store.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part257.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part259.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
