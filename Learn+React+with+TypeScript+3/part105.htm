<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Type checking with a type predicate</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part104.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part106.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark230">Type checking with a type predicate</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">One way we can perform type checking in a function is with another function that has a return type as a type predicate. Let&#39;s explore this and eventually create a new version of our <span class="s22">logScores </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, we&#39;ll define a new function called <span class="s22">scoresCheck </span>to do the necessary type checking:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const scoresCheck = ( scores: any</p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">): scores is { name: string; scores: number[] } =&gt; { return &quot;name&quot; in scores &amp;&amp; &quot;scores&quot; in scores;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This takes in a <span class="s22">scores </span>parameter that has a type predicate, <span class="s22">scores is { name: string; scores: number[] }</span>, ensuring it contains the correctly typed <span class="s22">name </span>and <span class="s22">scores </span>properties. The function simply returns whether</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">the <span class="s22">scores </span>parameter contains the <span class="s22">name </span>and <span class="s22">scores </span>properties.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s use this function in our <span class="s22">logScores </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScores(scores: unknown) { if (scoresCheck(scores)) {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">console.log(scores.firstName); console.log(scores.scores);</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">We immediately get the compilation error we want:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="221" alt="image" src="Image_126.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The type predicate, <span class="s22">scores is { name: string, scores: number[] }</span>, allows the TypeScript compiler to narrow down the type in the <span class="s22">if </span>block that logs the properties to the console. This results in <span class="s22">scores.scores </span>compiling fine, but <span class="s22">scores.firstName </span>is giving an error, which is just what we want.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">The type predicate is the key bit. Without it, the TypeScript compiler will still throw errors on the valid <span class="s22">scores.scores </span>reference. Try removing the type predicate and see for yourself.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Note that we can make the predicate a little more readable with a type alias:</p><p class="s21" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">type Scores = { name: string; scores: number[] }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">const scoresCheck = ( scores: any</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">): scores is <span class="s21">Scores </span>=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">return &quot;name&quot; in scores &amp;&amp; &quot;scores&quot; in scores;</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark196">Using a type predicate in this way is called a type guard. There are other ways of implementing type guards, which we&#39;ll cover later in the book.</a><a name="bookmark231">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part104.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part106.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
