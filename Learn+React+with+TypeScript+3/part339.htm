<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a basic component test</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part338.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part340.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark929">Creating a basic component test</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We are going to start by creating a unit test to verify that submitting the <b>Contact Us </b>form without filling in the fields results in errors being displayed on the page:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We are going to implement a unit test on the <span class="s22">ContactUs </span>component. We&#39;ll start by creating a file called <span class="s22">ContactUs.test.tsx </span>in the <span class="s22">src </span>folder.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. We are going to use <span class="s22">ReactDOM </span>to render a test instance of the <span class="s22">ContactUs</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component. Let&#39;s import <span class="s22">React </span>and <span class="s22">ReactDOM</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import React from &quot;react&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import ReactDOM from &quot;react-dom&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">3. We are going to simulate the form submit event, so let&#39;s import the <span class="s22">Simulate</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">function from the React testing utilities:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import { Simulate } from &quot;react-dom/test-utils&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s now import the component we need to test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import ContactUs from &quot;./ContactUs&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. We also need to import the submission result interface from <span class="s22">Form.tsx </span>as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import { ISubmitResult } from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. Let&#39;s start to create our test using the Jest <span class="s22">test </span>function, with the results outputting to a <span class="s22">ContactUs </span>group:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">describe(&quot;ContactUs&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">// TODO - implement the test</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">7. The first task in our test implementation is to create our React component in the DOM:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; {</p><p class="s21" style="padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">success: true</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">const container = document.createElement(&quot;div&quot;); ReactDOM.render(&lt;ContactUs onSubmit={handleSubmit} /&gt;,</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">container);</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 22pt;text-align: left;">// TODO - submit the form and check errors are shown ReactDOM.unmountComponentAtNode(container);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">First, we create a container <span class="s22">div </span>tag and then render our <span class="s22">ContactUs </span>component into this. We have also created a handler for the <span class="s22">onSubmit </span>prop, which returns success. The last line in the test cleans up by removing the DOM elements that were created in the test.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Next, we need to get a reference to the form, and then submit it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">ReactDOM.render(&lt;ContactUs onSubmit={handleSubmit} /&gt;, container);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 106%;text-align: left;">const form = container.querySelector(&quot;form&quot;); expect(form).not.toBeNull(); Simulate.submit(form!);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 240%;text-align: left;">// TODO - check errors are shown ReactDOM.unmountComponentAtNode(container);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark930">Here is the step-by-step description:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_577.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use the <span class="s22">querySelector </span>function, passing in the <span class="s22">form </span>tag to get a reference to the <span class="s22">form </span>tag.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_578.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We then check that the form is not <span class="s22">null </span>by using the Jest <span class="s22">expect </span>function with the <span class="s22">not </span>and <span class="s22">toBeNull </span>functions chained together.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_579.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">submit </span>event is simulated using the <span class="s22">Simulate </span>function from the React testing utilities. We use an <span class="s22">! </span>after the <span class="s22">form </span>variable to inform the TypeScript compiler that it is not <span class="s22">null</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">9. Our final task is to check that the validation errors are displayed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Simulate.submit(form!);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">const errorSpans = container.querySelectorAll(&quot;.form-error&quot;); expect(errorSpans.length).toBe(2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">ReactDOM.unmountComponentAtNode(container);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Let&#39;s see this step-by-step:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_580.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_581.png"/></span></p><p style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We use the <span class="s22">querySelectorAll </span>function on the container DOM node, passing in a CSS selector to find the <span class="s22">span </span>tags that should contain the errors We then use the Jest <span class="s22">expect </span>function to verify that two errors are displayed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">10. When the test runs, it should pass successfully, giving us two passing tests:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="276" height="138" alt="image" src="Image_582.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="292" height="151" alt="image" src="Image_583.png"/></span></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: justify;">In this test, Jest is rendering the component in a fake DOM. The form <span class="s22">submit </span>event is also simulated, using the <span class="s22">simulate </span>function from standard React testing utilities. So, there&#39;s a lot of mocking going on in order to facilitate an interactive component test.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;"><a name="bookmark931">Also note that we are referencing internal implementation details in our test code. We reference a </a><span class="s22">form </span>tag, along with a <span class="s22">form-error </span>CSS class. What if we later change this CSS class name to <span class="s22">contactus-form-error</span>? Our test would break, without there necessarily being a problem with our app.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark903">This is called a </a><b>false positive</b>, and can make code bases with these kinds of tests very time- consuming to change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part338.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part340.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
