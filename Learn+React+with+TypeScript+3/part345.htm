<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Jest snapshot tests</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part344.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part346.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark940">Using Jest snapshot tests</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">A snapshot test is one where Jest compares all the elements and attributes in a rendered component to a previous snapshot of the rendered component. If there are no differences, then the test passes.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We are going to add a test to verify the <span class="s22">ContactUs </span>component renders OK, by checking the DOM nodes using a Jest snapshot test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We&#39;ll create a test with the title <span class="s22">Renders okay </span>in the <span class="s22">ContactUs </span>group of tests, rendering the component in the same way as previously:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">describe(&quot;ContactUs&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">test(&quot;Renders okay&quot;, () =&gt; {</p><p class="s21" style="padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;line-height: 10pt;text-align: left;">success: true</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-left: 91pt;text-indent: 21pt;line-height: 106%;text-align: left;">const { container } = render(&lt;ContactUs onSubmit={handleSubmit} /&gt;);</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">// TODO - do the snapshot test</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We can now add the line to carry out the snapshot test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">test(&quot;Renders okay&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; { return {</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">success: true</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">const { container } = render(&lt;ContactUs onSubmit={handleSubmit} /&gt;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">expect(container).toMatchSnapshot();</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">Doing a snapshot test is pretty simple. We pass the DOM node we want to compare into Jest&#39;s <span class="s22">expect </span>function, and then chain the <span class="s22">toMatchSnapshot </span>function after it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="273" height="159" alt="image" src="Image_588.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="285" height="175" alt="image" src="Image_589.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">When the test runs, we&#39;ll get confirmation that the snapshot has been written in the terminal, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. If we look at our <span class="s22">src </span>folder, we&#39;ll see it now contains a<u> </u><span class="s22">snapshots</span><span class="s30"> </span>folder. If we look in this folder, we&#39;ll see a file called <span class="s22">ContactUs.test.tsx.snap</span>. Opening the file, we&#39;ll see the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">// Jest Snapshot v1, https://goo.gl/fbAQLP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">exports[`ContactUs Renders okay 1`] = `</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;form</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">class=&quot;form&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">novalidate=&quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">class=&quot;form-group&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;label</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">for=&quot;name&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">Your name</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;line-height: 120%;text-align: left;">id=&quot;name&quot; type=&quot;text&quot; value=&quot;&quot;</p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/form&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">`;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: justify;">Some of the content is stripped out in this snippet, but we get the gist: we have a copy of every DOM node including their attributes from the <span class="s22">container </span>element we passed into the <span class="s22">toMatchSnapshot </span>function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This test is heavily coupled to our implementation, though. So, any change to our DOM structure or attributes will break our test.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. As an example, let&#39;s add a <span class="s22">div </span>tag inside our <span class="s22">Form </span>component in <span class="s22">Form.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;form ...&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div&gt;<span class="s12">{this.props.children}</span>&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark941">When the test runs, we&#39;ll see confirmation that our test has broken. Jest does a great job of showing us the difference in the terminal:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;"><span><img width="386" height="323" alt="image" src="Image_590.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. We are happy that this is a valid change, so we can press <i>U </i>to let Jest update the snapshot:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 116pt;text-indent: 0pt;text-align: left;"><span><img width="274" height="139" alt="image" src="Image_591.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark942">So, are snapshot tests a good thing or a bad thing? They are volatile because they are tightly coupled to the implementation of a component. However they are super-easy to create, and when they do break, Jest does a great job of highlighting the problem area and allowing us to efficiently correct the test snapshot. They are well worth a try to see if your team gains value from them.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark909">We have learned a lot already in this chapter about unit testing React and TypeScript apps. Next up, we&#39;ll learn how we can mock dependencies.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part344.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part346.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
