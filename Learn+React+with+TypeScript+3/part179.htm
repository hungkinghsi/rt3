<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part178.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part180.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark438">Summary</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">React Router gives us a comprehensive set of components for managing the navigation between pages in our app. We learned that the top-level component is <span class="s22">Router</span>, which looks for <span class="s22">Route </span>components beneath it where we define what components should be rendered for certain paths.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Link </span>component allows us to link to different pages with an app. We learned that the <span class="s22">NavLink </span>component is like <span class="s22">Link</span>, but it includes the ability to style it depending on whether it is the active path or not. So, <span class="s22">NavLink </span>is perfect for the main navigation element in an app and <span class="s22">Link </span>is great for other links that appear on pages.</p><p class="s22" style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">RouteComponentProps <span class="p">is a type that gives us access to route parameters and query parameters. We discovered that React Router doesn&#39;t parse query parameters for us, but can use the native JavaScript </span>URLSearchParams <span class="p">interface to do this for us.</span></p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Redirect </span>component redirects to a path under certain conditions. We found that this is perfect for protecting pages that only privileged users can access.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">Prompt </span>component allows us to ask the user to confirm they want to leave a page under a certain condition. We used this on the <b>Product </b>page to double-check whether users wanted to buy the product. Another common use case for this component is confirming navigation away from a data entry page when the inputted data hasn&#39;t been saved.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We learnt about how nested routes can provide users with deep links into very specific parts of our app. We simply define the relevant links using <span class="s22">Link </span>or <span class="s22">NavLink </span>and <span class="s22">Route </span>components to handle those links.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We improved our app experience with page transitions using the <span class="s22">TransitionGroup </span>and <span class="s22">CSSTransition </span>components from the <span class="s22">react-transition-group npm </span>package. We wrapped these components around our <span class="s22">Route </span>components that define the app paths and added CSS classes to do the animation we want when pages exit and enter into view.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark398">We learnt that the React </a><span class="s22">lazy </span>function along with its <span class="s22">Suspense </span>component can be used on large components that are rarely used by users to load them on demand. This helps performance for the startup time of our app.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part178.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part180.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
