<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Type annotations</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part42.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part44.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark16">Type annotations</a><a name="bookmark83">&zwnj;</a><a name="bookmark84">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Types for JavaScript variables are determined at runtime. Types for JavaScript variables can also change at runtime. For example, a variable that holds a number can later be replaced by a string. Usually, this is unwanted behavior and can result in a bug in our app.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">TypeScript annotations let us declare variables with specific types when we are writing our code. This allows the TypeScript compiler to check that the code adheres to these types before the code executes at runtime. In short, type annotations allow TypeScript to catch bugs where our code is using the wrong type much earlier than we would if we were writing our code in JavaScript.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">TypeScript annotations let us declare variables with types using the <span class="s22">:Type </span>syntax.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s browse to the TypeScript playground and enter the following variable declaration into the left-hand pane:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">let unitPrice: number;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. The transpiled JavaScript will appear on the right-hand side as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="69" alt="image" src="Image_052.png"/></span></p><p style="padding-left: 45pt;text-indent: 0pt;line-height: 92%;text-align: justify;">That <span class="s22">let </span>has been converted to <span class="s22">var</span>. This is because the compiler that the playground uses is set to target a wide range of browsers, some of which don&#39;t support <span class="s22">let</span>. Also, notice that the type annotation has disappeared. This is because type annotations don&#39;t exist in JavaScript.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">var unitPrice;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s add a second line to our program:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">unitPrice = &quot;Table&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that a red line appears under <span class="s22">unitPrice</span>, and if you hover over it, you are correctly informed that there is a type error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="74" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;"><a name="bookmark85">4. You can also add type annotations to function parameters for the return value using the same </a><span class="s22">:Type </span>syntax. Let&#39;s enter the following function into the playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">function getTotal(unitPrice: number, quantity: number, discount: number): number {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = unitPrice * quantity; const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="89" alt="image" src="Image_054.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We have used both <span class="s22">const </span>and <span class="s22">let </span>to declare variables in different examples. <span class="s22">let </span>will allow the variable to change the value after the declaration, whereas <span class="s22">const </span>variables can&#39;t change. In the preceding function, <span class="s22">priceWithoutDiscount </span>and <span class="s22">discountAmount </span>never change the value after the initial assignment, so we have used <span class="s22">const</span>.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ve declared <span class="s22">unitPrice</span>, <span class="s22">quantity</span>, and <span class="s22">discount </span>parameters, all as numbers. The <span class="s22">return </span>type annotation comes after the function&#39;s parentheses, which is also a number in the preceding example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Let&#39;s call our function with an incorrect type for <span class="s22">quantity </span>and assign the result to a variable with an incorrect type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 27pt;text-indent: 0pt;text-align: center;">let total: string = getTotal(500, &quot;one&quot;, 0.1);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We find that <span class="s22">one </span>is underlined in red, highlighting that there is a type error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="124" alt="image" src="Image_055.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark86">6. If we then correct </a><span class="s22">one </span>to <span class="s22">1</span>, <span class="s22">total </span>should be underlined in red, highlighting that there is a type problem with that:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;"><span><img width="533" height="115" alt="image" src="Image_056.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The TypeScript compiler uses type annotations to check whether values assigned to variables and function parameters are valid for their type.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark17">This strong type checking is something that we don&#39;t get in JavaScript, and it is very useful in large code bases because it helps us immediately detect type errors.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part42.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part44.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
