<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding structure to unit test results</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part336.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part338.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark926">Adding structure to unit test results</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">As we implement more unit tests, it is useful to add some structure to the unit test results so that we can read them more easily. There is a Jest function called <span class="s22">describe </span>that we can use to group the results of certain tests together. It may make reading test results easier if all the tests for a function are grouped together.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Let&#39;s do this and refactor the unit test we created earlier, using the <span class="s22">describe </span>function in Jest:</p><p class="s21" style="padding-top: 8pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">describe(&quot;required&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 10pt;line-height: 120%;text-align: left;">test(&quot;When required called with title being an empty string, an error should be &#39;This must be populated&#39;&quot;, () =&gt; {</p><p class="s12" style="padding-left: 56pt;text-indent: -10pt;line-height: 120%;text-align: left;">const values: IValues = { title: &quot;&quot;</p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;line-height: 120%;text-align: left;">const result = required(&quot;title&quot;, values); expect(result).toBe(&quot;This must be populated&quot;);</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">});</p><p class="s21" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">The describe function takes in two parameters:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_574.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">The first parameter is the title for the group of tests. We have used the function name we are testing for this.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_575.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">The second parameter is an arrow function that contains the tests to execute. We have placed our original test here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">When we save our test file, the tests will automatically run, and our improved output is shown in the terminal with our test result under a <span class="s22">required </span>heading:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="146" alt="image" src="Image_576.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;re starting to get familiar with Jest, having implemented and executed a unit test. In the next section, we will move on to the more complex topic of unit testing components.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part336.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part338.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
