<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Unit Testing with Jest</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part331.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part333.htm">Next &gt;</a></p><p class="s8" style="padding-top: 4pt;padding-left: 147pt;text-indent: 0pt;text-align: left;"><a name="bookmark895">Unit Testing with Jest</a><a name="bookmark916">&zwnj;</a><a name="bookmark917">&zwnj;</a></p><p style="padding-top: 23pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Building a robust suite of unit tests that catches real bugs and doesn&#39;t flag false positives as we refactor our code is one of the hardest tasks we do as software developers. Jest is a great testing tool that helps us meet this challenge, as we&#39;ll find out in this chapter.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a href="part220.htm#bookmark587" class="s20">Perhaps the easiest bits of an app to unit test are pure functions, because there are no side effects to deal with. We&#39;ll revisit the validator functions we built in </a><span class="s12">Chapter 7</span>, <i>Working with Form</i>, and implement some unit tests against them in order to learn how to unit test pure functions.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Unit testing components is the most common type of unit test we&#39;ll be carrying out while building our apps. We&#39;ll learn about it in detail, and leverage a library to help us implement tests that don&#39;t unnecessarily break when we refactor our code.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;ll learn what snapshot testing is, and how we can leverage it to implement our tests quicker. Snapshots can be used for testing pure functions as well as components, so they are a very useful tool to have at our disposal.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a href="part267.htm#bookmark752" class="s20">Mocking is a challenging topic because if we mock too much, we aren&#39;t really testing our app. However, there are certain dependencies that make sense to mock, such as a REST API. We&#39;ll revisit the app we built in </a><span class="s12">Chapter 9</span>, <i>Interacting with Restful APIs</i>, in order to implement some unit tests against it and learn about mocking.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">When implementing a suite of unit tests for our app, it is useful to know which bits we&#39;ve tested and which bits we haven&#39;t. We&#39;ll learn how to use a code coverage tool to help us quickly identify areas of our app that need more unit tests.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_551.png"/></span></p><p style="padding-left: 53pt;text-indent: -48pt;line-height: 22pt;text-align: left;">The following topics will be covered in this chapter: Testing pure functions</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_552.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_553.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_554.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_555.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Testing components Using Jest snapshot tests Mocking dependencies Getting code coverage</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part333.htm">Technical requirements</a><a class="toc0" href="part334.htm">Testing pure functions</a><a class="toc1" href="part335.htm">Creating a basic pure function test</a><a class="toc1" href="part336.htm">Understanding Jest watch options</a><a class="toc1" href="part337.htm">Adding structure to unit test results</a><a class="toc0" href="part338.htm">Testing components</a><a class="toc1" href="part339.htm">Creating a basic component test</a><a class="toc1" href="part340.htm">Improving our tests with react-testing-library</a><a class="toc2" href="part341.htm">Installing react-testing-library</a><a class="toc2" href="part342.htm">Removing CSS class references from our tests</a><a class="toc2" href="part343.htm">Using fireEvent for user interaction</a><a class="toc2" href="part344.htm">Creating a second test for a valid form submission</a><a class="toc0" href="part345.htm">Using Jest snapshot tests</a><a class="toc0" href="part346.htm">Mocking dependencies</a><a class="toc1" href="part347.htm">Using a mock function in Jest</a><a class="toc1" href="part348.htm">Mocking Axios with axios-mock-adapter</a><a class="toc0" href="part349.htm">Getting code coverage</a><a class="toc0" href="part350.htm">Summary</a><a class="toc0" href="part351.htm">Questions</a><a class="toc0" href="part352.htm">Further reading</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part331.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part333.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
