<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Type aliases</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part57.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part59.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark31">Type aliases</a><a name="bookmark119">&zwnj;</a><a name="bookmark120">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In simple terms, a type alias creates a new name for a type. To define a type alias, we use the <span class="s22">type </span>keyword, followed by the alias name, followed by the type that we want to alias.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We&#39;ll explore this with the following example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s create a type alias for the <span class="s22">getTotal </span>method in the <span class="s22">OrderDetail </span>interface we have been working with. Let&#39;s try this in the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">type GetTotal = (discount: number) =&gt; number;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 119%;text-align: left;">interface OrderDetail { product: Product; quantity: number; getTotal: <span class="s21">GetTotal</span>;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Nothing changes with objects that implement this interface <span class="s23">â€“ </span>it is purely a way we can structure our code. It arguably makes the code a little more readable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">2. Type aliases can also define the shape of an object. We could use a type alias for our <span class="s22">Product </span>and <span class="s22">OrderDetail </span>types that we previously defined with an interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">type Product = { name: string; unitPrice: number;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">type OrderDetail = { product: Product; quantity: number;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal: (discount: number) =&gt; number;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We use these types in exactly the same way as we used our interface-based types:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const table: Product = { name: &quot;Table&quot;, unitPrice: 500</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const orderDetail: OrderDetail = { product: table,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">quantity: 1,</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;"><a name="bookmark121">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</a></p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark32">So, type aliases seem very similar to interfaces. What is the difference between a type alias and an interface? The main difference is that type aliases can&#39;t be extended or implemented from like you can with interfaces. So, for a simple structure that doesn&#39;t require inheritance, should we use an interface or should we use a type alias? There isn&#39;t strong reasoning to prefer either approach. However, we should be consistent with whichever approach we choose to improve the readability of our code.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part57.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part59.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
