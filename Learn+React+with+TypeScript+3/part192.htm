<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using a user-defined type guard</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part191.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part193.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark480">Using a user-defined type guard</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">In situations where we can&#39;t use the other type guards, we can create our own. We can do this by creating a function with the return type as type predicate. We actually used a user- defined type guard earlier in the book when we went through the <span class="s22">unknown </span>type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark481">Let&#39;s implement the example from the last two sections using our own type guard function:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have the same interfaces and union type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number; firstName: string; surname: string;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ICompany { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type PersonOrCompany = IPerson | ICompany;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. So, let&#39;s implement the type guard function that returns whether the object is of type <span class="s22">IPerson</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">function isPerson(personOrCompany: PersonOrCompany): personOrCompany is IPerson {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">return &quot;firstName&quot; in personOrCompany;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The type predicate <span class="s22">personOrCompany </span>is <span class="s22">IPerson </span>helps the TypeScript compiler narrow down the type. To confirm this, hovering over <span class="s22">personOrCompany </span>in the first branch should give the <span class="s22">IPerson </span>type.  If we then hover</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">over <span class="s22">personOrCompany </span>in the second branch, we should get the <span class="s22">ICompany </span>type.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark452">Creating a user-defined type guard is a little more work than the other methods, but it gives us lots of flexibility to deal with cases if the other methods don&#39;t work.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part191.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part193.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
