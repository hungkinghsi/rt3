<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>String literal union types</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part185.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part187.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark467">String literal union types</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 152%;text-align: left;">A string literal union type is where we combine multiple string literal types together. Let&#39;s continue from the previous example and go through this.</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s enhance our <span class="s22">Control </span>type to be a union of string literals:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">type Control = &quot;Textbox&quot; | &quot;DropDown&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We combine types in a union type using <span class="s22">|</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark468">2. Setting our </a><span class="s22">notes </span>variable to either <span class="s22">&quot;Textbox&quot; </span>or <span class="s22">&quot;DropDown&quot; </span>is now perfectly valid:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">let notes: Control; notes = &quot;Textbox&quot;; notes = &quot;DropDown&quot;;</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s extend our <span class="s22">Control </span>type to include more string literals:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">type Control = &quot;Textbox&quot; | &quot;DropDown&quot; | &quot;DatePicker&quot; | &quot;NumberSlider&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. We can now set our <span class="s22">notes </span>variable to any of these values:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">notes = &quot;DatePicker&quot;; notes = &quot;NumberSlider&quot;;</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">If we think about it, this is really useful. We could have declared the <span class="s22">notes </span>variable as</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark446">a </a><span class="s22">string</span>, but declaring it with the specific string literals it can contain makes it super type- safe.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part185.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part187.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
