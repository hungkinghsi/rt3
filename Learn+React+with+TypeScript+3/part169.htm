<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Route parameters</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part168.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part170.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark387">Route parameters</a><a name="bookmark415">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">A Route parameter is a variable part of the path that can used in the destination component to conditionally render something.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We need to add another page to our shop to show the description and price of each product, along with an option to add it to the basket. We want to be able to navigate to this page using the <span class="s22">&quot;/products/{id}&quot; </span>path, where <span class="s22">id </span>is the ID of the product. For example, the path to React Redux would be <span class="s22">&quot;products/2&quot;</span>. So, the <span class="s22">id </span>part of the path is a route parameter. We can do all this by following these steps:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">1. Let&#39;s add this route to <span class="s22">Routes.tsx </span>in between the two existing routes. The <span class="s22">id </span>part of the route is going to be a route parameter, which we define with a colon in front of it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/products&quot; component={ProductsPage} /&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/products/:id&quot; component={ProductPage} /&gt;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/admin&quot; component={AdminPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Of course, the <span class="s22">ProductPage </span>component doesn&#39;t exist yet, so, let&#39;s create that by first creating a new file called <span class="s22">ProductPage.tsx </span>with the following imports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { RouteComponentProps } from &quot;react-router-dom&quot;; import { IProduct, products } from &quot;./ProductsData&quot;;</p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. The key part here is that we are going to use the <span class="s22">RouteComponentProps </span>type to access the <span class="s22">id </span>parameter in the path. Let&#39;s define the props type alias for our <span class="s22">ProductPage </span>component using the <span class="s22">RouteComponentProps </span>generic type and passing in a type with an <span class="s22">id </span>property:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_231.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 93%;text-align: left;">Don&#39;t worry if you don&#39;t understand the angle brackets in the <span class="s22">type </span><a href="part182.htm#bookmark461" class="s20">expression. This denotes a generic type, which we will explore in </a><a href="part182.htm#bookmark461" class="a">Chapter </a><span class="s12">5</span>, <i>Advanced Types</i>.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">type Props = RouteComponentProps&lt;{id: string}&gt;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Ideally, we&#39;d have specified the <span class="s22">id </span>property as a number to match the type in the product data. However, <span class="s22">RouteComponentProps </span>only allows us to have Route parameters of type string or undefined.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. The <span class="s22">ProductPage </span>component is going to have state to hold the product that is being rendered and whether it has been added to the basket, so let&#39;s define an interface for our state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IState { product?: IProduct; added: boolean;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. The product is initially going to be <span class="s22">undefined</span>, which is why it is defined as optional. Let&#39;s create our <span class="s22">ProductPage </span>class and initialize the state so that the product is not in the basket:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">class ProductPage extends React.Component&lt;Props, IState&gt; { public constructor(props: Props) {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">super(props); this.state = {</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">added: false</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">export default ProductPage;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. When the component is loaded into the DOM, we need to find our product from the product data with the <span class="s22">id </span>property from the <span class="s22">Route</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">parameter. <span class="s22">RouteComponentProps </span>gives us a <span class="s22">match </span>object, containing a</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">params <span class="p">object, containing our </span>id <span class="p">route parameter. So, let&#39;s implement this:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">if (this.props.match.params.id) {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">const id: number = parseInt(this.props.match.params.id,</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">10);</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">const product = products.filter(p =&gt; p.id === id)[0];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">this.setState({ product });</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Remember that the <span class="s22">id </span>route parameter is a string, which is why we cast it to a number using <span class="s22">parseInt </span>before comparing it with the product data in</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">the <span class="s22">filter </span>array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">7. Now that we have our product in our component state, let&#39;s move on to the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">render <span class="p">function:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">const product = this.state.product; return (</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">{product ? (</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">&lt;React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;{product.name}&lt;/h1&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{product.description}&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;p className=&quot;product-price&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 166pt;text-indent: -10pt;line-height: 120%;text-align: left;">{new Intl.NumberFormat(&quot;en-US&quot;, { currency: &quot;USD&quot;,</p><p class="s12" style="padding-left: 166pt;text-indent: 0pt;text-align: left;">style: &quot;currency&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 155pt;text-indent: 0pt;text-align: left;">}).format(product.price)}</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">{!this.state.added &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 166pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;button onClick={this.handleAddClick}&gt;Add to basket&lt;/button&gt;</p><p class="s12" style="padding-left: 31pt;text-indent: 0pt;text-align: center;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">) : (</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: center;">&lt;p&gt;Product not found!&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">);</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">There are a few interesting bits in this JSX:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_232.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">On the first line inside the function, we set a <span class="s22">product </span>variable to the product state to save a few keystrokes because we reference the product a lot in the JSX.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_233.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The ternary inside <span class="s22">div </span>renders the product if there is one. Otherwise, it informs the user that the product cannot be found.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_234.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use <span class="s22">React.Fragment </span>in the true part of the ternary because each part of a ternary can only have a single parent and <span class="s22">React.Fragment </span>is a mechanism for achieving this, without rendering something like a <span class="s22">div </span>tag that is not really needed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_235.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark416">We use </a><span class="s22">Intl.NumberFormat </span>to format the product price as currency with a currency symbol.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">8. We are also calling the <span class="s22">handleAddClick </span>method when the <b>Add to basket </b>button is clicked. We haven&#39;t implemented this yet, so, let&#39;s do that now and set the <span class="s22">added </span>state to <span class="s22">true</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleAddClick = () =&gt; { this.setState({ added: true });</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">9. Now that we&#39;ve implemented the <span class="s22">ProductPage </span>component, let&#39;s go back to</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Routes.tsx <span class="p">and import it:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import ProductPage from &quot;./ProductPage&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;">10. Let&#39;s go to our running app and type in <span class="s22">&quot;/products/2&quot; </span>as the path:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 84pt;text-indent: 0pt;text-align: left;"><span><img width="353" height="326" alt="image" src="Image_236.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_237.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Not quite what we want! Both <span class="s22">ProductsPage </span>and <span class="s22">ProductPage </span>have rendered because <span class="s22">&quot;/products/2&quot; </span>matches both <span class="s22">&quot;/products&quot; </span>and <span class="s22">&quot;/products/:id&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">11. To resolve this, we can tell the <span class="s22">&quot;/products&quot; </span>route to only render when there is an exact match:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Route <span class="s21">exact={true} </span>path=&quot;/products&quot; component={ProductsPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">12. After we make this change and save <span class="s22">Routes.tsx</span>, our product page looks much better:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 104pt;text-indent: 0pt;text-align: left;"><span><img width="306" height="262" alt="image" src="Image_238.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 92%;text-align: left;">13. We aren&#39;t going to make our users type in the specific paths to visit the products! So, we are going to change <span class="s22">ProductsPage </span>to link to <span class="s22">ProductPage </span>for each product using the <span class="s22">Link </span>component. First, let&#39;s import <span class="s22">Link </span>into <span class="s22">ProductsPage </span>from React Router:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import { Link } from &quot;react-router-dom&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;">14. Now, instead of rendering the product name in each list item, we are going to render a <span class="s22">Link </span>component that goes to our product page:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;"><a name="bookmark417">&lt;p&gt;</a></p><p class="s12" style="padding-top: 1pt;padding-left: 139pt;text-indent: -5pt;line-height: 120%;text-align: left;">Welcome to React Shop where you can get all your tools for ReactJS!</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;product-list&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">{this.state.products.map(product =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;li key={product.id} className=&quot;product-list-item&quot;&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 155pt;text-indent: 0pt;text-align: left;">&lt;Link to={`/products/${product.id}`}&gt;{product.name}</p><p class="s21" style="padding-left: 155pt;text-indent: 0pt;text-align: left;">&lt;/Link&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">))}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;line-height: 13pt;text-align: left;">15. Before we take a look a the running app, let&#39;s add the following CSS class in our</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">index.css<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.product-list-item a { text-decoration: none;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark388">Now, if we go to the products list in our app and click on a list item, it takes us to the relevant product page.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part168.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part170.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
