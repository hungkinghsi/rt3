<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Lazy loading routes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part177.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part179.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark396">Lazy loading routes</a><a name="bookmark435">&zwnj;</a><a name="bookmark436">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">At the moment, all the JavaScript for our app is loaded when the app first loads. This includes the <b>Admin </b>page that users don&#39;t use that often. It would be great if the <span class="s22">AdminPage </span>component wasn&#39;t loaded when the app loads and instead loaded on demand. This is exactly what we are going to do in this section. This is called &quot;lazy loading&quot; components.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">The following steps allows us to load things on demand:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, we are going to import the <span class="s22">Suspense </span>component from React, which we are going to use a little later:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { Suspense } from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Now, we are going to import the <span class="s22">AdminPage </span>component differently:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">const AdminPage = React.lazy(() =&gt; import(&quot;./AdminPage&quot;));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use a React function called <span class="s22">lazy </span>which takes in a function that returns a dynamic import, which in turn is assigned to our <span class="s22">AdminPage </span>component variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. After we have done this, we may get a linting error: <b>A dynamic import call in ES5/ES3 requires the &#39;Promise&#39; constructor. Make sure you have a declaration for the &#39;Promise&#39; constructor or include &#39;ES2015&#39; in your `--lib` option</b>. So, in <span class="s22">tsconfig.json</span>, let&#39;s add the <span class="s22">lib </span>compiler option:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&quot;compilerOptions&quot;: {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&quot;lib&quot;: [&quot;es6&quot;, &quot;dom&quot;],</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">4. The next part is to wrap the <span class="s22">Suspense </span>component around the <span class="s22">AdminPage</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/admin&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">{loggedIn ? (</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 21pt;line-height: 106%;text-align: left;">&lt;Suspense fallback={&lt;div className=&quot;page- container&quot;&gt;Loading...&lt;/div&gt;}&gt;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;AdminPage /&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/Suspense&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">) : (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;Redirect to=&quot;/login&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Route&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The <span class="s22">Suspense </span>component shows a <span class="s22">div </span>tag containing</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><b>Loading... </b>whilst <span class="s22">AdminPage </span>is being loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 90%;text-align: left;">5. Let&#39;s try this in the running app. Let&#39;s open the browser developer tools and go to the <b>Network </b>tab. In our app, let&#39;s go to the <b>Products </b>page and refresh the browser. Let&#39;s then clear the content in the <b>Network </b>tab in the developer tools. If we then go to the <b>Admin </b>page in our app and look at the content in the <b>Network </b>tab, we&#39;ll see the <i>chunk </i>of JavaScript for the <span class="s22">AdminPage </span>component dynamically loaded:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="208" alt="image" src="Image_257.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">6. The <span class="s22">AdminPage </span>component loads really fast, so we never really see the <b>Loading</b></p><p class="s9" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">... <span class="s22">div </span><span class="p">tag. So, let&#39;s slow the connection down in the browser developer tools:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="566" height="113" alt="image" src="Image_258.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark437">7. If we then refresh the browser, and go to the </a><b>Admin </b>page again, we&#39;ll see</p><p class="s9" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Loading ...<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><span><img width="418" height="214" alt="image" src="Image_259.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark397">In this example, the </a><span class="s22">AdminPage </span>component isn&#39;t that big so this approach doesn&#39;t really positively impact performance. However, loading larger components on demand can really help performance, particularly on slow connections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part177.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part179.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
