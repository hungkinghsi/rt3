<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding product state and actions to the store</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part258.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part260.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark664">Adding product state and actions to the store</a><a name="bookmark700">&zwnj;</a><a name="bookmark701">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Connecting the <span class="s22">ProductPage </span>component to our store is first going to require a little work in our store. We need additional state for the current product, as well as whether it has been added to the basket. We also need additional actions and reducer code to get a product and add it to the basket:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, let&#39;s add additional state for the current product in <span class="s22">ProductsTypes.ts</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">export interface IProductsState {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">readonly currentProduct: IProduct | null;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. While we are in <span class="s22">ProductTypes.ts</span>, let&#39;s add the action type for getting a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 114%;text-align: left;">export enum ProductsActionTypes { GETALL = &quot;PRODUCTS/GETALL&quot;, <span class="s21">GETSINGLE = &quot;PRODUCTS/GETSINGLE&quot;, </span>LOADING = &quot;PRODUCTS/LOADING&quot;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s also add the action type for getting a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export interface IProductsGetSingleAction { type: ProductsActionTypes.GETSINGLE; product: IProduct;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. We can then add this action type to our union actions type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export type ProductsActions = IProductsGetAllAction |</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">IProductsGetSingleAction <span class="s12">| IProductsLoadingAction;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Let&#39;s move on to creating the new action creator in <span class="s22">ProductsActions.ts</span>. First, let&#39;s import our fake API to get a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 110%;text-align: left;">import { <span class="s21">getProduct as getProductFromAPI</span>, getProducts as getProductsFromAPI} from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">6. We can then import the type for the action creator we need to implement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 114%;text-align: left;">import { IProductsGetAllAction, <span class="s21">IProductsGetSingleAction</span>, IProductsLoadingAction, IProductsState, ProductsActionTypes } from &quot;./productsTypes&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Let&#39;s implement the action creator for getting a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">export const getProduct: ActionCreator&lt;ThunkAction&lt;Promise&lt;any&gt;, IProductsState, null, IProductsGetSingleAction&gt;&gt; = (id: number) =&gt;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">return async (dispatch: Dispatch) =&gt; { dispatch(loading());</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">const product = await getProductFromAPI(id); dispatch({</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">product,</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">type: ProductsActionTypes.GETSINGLE</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This is very similar to the <span class="s22">getProducts </span>action creator. The only difference in structure is that the action creator takes in a parameter for the product ID.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">8. Move on to the reducer now in <span class="s22">ProductsReducer.ts</span>. Let&#39;s first set the current product to null in the initial state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const initialProductState: IProductsState = {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">currentProduct: null,</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">9. In the <span class="s22">productReducer </span>function, let&#39;s add a branch in the switch statement for our new action type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">switch (action.type) {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">case ProductsActionTypes.GETSINGLE: { return {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...state,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">currentProduct: action.product, productsLoading: false</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We spread the old state into a new object, overwrite the current project, and set the loading state to <span class="s22">false</span>.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, that&#39;s some of the state management that the <b>Product </b>page needs in the Redux store. However, we aren&#39;t managing the basket yet in our store. We&#39;ll do this in the next section.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part258.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part260.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
