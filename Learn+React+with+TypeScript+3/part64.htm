<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Abstract classes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part63.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part65.htm">Next &gt;</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark37">Abstract classes</a><a name="bookmark132">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Abstract classes are a special type of class that can only be inherited from and not instantiated. They are declared with the <span class="s22">abstract </span>keyword, as in the following example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We can define a base <span class="s22">Product </span>class as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 101pt;text-indent: -10pt;line-height: 114%;text-align: left;">abstract <span class="s12">class Product { name: string; unitPrice: number;</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. If we try to create an instance of this, the compiler will complain, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="566" height="107" alt="image" src="Image_082.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark133">3. We can create a more specific usable class for food products by extending</a></p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Product<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Food extends Product { constructor(public bestBefore: Date) {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">super();</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. Here, we are adding a <span class="s22">bestBefore </span>date in our <span class="s22">Food </span>class. We can then create an instance of <span class="s22">Food</span>, passing in the <span class="s22">bestBefore </span>date:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">const bread = new Food(new Date(2019, 6, 1));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Abstract classes can have <span class="s22">abstract </span>methods that child classes must implement. Abstract methods are declared with the <span class="s22">abstract </span>keyword in front of them, as in the following example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s add an <span class="s22">abstract </span>method to our base <span class="s22">Product </span>class:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">abstract class Product { name: string; unitPrice: number;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">abstract <span class="s12">delete(): void;</span></p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. After we add the <span class="s22">abstract </span>method, the compiler immediately complains about our <span class="s22">Food </span>class because it doesn&#39;t implement the <span class="s22">delete </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><span><img width="527" height="164" alt="image" src="Image_083.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark134">3. So, let&#39;s fix this and implement the </a><span class="s22">delete </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">class Food extends Product {</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">deleted: boolean;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">constructor(public bestBefore: Date) { super();</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">delete() {</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">this.deleted = false;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part63.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part65.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
