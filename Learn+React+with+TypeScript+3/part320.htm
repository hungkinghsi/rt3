<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the query component to query GraphQL</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark827">Using the query component to query GraphQL</a><a name="bookmark871">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We are now going to use the <span class="s22">Query </span>component to get our GitHub name and avatar, replacing the <span class="s22">axios </span>code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by removing the <span class="s22">axios </span>import statement and instead of having the following imports:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import gql from &quot;graphql-tag&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import { Query } from &quot;react-apollo&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Our <span class="s22">IViewer </span>interface will remain the same, but we need to tweak our</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">IQueryResult <span class="p">interface slightly:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IQueryResult { viewer: IViewer;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We are going to define our GraphQL query next:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const GET_VIEWER = gql`</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: -10pt;line-height: 120%;text-align: left;">viewer { name avatarUrl</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">`;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 93%;text-align: left;">So, we set the query to a <span class="s22">GET_VIEWER </span>variable and we have defined our query in a template literal. However, the <span class="s22">gql </span>function just before the template literal is a little odd. Shouldn&#39;t the template literal be in parentheses? This is actually called a tagged template literal, where the <span class="s22">gql </span>function from the core GraphQL library parses the template literal next to it. We end up with a query in <span class="s22">GET-VIEWER </span>that Apollo can use and execute.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. We are now going to start to define our query. We can define our query directly in JSX using the <span class="s22">Query </span>component from <span class="s22">react-apollo</span>. However, in order to add some type safety, we are going to create a new component called <span class="s22">GetViewerQuery </span>that inherits from <span class="s22">Query </span>and defines the result type as a generic parameter:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">class GetViewerQuery extends Query&lt;IQueryResult&gt; {}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">5. We don&#39;t need any state anymore, so we can remove the <span class="s22">viewer </span>and <span class="s22">setViewer</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">variables.</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. We can also remove the <span class="s22">useEffect </span>function call that makes the <span class="s22">axios </span>query because we are going to do our query in JSX now.</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">7. So, let&#39;s use our <span class="s22">GetViewerQuery </span>component to invoke our query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;GetViewerQuery query={GET_VIEWER}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{({ data }) =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (!data || !data.viewer) { return null;</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;img src={data.viewer.avatarUrl} className=&quot;avatar&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;viewer&quot;&gt;{data.viewer.name}&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;GitHub Search&lt;/h1&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/GetViewerQuery&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_532.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We pass the <span class="s22">GetViewerQuery </span>component our query we created earlier in a</p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">query <span class="p">prop.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_533.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_534.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 109%;text-align: left;">The query result is returned in the children function of <span class="s22">GetViewerQuery</span>. The children function argument contains an object containing the data in a</p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;line-height: 11pt;text-align: left;">data <span class="p">property. We destructure this data into a </span>data <span class="p">variable.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_535.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">If there isn&#39;t any data, we escape early and return <span class="s22">null</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_536.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we have data, we then return the JSX for our avatar and name referencing the <span class="s22">data </span>property.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_537.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If we look at our running app, it should look exactly the same as the <span class="s22">axios </span>version. We may need to <span class="s22">npm start </span>the app again if it&#39;s showing an error.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark872">8. There&#39;s other information that we can get from the children function argument. One piece of useful information is whether the data is being loaded. Let&#39;s use this to display a loading message:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;GetViewerQuery query={GET_VIEWER}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{({ data, <span class="s21">loading </span>}) =&gt; {</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">if (loading) {</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">return &lt;div className=&quot;viewer&quot;&gt;Loading ...&lt;/div&gt;;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/GetViewerQuery&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">9. Another useful piece of information that we can get from the children function argument is information about an error that has occurred. Let&#39;s use this to display the error message, if there is one:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;GetViewerQuery query={GET_VIEWER}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{({ data, loading, <span class="s21">error </span>}) =&gt; {</p><p class="s21" style="padding-left: 134pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (error) { return &lt;div</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">className=&quot;viewer&quot;&gt;{error.toString()}&lt;/div&gt;;</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/GetViewerQuery&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">This Apollo implementation is really elegant. It&#39;s clever how the <span class="s22">Query </span>component makes the web request at the correct point in the component lifecycle and allows us to feed the rest of the component tree the data.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the next section, we&#39;ll continue to enhance our app with Apollo.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
