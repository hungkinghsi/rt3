<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Adding a basic Field component</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part226.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part228.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark570">Adding a basic Field component</a><a name="bookmark607">&zwnj;</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Field </span>component needs to render a label and an editor. It will live in a static property called <span class="s22">Field </span>inside the <span class="s22">Form </span>component. Consumers can then reference this component using <span class="s22">Form.Field</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1. Let&#39;s start by creating an interface for the field props in <span class="s22">Form.tsx </span>just above</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">IFormProps<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IFieldProps { name: string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><a name="bookmark608">label: string;</a></p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">type?: &quot;Text&quot; | &quot;Email&quot; | &quot;Select&quot; | &quot;TextArea&quot;; options?: string[];</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_357.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The <span class="s22">name </span>prop is the name of the field.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_358.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The <span class="s22">label </span>prop is the text to display in the field label.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_359.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">type </span>prop is the type of editor to display. We have used a union type for this prop, containing the available types we are going to support. Note that we have defined this as an optional prop, so we&#39;ll need to define a default value for this a little later.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_360.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">options </span>prop, which is only applicable to the <span class="s22">Select </span>editor type, is also optional. This defines the list of options to display in the drop-down in a <span class="s22">string </span>array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Now, let&#39;s add a skeleton static <span class="s22">Field </span>property in <span class="s22">Form </span>for the <span class="s22">Field</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; { return ();</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Before we forget, let&#39;s add that default for the field <span class="s22">type </span>prop. We define this as follows, outside and underneath the <span class="s22">Form </span>class:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">Form.Field.defaultProps = { type: &quot;Text&quot;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">So, the default <span class="s22">type </span>will be a text-based input.</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Now, let&#39;s have a go at rendering the field:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 35pt;text-indent: 0pt;text-align: center;">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">const { name, label, type, options } = props;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return (</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor={name}&gt;{label}&lt;/label&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;input type={type.toLowerCase()} id={name} /&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_361.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We start by destructuring <span class="s22">name</span>, <span class="s22">label</span>, <span class="s22">type</span>, and <span class="s22">options </span>from the props object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_362.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark609">The field is wrapped in a </a><span class="s22">div </span>container, which spaces the fields out vertically, using the <span class="s22">form-group </span>class we already implemented in <span class="s22">index.css</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_363.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">label </span>is then rendered just before the <span class="s22">input </span>inside the <span class="s22">div </span>container, with the <span class="s22">htmlFor </span>attribute of the label referencing the <span class="s22">id </span>of the <span class="s22">input</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is a good start, but not all the different field editors are inputs. In fact, this will only work for types <span class="s22">Text </span>and <span class="s22">Email</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. So, let&#39;s adjust this slightly and wrap a conditional expression around the input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor={name}&gt;{label}&lt;/label&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;input type={type.toLowerCase()} id={name} /&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Next, let&#39;s deal with the <span class="s22">TextArea </span>type by adding the highlighted JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{(type === &quot;Text&quot; || type === &quot;Email&quot;) ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{type === &quot;TextArea&quot; &amp;&amp; (</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;textarea id={name} /&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We can now render the final editor we are going to support, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{type === &quot;TextArea&quot; ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{type === &quot;Select&quot; &amp;&amp; (</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;select&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">{options &amp;&amp; options.map(option =&gt; (</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;option key={option} value={option}&gt;</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">{option}</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;/option&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">))}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We render a <span class="s22">select </span>tag, containing the options specified by using the <span class="s22">map </span>function in the <span class="s22">options </span>array prop. Note that we give each option a unique <span class="s22">key </span>attribute to keep React happy when detecting any changes to the options.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We now have basic <span class="s22">Form </span>and <span class="s22">Field </span>components in play, which is great. However, the implementation is still pretty useless because we are not managing the field values yet in state. Let&#39;s cover that in the next section.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part226.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part228.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
