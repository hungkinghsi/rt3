<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a promised based function</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part274.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part276.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark763">Creating a promised based function</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In this section, we&#39;ll create a <span class="s22">wait </span>function to asynchronously wait a number of milliseconds that passed in as a parameter:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s enter the following into the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const wait = (ms: number) =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return new Promise((resolve, reject) =&gt; {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (ms &gt; 1000) { reject(&quot;Too long&quot;);</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">setTimeout(() =&gt; { resolve(&quot;Sucessfully waited&quot;);</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">}, ms);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_474.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: justify;">The function starts by returning a <span class="s22">Promise </span>object, which takes in the function that needs to be executed asynchronously as its constructor parameter</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_475.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">promise </span>function takes in a <span class="s22">resolve </span>parameter, which is a function that we call when the function has finished executing</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_476.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The promise function also takes in a <span class="s22">reject </span>parameter, which is a function that we call when the function errors</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_477.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">Internally, we are using <span class="s22">setTimeout </span>with a callback to do the actual waiting</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s consume our promised-based <span class="s22">wait </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">wait(500)</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">.then(result =&gt; console.log(&quot;then &gt;&quot;, result))</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">.catch(error =&gt; console.log(&quot;catch &gt;&quot;, error));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The function simply outputs the result or error to the console after waiting 500 milliseconds.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">So, let&#39;s give this a try and run it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="499" height="57" alt="image" src="Image_478.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">As we can see, the output in the console indicates that the <span class="s22">then </span>method is executed.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">3. If we call the <span class="s22">wait </span>function with a parameter greater than 1000, the <span class="s22">catch</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">method should be invoked. Let&#39;s give this a try:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">wait(1500)</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">.then(result =&gt; console.log(&quot;then &gt;&quot;, result))</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">.catch(error =&gt; console.log(&quot;catch &gt;&quot;, error));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark764">As expected, the </a><span class="s22">catch </span>method is executed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 63pt;text-indent: 0pt;text-align: left;"><span><img width="413" height="54" alt="image" src="Image_479.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;"><a name="bookmark723">So, promises give us a nice way of writing asynchronous code. However, there&#39;s another approach that we have used a number of times earlier in this book. We&#39;ll go through this method in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part274.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part276.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
