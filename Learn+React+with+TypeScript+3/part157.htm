<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Function component life cycle hooks</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part156.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part158.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark373">Function component life cycle hooks</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We can invoke code to execute at certain points in a function component&#39;s life cycle. Let&#39;s explore this in our <span class="s22">Confirm </span>component, starting with when the component is first rendering, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s add the highlighted lines of code just beneath where we define state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const [cancelClickCount, setCancelClickCount] = React.useState(0);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">React.useEffect(() =&gt; { console.log(&quot;Confirm first rendering&quot;);</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_202.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">We use React&#39;s <span class="s22">useEffect </span>function to hook into the component life cycle.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_203.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The function takes in an arrow function, which executes when the component is first rendered.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_204.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The function takes in a second parameter, which determines when our arrow function is called. This parameter is an array of values that, when changed, will cause the arrow function to be invoked. In our case, we pass in an empty array, so our arrow function will never be called after the first render.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_205.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we now try the running app and open the console, we&#39;ll see <b>Confirm first rendering </b>only appears once.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s remove the second parameter into <span class="s22">useEffect </span>now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 115%;text-align: left;">React.useEffect(() =&gt; { console.log(<span class="s21">&quot;Confirm rendering&quot;</span>);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app and the console, we&#39;ll see <b>Confirm rendering </b>appear each time <span class="s22">Confirm </span>is rendered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s change this once again to the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.useEffect( () =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">console.log(<span class="s21">&quot;open changed&quot;</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;"><a name="bookmark374">},</a></p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">[props.open]</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app and the console, we&#39;ll see <b>open changed </b>appear each time the <span class="s22">Confirm </span>component&#39;s <span class="s22">open </span>prop changes value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. What about hooking into when a component is unmounted? Let&#39;s try the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">React.useEffect(() =&gt; { console.log(&quot;Confirm first rendering&quot;); <span class="s21">return () =&gt; {</span></p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 9pt;text-align: left;">console.log(&quot;Confirm unmounted&quot;);</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, our arrow function can return a function that is executed when the component is unmounted.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Our <span class="s22">Confirm </span>component doesn&#39;t currently unmount, so, in <span class="s22">App.tsx</span>, let&#39;s make this not render if the countdown reaches <span class="s22">0</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{this.state.countDown &gt; 0 &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Confirm</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we look at the running app and the console, we&#39;ll see <span class="s22">Confirm unmounted </span>appear when the countdown reaches <span class="s22">0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we can execute logic in function components when they are first rendered, when their props change, and when they are unmounted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_206.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This section on hooks is written on React v16.6.0. We will share updated codes when new version releases.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In the next section, we&#39;ll look at a method we can use to optimize function component rendering cycles.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part156.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part158.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
