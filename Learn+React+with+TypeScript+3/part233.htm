<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Invoking validation rules</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part232.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part234.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark625">Invoking validation rules</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So far, we can define validation rules, and have state to track validation error messages, but nothing is invoking the rules yet. This is what we are going to implement in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;">1. We need to create a method within the <span class="s22">Form </span>component that is going to validate a field, calling the specified validator function. Let&#39;s create a method called <span class="s22">validate </span>that takes in the field name and its value. The method will return an array of validation error messages:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: justify;">private validate = ( fieldName: string, value: any</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">): string[] =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark626">2. Let&#39;s get the validation rules for the field and initialize an </a><span class="s22">errors </span>array. We&#39;ll collect all the errors in the <span class="s22">errors </span>array as the validators are executed. We&#39;ll also return the array of <span class="s22">errors </span>after all the validators have been executed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: justify;">private validate = ( fieldName: string, value: any</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: justify;">): string[] =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">const rules = this.props.validationRules[fieldName]; const errors: string[] = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">// TODO - execute all the validators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return errors;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. The rules can be an <span class="s22">IValidation </span>array or just a single <span class="s22">IValidation</span>. Let&#39;s check for this and call the <span class="s22">validator </span>function if we just have a single validation rule:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const errors: string[] = [];</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">if (Array.isArray(rules)) {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">// TODO - execute all the validators in the array of rules</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">if (rules) {</p><p class="s21" style="padding-left: 68pt;text-indent: 21pt;line-height: 106%;text-align: left;">const error = rules.validator(fieldName, this.state.values, rules.arg);</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (error) { errors.push(error);</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return errors;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. Let&#39;s now deal with the branch of code for when there are multiple validation rules. We can use the <span class="s22">forEach </span>function on the rules array to iterate through the rules and execute the <span class="s22">validator </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">if (Array.isArray(rules)) {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">rules.forEach(rule =&gt; {</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">const error = rule.validator( fieldName, this.state.values,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">rule.arg</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">);</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (error) { errors.push(error);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="text-indent: 0pt;text-align: right;"><a name="bookmark627">}</a></p><p class="s21" style="text-indent: 0pt;text-align: right;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return errors;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. The final bit of code we need to implement in the <span class="s22">validate </span>method is to set the new <span class="s22">errors </span>form state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">if (Array.isArray(rules)) {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 106%;text-align: left;">const newErrors = { ...this.state.errors, [fieldName]: errors }; this.setState({ errors: newErrors });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return errors;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We spread the old errors state into a new object, and then add the new errors for the field.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">6. The <span class="s22">Field </span>component needs to call into this <span class="s22">validate </span>method. We are going to add a reference to this method to the form context. Let&#39;s add it to the <span class="s22">IFormContext </span>interface first:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IFormContext { values: IValues; errors: IErrors;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">setValue?: (fieldName: string, value: any) =&gt; void;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">validate?: (fieldName: string, value: any) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We can now add it to the context value in the <span class="s22">render </span>method in <span class="s22">Form</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 115%;text-align: left;">const context: IFormContext = { errors: this.state.errors, setValue: this.setValue, <span class="s21">validate: this.validate, </span>values: this.state.values</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark577">Our form validation is coming along nicely, and we now have a method we can call to invoke all the rules for a field. However, this method isn&#39;t being called from anywhere yet as the user fills out the form. We&#39;ll do that in the next section.</a><a name="bookmark628">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part232.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part234.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
