<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating interfaces, types aliases, and classes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part50.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part52.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark104">Creating interfaces, types aliases, and classes</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In the <i>Understanding basic types </i>section, we introduced ourselves to objects, which are types that can have their own properties. Interfaces, type aliases, and classes are ways that we can define an object structure before we start using it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Following here is the <span class="s22">customer </span>object we worked with, where we declared the <span class="s22">customer</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">variable with an initial object value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">const customer = { name: &quot;Lamps Ltd&quot;, turnover: 2000134, active: true</p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s try to declare the customer variable and set its value on a subsequent line:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: justify;">let customer: object; customer = {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: justify;">name: &quot;Lamps Ltd&quot;, turnover: 2000134, active: true</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. So far, so good. However, let&#39;s see what happens when we try to change the customers <span class="s22">turnover </span>value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">customer.turnover = 2000200;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. The lack of IntelliSense when we type <span class="s22">turnover </span>isn&#39;t what we are used to. When we&#39;ve finished typing the line, we get a compiler error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 17pt;text-indent: 0pt;text-align: left;"><span><img width="537" height="144" alt="image" src="Image_074.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The TypeScript compiler doesn&#39;t know about the properties in the <span class="s22">customer</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">object and so thinks there&#39;s a problem.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we need another way of defining an object structure with the ability to set property values later in the program. That&#39;s where interfaces, type aliases, and classes come in; they let us define the structure of an object by letting us define our own types.</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part52.htm">Interfaces</a><a class="toc1" href="part53.htm">Properties</a><a class="toc1" href="part54.htm">Method signatures</a><a class="toc1" href="part55.htm">Optional properties and parameters</a><a class="toc1" href="part56.htm">Readonly properties</a><a class="toc1" href="part57.htm">Extending interfaces</a><a class="toc0" href="part58.htm">Type aliases</a><a class="toc0" href="part59.htm">Classes</a><a class="toc1" href="part60.htm">Basic classes</a><a class="toc1" href="part61.htm">Implementing interfaces</a><a class="toc1" href="part62.htm">Constructors</a><a class="toc1" href="part63.htm">Extending classes</a><a class="toc1" href="part64.htm">Abstract classes</a><a class="toc1" href="part65.htm">Access modifiers</a><a class="toc1" href="part66.htm">Property setters and getters</a><a class="toc1" href="part67.htm">Static</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part50.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part52.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
