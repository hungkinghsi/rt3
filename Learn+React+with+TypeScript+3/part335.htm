<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a basic pure function test</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part334.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part336.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark922">Creating a basic pure function test</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s create our first unit test in our project to test the <span class="s22">required </span>function in <span class="s22">Form.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Start by creating a file called <span class="s22">Form.test.tsx </span>in the <span class="s22">src </span>folder. We&#39;ll use this file for our test code, to test the code in <span class="s22">Form.tsx</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_562.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">test.tsx </span>extension is important because Jest automatically looks for files with this extension when finding tests to execute. Note that if our tests don&#39;t contain any JSX, we could use a <span class="s22">test.ts </span>extension.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. Let&#39;s import the function we want to test, along with a TypeScript type we need for a parameter value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import { required, IValues } from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s start to create our test using the Jest <span class="s22">test </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When required is called with empty title, &#39;This must be populated&#39; should be returned&quot;, () =&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">// TODO: implement the test</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">The <span class="s22">test </span>function takes in two parameters:</p><p style="padding-top: 9pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The first parameter is a message telling us whether the test passed or not, which will be shown in the test output</p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The second parameter is an arrow function that will contain our test</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. We&#39;ll move on to calling the <span class="s22">required </span>function with a <span class="s22">values </span>parameter that contains an empty <span class="s22">title </span>property:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When required called with title being an empty string, an error should be &#39;This must be populated&#39;&quot;, () =&gt; {</p><p class="s21" style="padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">const values: IValues = { title: &quot;&quot;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const result = required(&quot;title&quot;, values);</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">// TODO: check the result is correct</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Our next task in this test is to check that the result from the <span class="s22">required </span>function is what we expect. We can use the Jest <span class="s22">expect </span>function to do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">test(&quot;When required called with title being an empty string, an error should be &#39;This must be populated&#39;&quot;, () =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">const values: IValues = { title: &quot;&quot;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">const result = required(&quot;title&quot;, values);</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">expect(result).toBe(&quot;This must be populated&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_563.png"/></span></p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 93%;text-align: justify;">toBe <a href="https://jestjs.io/docs/en/expect" class="s20" target="_blank">is one of many Jest matcher functions we can use to check a variable value. The full list of functions can be found at </a><a href="https://jestjs.io/docs/en/expect" class="a" target="_blank">https://jestjs.io/docs/ en/</a><span class="s12">expect</span><span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We pass the variable we are checking into the <span class="s22">expect </span>function. We then chain a <span class="s22">toBe </span>matcher function onto this, which checks that the result from the <span class="s22">expect </span>function is the same as the parameter supplied to the <span class="s22">toBe </span>function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Now that our test is complete, we can run the test by typing the following in the terminal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">npm test</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This starts the Jest test runner in watch mode, which means that it will continuously run, executing tests when we change the source files.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Jest will eventually find our test file, execute our test, and output the result to the terminal, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 102pt;text-indent: 0pt;text-align: left;"><span><img width="312" height="213" alt="image" src="Image_564.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Let&#39;s change the expected result in the test to make the test fail:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 32pt;text-indent: 0pt;text-align: center;">expect(result).toBe(&quot;This must be populated<span class="s21">X</span>&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">When we save the test file, Jest automatically executes the test and outputs the failure to the terminal, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="495" height="304" alt="image" src="Image_565.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark923">Jest gives us valuable information about the failure. It tells us this:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_566.png"/></span></p><p style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">Which test failed</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_567.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_568.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">What the expected result was, in comparison to the actual result The line in our test code where the failure occurred</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">This information helps us quickly resolve test failures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Before we move on, let&#39;s correct our test code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 27pt;text-indent: 0pt;text-align: center;">expect(result).toBe(<span class="s21">&quot;This must be populated&quot;</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark899">When we save the change, the test should now pass.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part334.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part336.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
