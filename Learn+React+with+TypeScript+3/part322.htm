<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Implementing the search form</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part321.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part323.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark876">Implementing the search form</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Let&#39;s implement a search form that allows the user to supply an organization name and repository name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Back in <span class="s22">RepoSearch.tsx</span>, let&#39;s start to define the state for the search fields, starting with the interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ISearch { orgName: string; repoName: string;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Now we can create a variable to hold our <span class="s22">search </span>state, along with a function to set it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 37pt;text-indent: 0pt;text-align: center;">const RepoSearch: React.SFC&lt;IProps&gt; = props =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">const [search, setSearch]: [ ISearch,</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(search: ISearch) =&gt; void</p><p class="s21" style="padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">] = React.useState({ orgName: &quot;&quot;, repoName: &quot;&quot;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">return null;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s define the <span class="s22">search </span>form in our JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;repo-search&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;form onSubmit={handleSearch}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;label&gt;Organization&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;line-height: 120%;text-align: left;">type=&quot;text&quot; onChange={handleOrgNameChange} value={search.orgName}</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;label&gt;Repository&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;line-height: 120%;text-align: left;">type=&quot;text&quot; onChange={handleRepoNameChange}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">value={search.repoName}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button type=&quot;submit&quot;&gt;Search&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;ve referenced a few bits that aren&#39;t implemented yet. So, we&#39;ll implement this one by one.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. Let&#39;s add the <span class="s22">repo-search </span>class we referenced in <span class="s22">App.css</span>. We&#39;ll also style the labels and inputs along with the <b>Search </b>button as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">.repo-search { margin: 30px auto; width: 300px;</p><p class="s12" style="padding-left: 124pt;text-indent: 0pt;line-height: 120%;text-align: left;">font-family: Arial; font-size: 16px; text-align: left;</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">.repo-search label { display: block; margin-bottom: 3px; font-size: 14px;</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">.repo-search input { display: block; margin-bottom: 10px; font-size: 16px; color: #676666;</p><p class="s12" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">width: 100%;</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 120%;text-align: left;">.repo-search button { display: block; margin-bottom: 20px; font-size: 16px;</p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark877">5. Next, let&#39;s implement the input change handlers that simply update the </a><span class="s22">search</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleOrgNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">setSearch({ ...search, orgName: e.currentTarget.value });</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleRepoNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">setSearch({ ...search, repoName: e.currentTarget.value });</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">6. The final bit we need to implement is the <span class="s22">search </span>handler:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; { e.preventDefault();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">// TODO - make GraphQL query</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We call <span class="s22">preventDefault </span>on the event argument to stop a full postback occurring.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark830">So, that&#39;s the search form started. We&#39;ll implement the GraphQL query in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part321.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part323.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
