<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Mocking Axios with axios-mock-adapter</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part347.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part349.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark946">Mocking Axios with axios-mock-adapter</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: justify;"><a href="part267.htm#bookmark752" class="s20">We are going to move to the project we created in </a><span class="s12">Chapter 9</span>, <i>Interacting with Restful APIs. </i>We are going to add a test that verifies the posts are rendered on the page correctly. We&#39;ll mock the JSONPlaceholder REST API so we are in control of the data that is returned, and so that our test will execute nicely and quickly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, we need to install the <span class="s22">axios-mock-adapter </span>package as a development dependency:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">npm install axios-mock-adapter --save-dev</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We are also going to install <span class="s22">react-testing-library</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">npm install react-testing-library --save-dev</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. The project already has a test file, <span class="s22">App.test.tsx</span>, which includes a basic test on the <span class="s22">App </span>component. We&#39;ll remove the test, but leave the imports, as we&#39;ll need these.</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. In addition, we are going to import some functions from react-testing- library, <span class="s22">axios </span>and a <span class="s22">MockAdapter </span>class that we&#39;ll use to mock the REST API calls:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { render, cleanup, waitForElement } from &quot;react-testing- library&quot;;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import axios from &quot;axios&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import MockAdapter from &quot;axios-mock-adapter&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s add the usual cleanup line that will execute after each test:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">afterEach(cleanup);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">6. We&#39;ll create our test with an appropriate description, and place it under an <span class="s22">App</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">group:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">describe(&quot;App&quot;, () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">test(&quot;When page loads, posts are rendered&quot;, async () =&gt; {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">// TODO - render the app component with a mock API and check that the posts in the rendered list are as expected</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Note that the <span class="s22">arrow </span>function is marked with the <span class="s22">async </span>keyword. This is because we&#39;ll eventually make an asynchronous call in our test.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">7. Our first job in our test is to mock the REST API call using the <span class="s22">MockAdapter</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">class:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">test(&quot;When page loads, posts are rendered&quot;, async () =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 106%;text-align: left;">const mock = new MockAdapter(axios); mock.onGet(&quot;https://jsonplaceholder.typicode.com/posts&quot;).reply( 200, [</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">userId: 1,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">id: 1,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: left;">title: &quot;title test 1&quot;, body: &quot;body test 1&quot;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">},</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">userId: 1,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">id: 2,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: left;">title: &quot;title test 2&quot;, body: &quot;body test 2&quot;</p><p class="s21" style="text-indent: 0pt;line-height: 10pt;text-align: right;">}</p><p class="s21" style="text-indent: 0pt;text-align: right;">]);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: justify;">We use the <span class="s22">onGet </span>method to define the response HTTP status code and body we want when the URL to get the posts is called. So, the call to the REST API should return two posts containing our test data.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">8. We need to check that the posts are rendered correctly. In order to do this, we are going to add a <span class="s22">data-testid </span>attribute to the unordered posts list in <span class="s22">App.tsx</span>. We are also only going to render this when we have data:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{this.state.posts.length &gt; 0 &amp;&amp; (</p><p class="s12" style="padding-left: 27pt;text-indent: 0pt;text-align: center;">&lt;ul className=&quot;posts&quot; <span class="s21">data-testid=&quot;posts&quot;</span>&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">...</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark947">9. Moving back to our test, we can now render the component and destructure the</a></p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">getByTestId <span class="p">function:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">mock.onGet(&quot;https://jsonplaceholder.typicode.com/posts&quot;).reply(...)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const { getByTestId } = render(&lt;App /&gt;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">10. We need to check that the rendered posts are correct, but this is tricky, because these are rendered asynchronously. We need to wait for the posts list to be added to the DOM before doing our checks. We can do this using the <span class="s22">waitForElement </span>function from react-testing-library:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const { getByTestId } = render(&lt;App /&gt;);</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">const postsList: any = await waitForElement(() =&gt; getByTestId(&quot;posts&quot;));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">waitForElement </span>function takes in an arrow function as a parameter, which in turn returns the element we are waiting for. We use the <span class="s22">getByTestId </span>function to get the posts list, which finds it using its <span class="s22">data-testid </span>attribute.</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;">11. We can then use a snapshot test to check that the content in the posts list is correct:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 118%;text-align: left;">const postsList: any = await waitForElement(() =&gt; getByTestId(&quot;posts&quot;)); <span class="s21">expect(postsList).toMatchSnapshot();</span></p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">12. Before our test can execute successfully, we need to make a change in <span class="s22">tsconfig.json </span>so that the TypeScript compiler knows that we are using <span class="s22">async </span>and <span class="s22">await</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">&quot;compilerOptions&quot;: { &quot;target&quot;: &quot;es5&quot;,</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;lib&quot;: [&quot;dom&quot;, &quot;es2015&quot;],</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&quot;include&quot;: [&quot;src&quot;]</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">When the test executes, the snapshot is created. If we inspect the snapshot, it will contain the two list items containing data that we told the REST API to return.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark948">We&#39;ve learned about some great features in Jest and react-testing-library that help us write maintainable tests on pure functions and React components.</a></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark912">How can we tell what bits of our app are covered by unit tests, though</a><span class="s23">—</span>and, more importantly, what bits are uncovered? We&#39;ll find out in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part347.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part349.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
