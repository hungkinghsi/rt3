<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Method signatures</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part53.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part55.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">Method signatures</a><a name="bookmark109">&zwnj;</a><a name="bookmark110">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Interfaces can contain method signatures as well. These won&#39;t contain the implementation of the method; they define the contracts for when interfaces are used in an implementation.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s look at an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">1. Let&#39;s add a method to the <span class="s22">OrderDetail </span>interface we just created. Our method is called <span class="s22">getTotal </span>and it has a <span class="s22">discount </span>parameter of type <span class="s22">number </span>and returns a <span class="s22">number</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface OrderDetail { product: Product; quantity: number;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that the <span class="s22">getTotal </span>method on the interface doesn&#39;t specify anything about how the total is calculated <span class="s23">â€“ </span>it just specifies the method signature that should be used.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">2. Having adjusted our <span class="s22">OrderDetail </span>interface, our <span class="s22">tableOrder </span>object, which implemented this interface, will now be giving a compilation error. So, let&#39;s resolve the error by implementing <span class="s22">getTotal</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const tableOrder: OrderDetail = { product: table,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">quantity: 1,</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 106%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 106%;text-align: left;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s21" style="padding-left: 118pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Notice that the implemented method has the same signature as in the</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="70" alt="image" src="Image_076.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The method implementation uses the <span class="s22">this </span>keyword to get access to properties on the object. If we simply referenced <span class="s22">product.unitPrice </span>and <span class="s22">quantity </span>without <span class="s22">this</span>, we would get a compilation error, because TypeScript would assume these variables are local within the method.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">OrderDetail <span class="p">interface.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark111">3. Let&#39;s tweak the method signature to discover what we can and can&#39;t do. We&#39;ll start by changing the parameter name:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">getTotal(<span class="s21">discountPercentage</span>: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 107pt;text-indent: -5pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discountPercentage;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. We&#39;ll see that we don&#39;t get a compilation error. Let&#39;s change the method name now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">total<span class="s12">(discountPercentage: number): number {</span></p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discountPercentage;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">5. This does cause an error because a <span class="s22">total </span>method doesn&#39;t exist on the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">OrderDetail <span class="p">interface:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="477" height="183" alt="image" src="Image_077.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. We could try changing the return type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const tableOrder: OrderDetail = { product: table,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">quantity: 1,</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discountPercentage: number): <span class="s21">string </span>{</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;"><a name="bookmark112">const discountAmount = priceWithoutDiscount * discountPercentage;</a></p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">return (priceWithoutDiscount - discountAmount).toString();</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This actually doesn&#39;t produce a compilation error in the TypeScript playground, but it should do!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;">7. So, let&#39;s use Visual Studio Code for this example. After we&#39;ve opened Visual Studio Code in a folder of our choice, let&#39;s create a file called <span class="s22">interfaces.ts </span>and paste in the interface definitions for the <span class="s22">Product </span>and <span class="s22">OrderDetail </span>interfaces, along with the <span class="s22">table </span>variable declaration.</p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">8. We can then enter the preceding implementation of the <span class="s22">OrderDetail </span>interface. As expected, we get a compilation error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;text-indent: 0pt;text-align: left;"><span><img width="535" height="355" alt="image" src="Image_078.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark113">9. Changing the parameter type also results in a compilation error:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="499" height="200" alt="image" src="Image_079.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The errors provided by TypeScript are fantastic<span class="s23">â€”</span>they are very specific about where the problem is, allowing us to quickly correct our mistakes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: justify;">10. So, when implementing a method from an interface, the parameter names aren&#39;t important, but the other parts of the signature are. In fact, we don&#39;t even need to declare the parameter names in the interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">interface OrderDetail {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(number): number;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">However, omitting the parameter names arguably makes the interface harder to understand<span class="s23">â€”</span>how do we know exactly what the parameter is for?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part53.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part55.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
