<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Optimizing function component rendering</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part157.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part159.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark292">Optimizing function component rendering</a><a name="bookmark375">&zwnj;</a><a name="bookmark376">&zwnj;</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Our <span class="s22">Confirm </span>component is actually being rendered more than it needs to be. In this section, we are going to optimize this so that it only renders when its props change:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. First, let&#39;s add a line at the top of our function component, so that we can see when it renders:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">console.log(&quot;Confirm rendering&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If we look at the running app and the console, we&#39;ll see that a render occurs every time the <span class="s22">App </span>component counts down. The countdown is in the <span class="s22">App </span>component state, and a change to state means the component will be rendered again, along with any child components. This is why, without any optimization, our <span class="s22">Confirm </span>component renders on each countdown.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. On to the optimization then. It&#39;s actually really simple:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const ConfirmMemo = React.memo(Confirm);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">export default <span class="s21">ConfirmMemo</span>;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, we wrap our component with a function called <span class="s22">memo </span>from React. We then export this wrapper function. The <span class="s22">memo </span>function then only renders the component if its props change.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app and the console, we&#39;ll see that our component no longer renders on each countdown.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">So, given how simple this is, shouldn&#39;t we just wrap all our function components with <span class="s22">memo</span>? No! There is a performance cost when <span class="s22">memo </span>determines whether a component has changed. If the component doesn&#39;t actually do any unnecessary rendering, using <span class="s22">memo </span>would result in the component being slower.</p><p class="s22" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">memo <span class="p">should be used with care, and only on components that are being rendered more than they need to be.</span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Given that the features of class components and function components are similar, which type should we be using? There is no straightforward answer, really. If our team is used to object-oriented code, perhaps class-based components will be easier to learn. If our team is used to more functional programming techniques, then function-based components may enable them to be more productive.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Both approaches are great ways to create React components<span class="s23">â€”</span>it&#39;s down to you to choose!</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part157.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part159.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
