<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Module formats</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part68.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part70.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">Module formats</a><a name="bookmark142">&zwnj;</a><a name="bookmark143">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Modules feature in JavaScript as part of ES6, which is great. However, lots of code exists in other popular module formats that came before this standardization. TypeScript allows us to write our code using ES6 modules, which can then transpile into another module format if specified.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Here is a brief description of the different module formats that TypeScript can transpile to:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_090.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;"><b>Asynchronous Module Definition </b>(<b>AMD</b>): This is commonly used in code targeted for the browser and uses a <span class="s22">define </span>function to define modules.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_091.png"/></span></p><p class="s9" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">CommonJS<span class="p">: This format is used in Node.js programs. It uses </span><span class="s22">module.exports</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">to define modules and <span class="s22">require </span>to define dependencies.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_092.png"/></span></p><p class="s9" style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">Universal Module Definition <span class="p">(</span>UMD<span class="p">): This can be used in both browser apps and Node.js programs.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_093.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;"><b>ES6</b>: This is the native JavaScript module format and uses the <span class="s22">export </span>keyword to define modules and <span class="s22">import </span>to define dependencies.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark43">In the following sections (and, in fact, this whole book), we&#39;ll write our code using ES6 modules.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part68.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part70.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
