<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a basic tab component</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part205.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part207.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark505">Creating a basic tab component</a><a name="bookmark531">&zwnj;</a><a name="bookmark532">&zwnj;</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our job now is to separate the description from the reviews using a tab component that we are going to build. We are going to create a simple tab component first and refactor this into the compound component pattern in the next section.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">It&#39;s time to start on our tab component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, let&#39;s create a file called <span class="s22">Tabs.tsx </span>for our tab component with the following content in it as a skeleton class component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">interface IProps {} interface IState {}</p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Tabs extends React.Component&lt;IProps, IState&gt; { public constructor(props: IProps) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">super(props); this.state = {};</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">export default Tabs;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We have chosen to create a class-based component because our component will have to track state for whichever tab heading is active.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. So, let&#39;s complete the interface for our state by adding a property that will give the active heading name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IState {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">activeHeading: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark533">3. Our component will take in the tab headings and display them as properties. So, let&#39;s complete our interface for this:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IProps {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">headings: string[];</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">So, our component can take in an array of heading names in a <span class="s22">headings </span>prop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s create the initial value for the <span class="s22">activeHeading </span>state in the constructor now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public constructor(props: IProps) { super(props);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.state = {</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">activeHeading:</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">this.props.headings &amp;&amp; this.props.headings.length &gt; 0</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">? this.props.headings[0]</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">: &quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: justify;">So, the active heading will initially be set to the first element in the <span class="s22">headings </span>array. The ternary ensures our component doesn&#39;t produce an error if no tabs have been passed to it by the consumer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. Moving on to the render method now, let&#39;s render our tabs in a list by mapping over the <span class="s22">headings </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;tabs&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">{this.props.headings.map(heading =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 133pt;text-indent: 0pt;line-height: 120%;text-align: left;">&lt;li className={heading === this.state.activeHeading ? &quot;active&quot; : &quot;&quot;}</p><p class="s12" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 144pt;text-indent: 0pt;text-align: left;">{heading}</p><p class="s12" style="padding-top: 1pt;padding-left: 133pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">))}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We have referenced some CSS classes including <span class="s22">active</span>, which is set using a ternary based on whether it is the active tab heading being rendered or not.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s add these CSS classes to <span class="s22">index.css </span>now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.tabs {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">list-style: none; padding: 0;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.tabs li {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">display: inline-block; padding: 5px;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">margin: 0px 5px 0px 5px; cursor: pointer;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.tabs li:focus { outline: none;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.tabs li.active {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">border-bottom: #222 solid 2px;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Before we can see what our tab component looks like, we need to consume it.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">7. So, let&#39;s add this on the <span class="s22">Product </span>component by first importing the <span class="s22">Tabs</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import Tabs from &quot;./Tabs&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">8. We can now add the <span class="s22">Tabs </span>component in between the product name and description:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;{product.name}&lt;/h1&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Tabs headings={[&quot;Description&quot;, &quot;Reviews&quot;]} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{product.description}&lt;/p&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We pass the <span class="s22">Tabs </span>component the two tab headings we want to display, which are</p><p class="s9" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Description <span class="p">and </span>Reviews<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark534">Let&#39;s see what this looks like:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="568" height="338" alt="image" src="Image_303.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">That&#39;s a good start. The first tab is underlined from the <span class="s22">active </span>CSS style just as we wanted. If we click on the <b>Reviews </b>tab nothing happens, though.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">9. So, let&#39;s reference the click handler back in <span class="s22">Tabs.tsx </span>for each tab:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;li</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">onClick={this.handleTabClick}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">className={heading === this.state.activeHeading ? &quot;active&quot; : &quot;&quot;}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">{heading}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">10. Let&#39;s implement the click handler as well now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleTabClick = (e: React.MouseEvent&lt;HTMLLIElement&gt;) =&gt; { const li = e.target as HTMLLIElement;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">const heading: string = li.textContent ? li.textContent : &quot;&quot;; this.setState({ activeHeading: heading });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark535">We first extract the heading from the </a><span class="s22">textContent </span>of <span class="s22">li</span>. We then set the <span class="s22">activeHeading </span>state to this. This will cause React to re-render the component with the clicked tab shown as being active.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that we help the TypeScript compiler declare the <span class="s22">li </span>variable as <span class="s22">HTMLLIElement </span>using the <span class="s22">as </span>keyword. Without doing this, the compiler wouldn&#39;t be happy with us accessing the <span class="s22">textContent </span>property within it.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we go to the running app again, we can now click on our tabs and see the active state changing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark506">At the moment, our tabs component just renders some tabs that can be clicked on. It doesn&#39;t tie into any content yet. We&#39;ll actually not tie in our headings to content until the next section on the render props pattern. However, now it&#39;s time to explore the compound component pattern and enhance our tab headings a little more in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part205.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part207.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
