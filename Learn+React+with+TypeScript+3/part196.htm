<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Overload signatures</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part195.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part197.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark455">Overload signatures</a><a name="bookmark489">&zwnj;</a><a name="bookmark490">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Overload signatures allow a function to be called with different signatures. This feature can be used nicely to streamline a set of functions that a library offers to consumers. Wouldn&#39;t it be nice for a library that contained <span class="s22">condenseString </span>public functions and <span class="s22">condenseArray </span>to be streamlined so that it just contained a single public <span class="s22">condense </span>function? We&#39;ll do just this in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have a function that removes spaces from a string:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">function condenseString(string: string): string { return string.split(&quot; &quot;).join(&quot;&quot;);</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We have another function that removes spaces from array items:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">function condenseArray(array: string[]): string[] { return array.map(item =&gt; item.split(&quot; &quot;).join(&quot;&quot;));</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. We now want to combine these two functions into a single function. We can do this as follows using union types:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">function condense(stringOrArray: string | string[]): string | string[] {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">return typeof stringOrArray === &quot;string&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">? stringOrArray.split(&quot; &quot;).join(&quot;&quot;)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">: stringOrArray.map(item =&gt; item.split(&quot; &quot;).join(&quot;&quot;));</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s consume our unified function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">const condensedText = condense(&quot;the cat sat on the mat&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">As we enter the function parameter, IntelliSense reminds us that we need to enter a string or an array of strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 32pt;text-indent: 0pt;text-align: left;"><span><img width="497" height="90" alt="image" src="Image_280.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark491">If we hover over the </a><span class="s22">condensedText </span>variable, we see that the inferred type is the union type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 107pt;text-indent: 0pt;text-align: left;"><span><img width="297" height="65" alt="image" src="Image_281.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. It&#39;s time to add two signature overloads to improve the consumption of our function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 106%;text-align: left;">function condense(string: string): string; function condense(array: string[]): string[];</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">function condense(stringOrArray: string | string[]): string | string[] { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We add function overload signatures before the main function signature. We&#39;ve added an overload for when we work with a string, and a second overload for when we work with an array of strings.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s consume our overloaded function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const moreCondensedText = condense(&quot;The cat sat on the mat&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We get improved IntelliSense now as we type the parameter. We also get up and down arrows to scroll through the two different signatures:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 31pt;text-indent: 0pt;text-align: left;"><span><img width="497" height="71" alt="image" src="Image_282.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="285" height="56" alt="image" src="Image_283.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="301" height="72" alt="image" src="Image_284.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we hover over the <span class="s22">moreCondensedText </span>variable, we see that we get better type inference:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, overload signatures improve the experience for developers consuming our functions. They can give improved IntelliSense and type inference.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part195.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part197.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
