<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>componentDidMount</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part147.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part149.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark282">componentDidMount</a><a name="bookmark352">&zwnj;</a><a name="bookmark353">&zwnj;</a></h4><p class="s22" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">componentDidMount <span class="p">is invoked when a component has been inserted into the DOM. Here are some common use cases for this method:</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_179.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_180.png"/></span></p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Calling a web service to get some data Adding event listeners</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_181.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Initializing timers</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_182.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Initializing third-party libraries</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;re going to change the app we have been building to give users a time limit of 10 seconds to confirm whether or not they want to learn React and TypeScript. In order to do this, we&#39;ll need to make use of the <span class="s22">componentDidMount </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. Let&#39;s start by making the confirmation dialog closed when the app loads in</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">App.tsx<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">constructor(props: {}) { super(props); this.state = {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">confirmMessage: &quot;Please hit the confirm button&quot;,</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">confirmOpen: false</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We&#39;re going to count down the seconds from <span class="s22">10 </span>to <span class="s22">0</span>, and then hide the <b>Confirm </b>button when <span class="s22">0 </span>is reached. Let&#39;s add and initialize a state for both of these in <span class="s22">App.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 114%;text-align: left;">interface IState { confirmOpen: boolean; confirmMessage: string; <span class="s21">confirmVisible: boolean; countDown: number;</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">constructor(props: {}) { super(props); this.state = {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">confirmMessage: &quot;Please hit the confirm button&quot;, confirmOpen: false,</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 106%;text-align: left;">confirmVisible: true, countDown: 10</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. We&#39;ll use <span class="s22">timer </span>to count down from <span class="s22">10 </span>to <span class="s22">1 </span>in the <span class="s22">App </span>class. Let&#39;s create a private prop called <span class="s22">timer </span>just above the constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">private timer: number = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Now, let&#39;s use the <span class="s22">componentDidMount </span>method to initialize our <span class="s22">timer</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">this.timer = window.setInterval(() =&gt; this.handleTimerTick(), 1000);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. The timer will call a method called <span class="s22">handleTimerTick </span>every second. Implement this method as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleTimerTick() { this.setState(</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">confirmMessage: `Please hit the confirm button ${ this.state.countDown</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">} secs to go`,</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">countDown: this.state.countDown - 1</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We are reducing our counter as well, updating the message shown to the user in this method. We need to do some more work here, though: we need to stop the timer, hide the <b>Confirm </b>button, and tell the user they are too late!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Our natural instinct may be to write something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleTimerTick() { this.setState(</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">confirmMessage: `Please hit the confirm button ${ this.state.countDown</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">} secs to go`,</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">countDown: this.state.countDown - 1</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (this.state.countDown &lt;= 0) { clearInterval(this.timer); this.setState({</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: left;">confirmMessage: &quot;Too late to confirm!&quot;, confirmVisible: false</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;"><a name="bookmark354">}</a></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">However, this is incorrect, because the state is updated asynchronously, and so <span class="s22">this.state.countDown </span>won&#39;t have necessarily updated the line after we update it in the <span class="s22">setState </span>call.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Instead, we need to move this code to the callback in <span class="s22">setState</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleTimerTick() { this.setState(</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">confirmMessage: `Please hit the confirm button ${ this.state.countDown</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">} secs to go`,</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">countDown: this.state.countDown - 1</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}<span class="s21">,</span></p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">() =&gt; {</p><p class="s21" style="padding-left: 134pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (this.state.countDown &lt;= 0) { clearInterval(this.timer); this.setState({</p><p class="s21" style="padding-left: 145pt;text-indent: 0pt;line-height: 106%;text-align: left;">confirmMessage: &quot;Too late to confirm!&quot;, confirmVisible: false</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s also stop the timer if the <b>Confirm</b>, <b>Ok</b>, or <b>Cancel </b>buttons are clicked:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">private handleConfirmClick = () =&gt; { this.setState({ confirmOpen: true }); <span class="s21">clearInterval(this.timer);</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">private handleCancelConfirmClick = () =&gt; { this.setState(...); <span class="s21">clearInterval(this.timer);</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">private handleOkConfirmClick = () =&gt; { this.setState(...; <span class="s21">clearInterval(this.timer);</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">9. Our final job is to put a condition around the <b>Confirm </b>button to only show it if the <span class="s22">confirmVisible </span>state is <span class="s22">true</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{this.state.confirmMessage}&lt;/p&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">{this.state.confirmVisible &amp;&amp; (</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;button onClick={this.handleConfirmClick}&gt;Confirm&lt;/button&gt;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_183.png"/></span></p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">x &amp;&amp; y <span class="p">allows us to concisely express a condition with a single branch in JSX. Basically, the right operand of </span>&amp;&amp; <span class="p">isn&#39;t evaluated and rendered if the left operand is falsy.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Confirm ... /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Now, it&#39;s time to give this a try. We&#39;ll see the countdown when the app first runs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 120pt;text-indent: 0pt;text-align: left;"><span><img width="262" height="203" alt="image" src="Image_184.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">If we don&#39;t confirm within ten seconds, it&#39;ll be too late:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 118pt;text-indent: 0pt;text-align: left;"><span><img width="263" height="181" alt="image" src="Image_185.png"/></span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part147.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part149.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
