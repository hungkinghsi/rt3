<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Consuming the onSubmit form prop</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part238.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part240.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark642">Consuming the onSubmit form prop</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In this section, we&#39;ll consume the <span class="s22">onSubmit </span>form prop in the <span class="s22">ContactUs </span>component. The <span class="s22">ContactUs </span>component won&#39;t manage the submission<span class="s23">â€”</span>it will simply delegate to the <span class="s22">ContactUsPage </span>component to handle the submission:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by importing <span class="s22">ISubmitResult </span>and <span class="s22">IValues</span>, and creating a props interface in the <span class="s22">ContactUs </span>component for the <span class="s22">onSubmit </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 110%;text-align: left;">import { Form, <span class="s21">ISubmitResult, IValues, </span>minLength, required } from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IProps {</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><a name="bookmark643">}</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const ContactUs: React.SFC<span class="s21">&lt;IProps&gt; </span>= <span class="s21">props </span>=&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Create a <span class="s22">handleSubmit </span>function that will invoke the <span class="s22">onSubmit </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 106%;text-align: left;">const handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; {</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 106%;text-align: left;">const result = await props.onSubmit(values); return result;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return ( ... );</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The <span class="s22">onSubmit </span>prop is asynchronous, so we need to prefix our function with</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">async <span class="p">and prefix the </span>onSubmit <span class="p">call with </span>await<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Bind this submit handler in the form <span class="s22">onSubmit </span>prop in the JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Form ... <span class="s21">onSubmit={handleSubmit}</span>&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/Form&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 8pt;text-indent: 0pt;text-align: center;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. Let&#39;s move on to the <span class="s22">ContactUsPage </span>component now. Let&#39;s start by creating the submit handler:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">private handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">await wait(1000); // simulate asynchronous web API call return {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">errors: {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">email: [&quot;Some is wrong with this&quot;]</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">success: false</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">In practice, this will probably call a web API. In our example, we wait asynchronously for one second and return a validation error with the <span class="s22">email </span>field.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s create the <span class="s22">wait </span>function we just referenced:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const wait = (ms: number): Promise&lt;void&gt; =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">return new Promise(resolve =&gt; setTimeout(resolve, ms));</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s wire up the <span class="s22">handleSubmit </span>method to the <span class="s22">ContactUs onSubmit </span>prop now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;ContactUs <span class="s21">onSubmit={this.handleSubmit} </span>/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We have referenced <span class="s22">IValues </span>and <span class="s22">ISubmitResult</span>, so let&#39;s import these:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import { ISubmitResult, IValues } from &quot;./Form&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="345" height="309" alt="image" src="Image_385.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="397" height="365" alt="image" src="Image_386.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we go to the <b>Contact Us </b>page in the running app, fill out the form, and click the <b>Submit </b>button, we are informed that there is a problem with the email field, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark644">8. Let&#39;s change the submit handler in </a><span class="s22">ContactUsPage </span>to return a successful result:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">private handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">await wait(1000); // simulate asynchronous web API call</p><p class="s21" style="padding-top: 1pt;padding-left: 74pt;text-indent: 5pt;line-height: 106%;text-align: left;">return { success: true</p><p class="s21" style="padding-left: 74pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Now, if we go to the <b>Contact Us </b>page in the running app again, fill out the form, and click the <b>Submit </b>button, the submission goes through fine and the <b>Submit </b>button is disabled:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="316" height="272" alt="image" src="Image_387.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="363" height="320" alt="image" src="Image_388.png"/></span></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">So, that&#39;s our <b>Contact Us </b>page complete, together with our generic <span class="s22">Form </span>and <span class="s22">Field</span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">components.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part238.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part240.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
