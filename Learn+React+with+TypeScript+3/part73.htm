<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Configuring compilation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part72.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part74.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">Configuring compilation</a><a name="bookmark150">&zwnj;</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We need to compile our TypeScript code before it can be executed in a browser. We do this by running the TypeScript compiler, <span class="s22">tsc</span>, on the files we want to compile. TypeScript is very popular and is used in many different situations:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_096.png"/></span></p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">It is often introduced into large existing JavaScript code bases It comes by default in an Angular project</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_098.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">It is often used to add strong types to a React project It can even be used in Node.js projects</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">All these situations involve slightly different requirements for the TypeScript compiler. So, the compiler gives us lots of different options to hopefully meet the requirements of our particular situation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s give this a try by opening Visual Studio Code in a new folder and creating a new file, called <span class="s22">orderDetail.ts</span>, with the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">export interface Product { name: string;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">unitPrice: number;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">export class OrderDetail { product: Product; quantity: number;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;"><a name="bookmark151">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</a></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We can open a <b>Terminal </b>in Visual Studio Code by going to the <b>View </b>menu and choosing <b>Terminal</b>. Let&#39;s enter the following command in the <b>Terminal</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">tsc orderDetail</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. Hopefully, no errors should be output from the compiler and it should generate a file called <span class="s22">orderDetail.js</span>, containing the following transpiled JavaScript:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&quot;use strict&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">exports.<u> </u>esModule = true;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -21pt;line-height: 120%;text-align: left;">var OrderDetail = (function () { function OrderDetail() {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -21pt;line-height: 120%;text-align: left;">OrderDetail.prototype.getTotal = function (discount) { var priceWithoutDiscount = this.product.unitPrice *</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">this.quantity;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;line-height: 120%;text-align: left;">var discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">return OrderDetail;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}());</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">exports.OrderDetail = OrderDetail;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark47">We&#39;ll continue to use </a><span class="s22">orderDetail.ts </span>in the following sections as we explore how the compiler can be configured.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part74.htm">Common options</a><a class="toc1" href="part75.htm">--target</a><a class="toc1" href="part76.htm">--outDir</a><a class="toc1" href="part77.htm">--module</a><a class="toc1" href="part78.htm">--allowJS</a><a class="toc1" href="part79.htm">--watch</a><a class="toc1" href="part80.htm">--noImplicitAny</a><a class="toc1" href="part81.htm">--noImplicitReturns</a><a class="toc1" href="part82.htm">--sourceMap</a><a class="toc1" href="part83.htm">--moduleResolution</a><a class="toc0" href="part84.htm">tsconfig.json</a><a class="toc1" href="part85.htm">Specifying files for compilation</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part72.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part74.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
