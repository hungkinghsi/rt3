<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>React Redux</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part242.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part244.htm">Next &gt;</a></p><p class="s8" style="padding-top: 4pt;padding-left: 258pt;text-indent: 0pt;text-align: left;"><a name="bookmark648">React Redux</a><a name="bookmark672">&zwnj;</a><a name="bookmark673">&zwnj;</a></p><p style="padding-top: 23pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">So far in this book, we have managed state within our React components. We&#39;ve also used React context when state needs to be shared between different components. This approach works well for many applications. React Redux helps us to robustly handle complex</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">state scenarios. It shines when user interactions result in several changes to state, perhaps some that are conditional, and particularly when the interaction results in web service calls. It&#39;s also great when there is lots of shared state across the application.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We are going to continue building our React shop in this chapter, adding React Redux to help us manage our state interactions. We&#39;ll eventually add a basket summary component in the header of our shop, which informs the user of how many items are in their basket. Redux will help us update this component when items are added to the basket.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In the final section of the chapter, we&#39;ll explorer a Redux-like method for managing complex state within a component. This is a middle ground between managing state in a Redux store and just within a component using <span class="s22">setState </span>or <span class="s22">useState</span>.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -48pt;text-align: left;">In this chapter, we&#39;ll learn the following topics:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_391.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_392.png"/></span></p><p style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Principles and key concepts Installing Redux</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_393.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_394.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_395.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Creating reducers Creating actions Creating a store</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_396.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_397.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Connecting our React App to the store Managing state with useReducer</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part244.htm">Technical requirements</a><a class="toc0" href="part245.htm">Principles and key concepts</a><a class="toc1" href="part246.htm">Principles</a><a class="toc1" href="part247.htm">Key concepts</a><a class="toc0" href="part248.htm">Installing Redux</a><a class="toc0" href="part249.htm">Creating actions</a><a class="toc1" href="part250.htm">Creating state and action types</a><a class="toc1" href="part251.htm">Creating actions</a><a class="toc0" href="part252.htm">Creating reducers</a><a class="toc0" href="part253.htm">Creating a store</a><a class="toc0" href="part254.htm">Connecting our React app to the store</a><a class="toc1" href="part255.htm">Adding the store Provider component</a><a class="toc1" href="part256.htm">Connecting components to the store</a><a class="toc2" href="part257.htm">Connecting ProductsPage to the store</a><a class="toc2" href="part258.htm">Connecting ProductsPage to the loading store state</a><a class="toc2" href="part259.htm">Adding product state and actions to the store</a><a class="toc2" href="part260.htm">Adding basket state and actions to the store</a><a class="toc2" href="part261.htm">Connecting ProductPage to the store</a><a class="toc2" href="part262.htm">Creating and connecting BasketSummary to the store</a><a class="toc0" href="part263.htm">Managing state with useReducer</a><a class="toc0" href="part264.htm">Summary</a><a class="toc0" href="part265.htm">Questions</a><a class="toc0" href="part266.htm">Further reading</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part242.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part244.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
