<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>JavaScript rest and spread syntax</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part97.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part99.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark214">JavaScript rest and spread syntax</a></h4><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_119.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">A <span class="s22">rest </span>parameter has nothing to do with <b>Representational state transfer protocol </b>(<b>REST</b>).</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In JavaScript, a <span class="s22">rest </span>parameter collects multiple arguments and condenses them into a single argument. It is called <span class="s22">rest </span>because it collects the <span class="s22">rest </span>of the arguments into a single argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark215">This syntax was introduced in ES6 and allows us to nicely implement functions that have an indefinite number of parameters.</a></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;line-height: 157%;text-align: left;">We define a <span class="s22">rest </span>parameter with three dots preceding the parameter name. Let&#39;s go through a quick example:</p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s create a <span class="s22">logScores </span>function that takes in a <span class="s22">scores rest </span>parameter that just outputs the parameter to the console:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScores(...scores) { console.log(scores);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_120.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This is pure JavaScript - we&#39;ll introduce types to <span class="s22">rest </span>parameters when we look at the new features in TypeScript 3.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We can call <span class="s22">logScores </span>as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">logScores(50, 85, 75);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If we run this, we&#39;ll get an array of the three elements we passed in as parameters output to the console. So, our <span class="s22">scores </span>parameter has collected all the arguments into an array.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">spread </span>syntax is the opposite of <span class="s22">rest </span>parameters. It allows an iterable, such as <span class="s22">array</span>, to be expanded into function arguments.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s look at an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s redefine our <span class="s22">logScore </span>function with specific parameters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScore(score1, score2, score3) { console.log(score1, score2, score3);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">Note that this is still pure JavaScript <span class="s23">â€“ </span>no types just yet!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s define a <span class="s22">scores </span>array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const scores = [75, 65, 80];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark216">3. Finally, let&#39;s use the </a><span class="s22">spread </span>syntax to pass our <span class="s22">scores </span>variable into our <span class="s22">logScore </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">logScore(...scores);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">If you are using the TypeScript playground, you&#39;ll get the compilation</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">error, <span class="s22">expected 3 arguments, but got 0 or more</span>. The program still runs though, because this is perfectly valid JavaScript. <span class="s22">75, 65, 80 </span>will be output to the console if we do run it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark189">In the following sections, we&#39;ll see how the new features in TypeScript 3 help us help the compiler to better understand what we are trying to do when using </a><span class="s22">rest </span>and <span class="s22">spread</span>. This will allow us to resolve the compilation errors seen in the preceding example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part97.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part99.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
