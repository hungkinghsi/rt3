<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Sharing state with React context</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part227.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part229.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark571">Sharing state with React context</a><a name="bookmark610">&zwnj;</a><a name="bookmark611">&zwnj;</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The state for field values lives in the <span class="s22">Form </span>component. However, the values are rendered and changed with the <span class="s22">Field </span>component. The <span class="s22">Field </span>component doesn&#39;t have access to the state within <span class="s22">Form</span>, because the state lives in the <span class="s22">Form </span>instance and <span class="s22">Field </span>doesn&#39;t.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">This is very similar to the compound <span class="s22">Tabs </span>component we implemented in the last chapter. We shared state between the components in the <span class="s22">Tabs </span>compound using React context.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We are going to use the same approach for our <span class="s22">Forms </span>component in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s start by creating an interface for the form context in <span class="s22">Form.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IFormContext { values: IValues;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">The context just contains values that have the same type, <span class="s22">IValues</span>, as in our state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Let&#39;s create the context component now just under <span class="s22">IFormContext </span>using</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">React.createContext<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const FormContext = React.createContext&lt;IFormContext&gt;({ values: {}</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We keep the TypeScript compiler happy by setting the initial context value to an empty literal value.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. In the <span class="s22">render </span>method in <span class="s22">Form</span>, create the context value containing the values from the state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">const context: IFormContext = { values: this.state.values</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return ( ... )</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Wrap the context provider around the <span class="s22">form </span>tag in the <span class="s22">render </span>method&#39;s JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;FormContext.Provider value={context}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;form ... &gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/form&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/FormContext.Provider&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark612">5. We can now consume the context in the </a><span class="s22">Field </span>SFC:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;FormContext.Consumer&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">{context =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/FormContext.Consumer&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Now that we have access to the context, let&#39;s render the values from it in all three editors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor={name}&gt;{label}&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">{(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;input type={type.toLowerCase()} id={name}</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">value={context.values[name]} <span class="s12">/&gt;</span></p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">{type === &quot;TextArea&quot; &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;textarea id={name} <span class="s21">value={context.values[name]} </span>/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">{type === &quot;Select&quot; &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;select <span class="s21">value={context.values[name]}</span>&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The TypeScript compiler is now happy with our <span class="s22">Form </span>and <span class="s22">Field </span>components. So, we could start work on the new <span class="s22">ContactUs </span>implementation.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">However, users will not be able to enter anything into our form yet, because we are not handling changes and passing new values to state. We now need to implement change handlers.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Let&#39;s start by creating a <span class="s22">setValue </span>method in the <span class="s22">Form </span>class:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">private setValue = (fieldName: string, value: any) =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">const newValues = { ...this.state.values, [fieldName]: value }; this.setState({ values: newValues });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Here are the key points in this method:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_364.png"/></span></p><p style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">This method takes in the field name and new value as parameters.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_365.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The new state for the <span class="s22">values </span>object is created using a new object called <span class="s22">newValues</span>, which spreads the old values from the state and then adds the new field name and value.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_366.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The new values are then set in the state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: center;">8.  We then create a reference to this method in the form context so that the <span class="s22">Field</span></p><p style="padding-left: 39pt;text-indent: 0pt;line-height: 14pt;text-align: center;">component can access it. Let&#39;s add this to the form context interface first:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IFormContext { values: IValues;</p><p class="s21" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: center;">setValue?: (fieldName: string, value: any) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We set the property as optional to keep the TypeScript compiler happy when the form context component is created.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">9. We can then create a reference to the <span class="s22">setValue </span>method in <span class="s22">Form </span>when the context value is created:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 112%;text-align: left;">const context: IFormContext = { <span class="s21">setValue: this.setValue, </span>values: this.state.values</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">10. We now have access to invoke this method from the <span class="s22">Field </span>component. In <span class="s22">Field</span>, just after we destructure the <span class="s22">props </span>object, let&#39;s create a change handler that will invoke the <span class="s22">setValue </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const { name, label, type, options } = props;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleChange = ( e:</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">| React.ChangeEvent&lt;HTMLInputElement&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">| React.ChangeEvent&lt;HTMLTextAreaElement&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 10pt;line-height: 106%;text-align: left;">| React.ChangeEvent&lt;HTMLSelectElement&gt;, context: IFormContext</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">) =&gt; {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">if (context.setValue) {</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">context.setValue(props.name, e.currentTarget.value);</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark613">Let&#39;s look at the key points in this method:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_367.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The TypeScript change event type is <span class="s22">ChangeEvent&lt;T&gt;</span>, where <span class="s22">T </span>is the type of the element that is being handled.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_368.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The handler&#39;s first parameter, <span class="s22">e</span>, is the React change event handler parameter. We union all the different change handler types for our different editors, so that we can handle all changes in a single function.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_369.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The handler&#39;s second parameter is the form context.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_370.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We need a conditional statement to check that the <span class="s22">setValue </span>method is not</p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">undefined<span class="p">, to keep the TypeScript compiler happy.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_371.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We can then call the <span class="s22">setValue </span>method with the field name and new value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">11. We can then reference this change handler in the <span class="s22">input </span>tag, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">type={type.toLowerCase()} id={name} value={context.values[name]}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Note that we use a lamda function so that we can pass in the context value to</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">handleChange<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">12. We can do the same in the <span class="s22">textarea </span>tag:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;textarea id={name}</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">value={context.values[name]}</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">13. We can also do this in the <span class="s22">select </span>tag:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">&lt;select value={context.values[name]}</p><p class="s21" style="padding-left: 74pt;text-indent: 0pt;line-height: 10pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">So, our <span class="s22">Form </span>and <span class="s22">Field </span>components are now nicely working together, rendering fields and managing their values. In the next section, we&#39;ll give our generic components a try by implementing a new <span class="s22">ContactUs </span>component.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part227.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part229.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
