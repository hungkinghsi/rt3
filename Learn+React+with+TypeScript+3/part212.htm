<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using children prop for tab content</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part211.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part213.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark511">Using children prop for tab content</a><a name="bookmark547">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The finish line is in sight now for our <span class="s22">Tab </span>component. The final task is to allow consumers to render tab content. We&#39;ll use the <span class="s22">children </span>prop to do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Firstly, in <span class="s22">Tabs.tsx</span>, let&#39;s change the <span class="s22">handleTabClick </span>property in our context interface to include the content to render:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ITabsContext { activeName: string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 110%;text-align: left;">handleTabClick?: (name: string<span class="s21">, content: React.ReactNode</span>) =&gt; void;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We are also going to hold the active content in state along with the active tab name. So, let&#39;s add this to the state interface for <span class="s22">Tabs</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IState { activeName: string;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">activeContent: React.ReactNode;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Let&#39;s now change the tab click handler in <span class="s22">Tabs </span>to set the state for the active content along with the active tab name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">private handleTabClick = (name: string, <span class="s21">content: React.ReactNode</span>)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">this.setState({ activeName: name, <span class="s21">activeContent: content </span>});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. In the <span class="s22">Tab </span>component, let&#39;s call the tab click handler with the additional parameter for the tab content by passing the <span class="s22">children </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleTabClick = (e: React.MouseEvent&lt;HTMLLIElement&gt;) =&gt; { if (context.handleTabClick) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">context.handleTabClick(props.name, <span class="s21">props.children</span>);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Now let&#39;s render the active content from our state in the <span class="s22">Tabs render </span>method under where we render the tab headings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;TabsContext.Provider ...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;tabs&quot;&gt;{this.props.children}&lt;/ul&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div&gt;{this.state &amp;&amp; this.state.activeContent}&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/TabsContext.Provider&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s change how we consume the <span class="s22">Tabs </span>component in the <span class="s22">Product </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;{product.name}&lt;/h1&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Tabs&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;Tabs.Tab name=&quot;Description&quot; initialActive={true}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">heading={() =&gt; &lt;b&gt;Description&lt;/b&gt;}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{product.description}&lt;/p&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/Tabs.Tab&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 30pt;text-indent: 0pt;text-align: center;">&lt;Tabs.Tab name=&quot;Reviews&quot; heading={() =&gt; &quot;Reviews&quot;}&gt;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;ul className=&quot;product-reviews&quot;&gt;</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">{product.reviews.map(review =&gt; (</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;li key={review.reviewer}&gt;</p><p class="s21" style="padding-left: 72pt;text-indent: 0pt;text-align: center;">&lt;i&gt;&quot;{review.comment}&quot;&lt;/i&gt; - {review.reviewer}</p><p class="s21" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/li&gt;</p><p class="s21" style="text-indent: 0pt;text-align: right;">))}</p><p class="s21" style="text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/Tabs.Tab&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Tabs&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;p className=&quot;product-price&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/p&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The tab content is now nested within each <span class="s22">Tab </span>component exactly how we wanted.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Let&#39;s give this a try. If we go to the product page we notice an issue:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><span><img width="435" height="306" alt="image" src="Image_325.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark548">The content isn&#39;t being rendered when the page first loads. If we click on the</a></p><p class="s9" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Reviews <span class="p">tab or the </span>Description <span class="p">tab, the content then loads.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">7. The problem is that we don&#39;t have any code to render the content when the tabs initially load. So, let&#39;s resolve this in the <span class="s22">Tab </span>component by adding the highlighted lines:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public static Tab: React.SFC&lt;ITabProps&gt; = props =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;TabsContext.Consumer&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">{(context: ITabsContext) =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 84pt;text-indent: -5pt;line-height: 106%;text-align: left;">if (!context.activeName &amp;&amp; props.initialActive) { if (context.handleTabClick) {</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 106%;text-align: left;">context.handleTabClick(props.name, props.children); return null;</p><p class="s21" style="padding-left: 84pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">const activeName = context.activeName</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">? context.activeName</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">: props.initialActive</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">? props.name</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">: &quot;&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;/TabsContext.Consumer&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The highlighted lines invoke the tab click handler if there is no active tab in the context and the tab is flagged as initially active. In this case, we return null because invoking the tab click will set the state for the active tab, which will cause another rendering cycle.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our tabs component should now be complete. Let&#39;s check by going to the product page:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="470" height="245" alt="image" src="Image_326.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The content renders as we expect. If we click on the <b>Reviews </b>tab, this renders fine as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="458" height="310" alt="image" src="Image_327.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark549">So, the render props and children props patterns are great for allowing consumers to render custom content. The syntax may look a little tricky at first, but when you understand it, it makes perfect sense and is really elegant.</a></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark512">In the next section, we&#39;ll look at the final pattern in this chapter.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part211.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part213.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
