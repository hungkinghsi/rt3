<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Open-ended tuples</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part98.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part100.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark217">Open-ended tuples</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">Before TypeScript 3, tuples had to have a fixed amount of elements. TypeScript 3 gives us a little more flexibility with <span class="s22">rest </span>elements. <span class="s22">rest </span>elements are similar to <span class="s22">rest </span>parameters, described in the last section, but they work with tuple element types. A <span class="s22">rest </span>element allows us to define an open-ended tuple.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Time to go through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. In the TypeScript playground, let&#39;s create a tuple with the first element being a string and subsequent elements being numbers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">type Scores = [string, <span class="s21">...number[]</span>];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We should be able to use this structure to store someone&#39;s name with an infinite amount of scores. Let&#39;s give this a go for <span class="s22">Billy </span>and three scores:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const billyScores: Scores = [&quot;Billy&quot;, 60, 70, 75];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s move on to try <span class="s22">Sally </span>and four scores:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const sallyScores: Scores = [&quot;Sally&quot;, 60, 70, 75, 70];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Both these variables compile fine, as we would expect, because we have defined the numbers as open-ended.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part98.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part100.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
