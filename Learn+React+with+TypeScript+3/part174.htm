<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Query parameters</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part173.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part175.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark392">Query parameters</a><a name="bookmark425">&zwnj;</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">A query parameter is part of the URL that allows additional parameters to be passed into a path. For example, <span class="s22">&quot;/products?search=redux&quot; </span>has a query parameter called <span class="s22">search </span>with a <span class="s22">redux </span>value.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s implement this example and allow the users of the shop to search for a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by adding a variable in the state in <span class="s22">ProductsPage.tsx </span>called <span class="s22">search</span>, which is going to hold the search criteria:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">interface IState { products: IProduct[]; <span class="s21">search: string;</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Given that we need to access the URL, we need to use <span class="s22">RouteComponentProps </span>as the props type in <span class="s22">ProductsPage</span>. Let&#39;s first import this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import { RouteComponentProps } from &quot;react-router-dom&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We can then use this as the <span class="s22">props </span>type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">class ProductsPage extends React.Component&lt;<span class="s21">RouteComponentProps</span>, IState&gt; {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. We can initialize the <span class="s22">search </span>state to an empty string in <span class="s22">constructor</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 101pt;text-indent: -10pt;line-height: 110%;text-align: left;">public constructor(props: <span class="s21">RouteComponentProps</span>) { super(props);</p><p class="s12" style="padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">this.state = { products: [],</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">search: &quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 92%;text-align: left;">5. We then need to set the <span class="s22">search </span>state in <span class="s22">componentDidMount </span>to the search query parameter. React Router gives us access to all the query parameters in <span class="s22">location.search </span>within the <span class="s22">props </span>argument that it passes into the component. We then need to parse that string to get our search query string parameter. We can use the <span class="s22">URLSearchParams </span>JavaScript function to do this. We are going to use the static <span class="s22">getDerivedStateFromProps </span>life cycle method to do this, which is called when the component loads and when its <span class="s22">props </span>parameters change:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">public static getDerivedStateFromProps( props: RouteComponentProps,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">state: IState</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">) {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 10pt;line-height: 120%;text-align: left;">const searchParams = new URLSearchParams(props.location.search);</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">const search = searchParams.get(&quot;search&quot;) || &quot;&quot;; return {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">products: state.products, search</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. Unfortunately, <span class="s22">URLSearchParams </span>hasn&#39;t been implemented yet in all browsers, so we can use a polyfill called <span class="s22">url-search-params-polyfill</span>. Let&#39;s install this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">npm install url-search-params-polyfill</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Let&#39;s import this into <span class="s22">ProductPages.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">import &quot;url-search-params-polyfill&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">8. We then can use the <span class="s22">search </span>state in the <span class="s22">render </span>method by wrapping an <span class="s22">if </span>statement around the returned list item to only return something when the value of <span class="s22">search </span>is contained within the product name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;product-list&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{this.state.products.map(product =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">if (</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: left;">!this.state.search || (this.state.search &amp;&amp;</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;line-height: 10pt;text-align: left;">product.name</p><p class="s21" style="padding-left: 145pt;text-indent: 0pt;text-align: left;">.toLowerCase()</p><p class="s21" style="padding-left: 145pt;text-indent: 0pt;text-align: left;">.indexOf(this.state.search.toLowerCase()) &gt; -1)</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">) {</p><p class="s12" style="padding-top: 1pt;padding-left: 20pt;text-indent: 0pt;text-align: center;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 121pt;text-indent: 0pt;text-align: center;">&lt;li key={product.id} className=&quot;product-list-item&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 132pt;text-indent: 0pt;text-align: center;">&lt;Link to={`/products/${product.id}`}&gt;{product.name}</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/Link&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 25pt;text-indent: 0pt;text-align: center;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">);</p><p class="s21" style="padding-top: 1pt;padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">} else { return null;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">})}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">9. If we enter <span class="s22">&quot;/products?search=redux&quot; </span>as the path in our running app, we will see our products list containing only <b>React Redux</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="238" alt="image" src="Image_243.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: justify;"><a name="bookmark426">10. We are going to finish implementing this feature by adding a search input in our app header that sets the search query parameter. Let&#39;s start this by creating some state in the </a><span class="s22">Header </span>component for the search value in <span class="s22">Header.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">const [search, setSearch] = React.useState(&quot;&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">11. We are also going to need to access the query string via React Router and <span class="s22">URLSearchParams</span>, so let&#39;s import <span class="s22">RouteComponentProps</span>, <span class="s22">withRouter</span>, and the <span class="s22">URLSearchParams </span>polyfill:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">import { NavLink, <span class="s21">RouteComponentProps, withRouter</span>} from &quot;react- router-dom&quot;;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">import &quot;url-search-params-polyfill&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;">12. Let&#39;s add a <span class="s22">props </span>parameter to our <span class="s22">Header </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const Header: React.SFC<span class="s21">&lt;RouteComponentProps&gt; </span>= <span class="s21">props </span>=&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">13. We can now get the search value from the path query string and set the <span class="s22">search</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">state to this when the component first renders:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const [search, setSearch] = React.useState(&quot;&quot;);</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">React.useEffect(() =&gt; { const searchParams = new</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">URLSearchParams(props.location.search); setSearch(searchParams.get(&quot;search&quot;) || &quot;&quot;);</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">14. Let&#39;s now add a <span class="s22">search </span>input in the <span class="s22">render </span>method for the user to enter their search:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;header className=&quot;header&quot;&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;search-container&quot;&gt;</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s21" style="padding-left: 145pt;text-indent: 0pt;line-height: 106%;text-align: left;">type=&quot;search&quot; placeholder=&quot;search&quot; value={search} onChange={handleSearchChange} onKeyDown={handleSearchKeydown}</p><p class="s21" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: center;">/&gt;</p><p class="s21" style="padding-left: 9pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;img src={logo} className=&quot;header-logo&quot; alt=&quot;logo&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;h1 className=&quot;header-title&quot;&gt;React Shop&lt;/h1&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;nav&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/nav&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/header&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">15. Let&#39;s add the <span class="s22">search-container </span>CSS class that we just referenced to</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">index.css<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.search-container { text-align: right; margin-bottom: -25px;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">16. Back in <span class="s22">Header.tsx</span>, let&#39;s add the <span class="s22">handleSearchChange </span>method, which is referenced in the <span class="s22">render </span>method and will keep our <span class="s22">search </span>state up to date with the value being entered:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleSearchChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">setSearch(e.currentTarget.value);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">17. We can now implement the <span class="s22">handleSearchKeydown </span>method, which is referenced in the <span class="s22">render </span>method. This needs to add the <span class="s22">search </span>state value to the path query string when the <span class="s22">Enter </span>key is pressed. We can leverage the <span class="s22">push </span>method in the <span class="s22">history </span>prop that <span class="s22">RouteComponentProps </span>gives us:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleSearchKeydown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (e.key === &quot;Enter&quot;) { props.history.push(`/products?search=${search}`);</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">18. We need to export the <span class="s22">Header </span>component wrapped with the <span class="s22">withRouter </span>higher order component in order for the reference to <span class="s22">this.props.history </span>to work. So, let&#39;s do this and adjust our <span class="s22">export </span>expression:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">export default <span class="s21">withRouter(</span>Header<span class="s21">)</span>;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;"><a name="bookmark427">19. Let&#39;s give this a try in the running app. If we enter </a><span class="s22">redux </span>in the search input and press the <i>Enter </i>key, the app should navigate to the <b>Products </b>page and filter the products to <b>React Redux</b>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="209" alt="image" src="Image_244.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part173.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part175.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
