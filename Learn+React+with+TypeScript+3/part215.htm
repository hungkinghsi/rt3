<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Implementing the withLoader HOC</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part214.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part216.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark555">Implementing the withLoader HOC</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;re going to create a loader spinner component called <span class="s22">withLoader </span>that can be used with any component to indicate that the component is busy doing something:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by creating a new file called <span class="s22">withLoader.tsx </span>with the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps { loading: boolean;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const withLoader = &lt;P extends object&gt;( Component: React.ComponentType&lt;P&gt;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">): React.SFC&lt;P &amp; IProps&gt; =&gt; ({ loading, ...props }: IProps) =&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">// TODO - return a loading spinner if loading is true otherwise return the component passed in</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default withLoader;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">There are a few things going on here, so let&#39;s break this down:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_330.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_331.png"/></span></p><p class="s22" style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;line-height: 109%;text-align: left;">withLoader <span class="p">is a function that that takes in a component of type </span>P<span class="p">. </span>withLoader <span class="p">calls a function component.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_332.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark556">The properties for the function component are defined as </a><span class="s22">P &amp; IProps</span>, which is an intersection type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_333.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">An intersection type combines multiple types into one. So <span class="s22">X</span>, and <span class="s22">Y</span>, and <span class="s22">Z </span>combine all the properties and methods of <span class="s22">X</span>, <span class="s22">Y</span>, and <span class="s22">Z </span>together into a new type.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_334.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, the properties for the SFC include all the properties from the component passed in along with a <span class="s22">loading boolean </span>property that we defined.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_335.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The props are destructured into a <span class="s22">loading </span>variable and a <span class="s22">props </span>variable containing all the other properties using a rest parameter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. So, the remaining work we have to do is return our loading spinner if <span class="s22">loading </span>is <span class="s22">true</span>, otherwise we just need to return the component passed in. We can do this using a ternary expression highlighted in the following code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const withLoader = &lt;P extends object&gt;( Component: React.ComponentType&lt;P&gt;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">): React.SFC&lt;P &amp; IProps&gt; =&gt; ({ loading, ...props }: IProps) =&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">loading ? (</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-overlay&quot;&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-circle-wrap&quot;&gt;</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-circle&quot; /&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">) : (</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;Component {...props} /&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The component passed in is returned in the second ternary branch. We use the spread syntax to spread the properties in the <span class="s22">props </span>variable into the component.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The loading spinner is returned in the first ternary branch.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">3. The loading spinner references some CSS classes, so let&#39;s add these into</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">index.css<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.loader-overlay { position: fixed; top: 0;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">left: 0;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">width: 100%;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">height: 100%;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">background-color: Black;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">opacity: 0.3;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">z-index: 10004;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.loader-circle-wrap { position: fixed; top: 0;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">right: 0;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">bottom: 0;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">left: 0; height: 100px; width: 100px; margin: auto;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.loader-circle {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">border: 4px solid #ffffff; border-top: 4px solid #899091; border-radius: 50%;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">width: 100px; height: 100px;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">animation: loader-circle-spin 0.7s linear infinite;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The <span class="s22">loader-overlay </span>class creates a black see-through overlay over the whole page. The <span class="s22">loader-circle-wrap </span>class creates a <span class="s22">100px </span>by <span class="s22">100px </span>square in the center of the overlay. The <span class="s22">loader-circle </span>class creates the spinning circle.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: justify;">Our <span class="s22">withLoader </span>HOC is now complete.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">For reference, a class-based version of <span class="s22">withLoader </span>is shown in the following code block:</p><p class="s12" style="padding-top: 9pt;padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">const withLoader = &lt;P extends object&gt;(Component: React.ComponentType&lt;P&gt;) =&gt; class WithLoader extends React.Component&lt;P &amp; IProps&gt; {</p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s12" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;line-height: 120%;text-align: left;">const { loading, ...props } = this.props as IProps; return loading ? (</p><p class="s12" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-overlay&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-circle-wrap&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;loader-circle&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">) : (</p><p class="s12" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">&lt;Component {...props} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark557">We are going to stick with the SFC version, though, because it doesn&#39;t contain any state or need access to any lifecycle methods.</a></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark515">In the next section, we&#39;ll consume our </a><span class="s22">withLoader </span>component in the product page in our shop app.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part214.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part216.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
