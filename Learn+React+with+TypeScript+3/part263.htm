<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Managing state with useReducer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part262.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part264.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark709">Managing state with useReducer</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;">Redux is great for managing complex state across our app. It is a little heavy though if the state we are managing only exists within a single component. Obviously, we can manage these cases with <span class="s22">setState </span>(for class components) or <span class="s22">useState </span>(for function components). However, what if the state is complex? There may be lots of pieces of state and the state interactions may involve lots of steps with some of them being asynchronous. In this section, we&#39;ll explore an approach for managing these cases with the <span class="s22">useReducer </span>function in React. Our example will be contrived and simple but it will give us an understanding of this approach.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="423" height="174" alt="image" src="Image_440.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="462" height="222" alt="image" src="Image_441.png"/></span></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We are going to add a <b>Like </b>button to the <b>Product </b>page in our React shop. Users will be able to like a product several times. The <span class="s22">Product </span>component will keep track of the number of likes and the date and time of the last like in its state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We&#39;ll start by opening <span class="s22">Product.tsx </span>and creating an interface, before the <span class="s22">Product </span>component, for our state, containing the number of likes and the date of the last like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ILikeState { likes: number; lastLike: Date | null;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We&#39;ll create a variable to hold the initial state, also outside of <span class="s22">Product</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const initialLikeState: ILikeState = { likes: 0,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">lastLike: null</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s now create a type for the action:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">enum LikeActionTypes { LIKE = &quot;LIKE&quot;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface ILikeAction {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">type: LikeActionTypes.LIKE; now: Date;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. We&#39;ll also create a union type containing all the action types. In our example, we only have one action type but let&#39;s do this to understand an approach that scales:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type LikeActions = ILikeAction;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Inside the <span class="s22">Product </span>component, let&#39;s call the <span class="s22">useReducer </span>function in React to get our state and <span class="s22">dispatch </span>function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: -21pt;line-height: 120%;text-align: left;">const [state, dispatch]: [ ILikeState,</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">(action: ILikeAction) =&gt; void</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">] = React.useReducer(reducer, initialLikeState);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Let&#39;s break this down:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_442.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We pass into <span class="s22">useReducer </span>a function called <span class="s22">reducer </span>(which we haven&#39;t created yet).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_443.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">We also pass into <span class="s22">useReducer </span>our initial state.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_444.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">useReducer <span class="p">returns an array containing two elements. The first element is the current state and the second is a </span>dispatch <span class="p">function to invoke an action.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Let&#39;s refactor this line and destructure the state so that we can reference the pieces of state directly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: -21pt;line-height: 110%;text-align: left;">const [<span class="s21">{ likes, lastLike }</span>, dispatch]: [ ILikeState,</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">(action: ILikeAction) =&gt; void</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">] = React.useReducer(reducer, initialLikeState);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. At the bottom of the JSX in the <span class="s22">Product </span>component, let&#39;s add JSX to render how many likes we have and a button to add likes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{!props.inBasket &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;button onClick={handleAddClick}&gt;Add to basket&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;like-container&quot;&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">{likes &gt; 0 &amp;&amp; (</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div&gt;{`I like this x ${likes}, last at ${lastLike}`}&lt;/div&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">)}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;button onClick={handleLikeClick}&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">{likes &gt; 0 ? &quot;Like again&quot; : &quot;Like&quot;}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark710">8. Let&#39;s add the </a><span class="s22">like-container </span>CSS class we have just referenced into <span class="s22">index.css</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.like-container { margin-top: 20px;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.like-container button { margin-top: 5px;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">9. Let&#39;s also implement the click handler on the <b>Like </b>button:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const handleLikeClick = () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">dispatch({ type: LikeActionTypes.LIKE, now: new Date() });</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">10. Our last task is to implement the reducer function outside the <span class="s22">Product</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">component, just under the <span class="s22">LikeActions </span>type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const reducer = (state: ILikeState = initialLikeState, action: LikeActions) =&gt; {</p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;line-height: 120%;text-align: left;">switch (action.type) { case LikeActionTypes.LIKE:</p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">return { ...state, likes: state.likes + 1, lastLike: action.now };</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">return state;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: justify;">If we try this out, we&#39;ll initially see a <b>Like </b>button after we navigate to the <b>Product </b>page. If we click it, the button text turns to <b>Like again </b>and a piece of text appears above it indicating how many likes there are and the last time it was liked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">This implementation feels very similar to implementing actions and reducers in a Redux store but this is all within a component. This is overkill for the example we have just been through but could prove useful where we need to manage lots more pieces of state.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part262.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part264.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
