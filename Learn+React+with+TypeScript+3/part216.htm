<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Consuming the withLoader HOC</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part215.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part217.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark558">Consuming the withLoader HOC</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Consuming a HOC is very simple. We simply wrap the HOC around the component that we want to enhance. The easiest place to do this is in the export statement.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s add the <span class="s22">withLoader </span>HOC we created in the previous section to our product page:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. So, we are going to wrap the <span class="s22">Product </span>component with <span class="s22">withLoader</span>. First, let&#39;s import <span class="s22">withLoader </span>into <span class="s22">Product.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import withLoader from &quot;./withLoader&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Now we can wrap <span class="s22">withLoader </span>around <span class="s22">Product </span>in the export statement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">export default withLoader(Product);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We now get a compilation error in the <span class="s22">ProductPage </span>component because it expects to pass <span class="s22">Product </span>a loading property.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">3. So, let&#39;s pass the loading property from the loading state where we reference</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Product <span class="p">in </span>ProductPage<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 114%;text-align: left;">&lt;Product <span class="s21">loading={this.state.loading} </span>product={product} inBasket={this.state.added}</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">onAddToBasket={this.handleAddClick}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. Whilst still in <span class="s22">ProductPage.tsx</span>, we should revise the condition that renders the <span class="s22">Product </span>component. We now want to render <span class="s22">Product </span>if the product is still being loaded. This will then render the loading spinner:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{product <span class="s21">|| this.state.loading </span>? (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;Product loading={this.state.loading} product={product} inBasket={this.state.added}</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">onAddToBasket={this.handleAddClick}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">) : (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;p&gt;Product not found!&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This gives us another compilation error, though, because the <span class="s22">product </span>property within the <span class="s22">Product </span>component doesn&#39;t expect to be <span class="s22">undefined</span>. However, it will be <span class="s22">undefined </span>when the product is being loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. So, let&#39;s make this property optional in <span class="s22">IProps </span>for the <span class="s22">Product </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 112%;text-align: left;">interface IProps { <span class="s21">product?: IProduct; </span>inBasket: boolean;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">onAddToBasket: () =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This then gives further compilation errors in the JSX in the <span class="s22">Product </span>component where we reference the <span class="s22">product </span>property because it now will be</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">undefined <span class="p">during the loading of the data.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. A simple resolution to this is to render <span class="s22">null </span>if we don&#39;t have a product. The <span class="s22">withLoader </span>HOC that wraps <span class="s22">Product </span>will render a loading spinner in this case, anyway. So, we are just keeping the TypeScript compiler happy here:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleAddClick = () =&gt; { props.onAddToBasket();</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (!product) { return null;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark559">Now that the TypeScript compiler is happy, if we go to the product page in our shop it will display our loading spinner before rendering the product:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="260" alt="image" src="Image_336.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, HOCs are great for enhancing components where the enhancement is something that can be applied to many components. Our loader spinner is a common use case for a HOC. Another very common usage of the HOC pattern is when using React Router. We used the React Router <span class="s22">withRouter </span>HOC previously in this book to access parameters for a path.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part215.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part217.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
