<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Stateful function components</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part155.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part157.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark370">Stateful function components</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We&#39;ve mentioned that function components can have state. In this section, we&#39;ll add state to our function <span class="s22">Confirm </span>component, to force users to click the <b>Cancel </b>button twice before closing it, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. We&#39;ll start by defining and initializing state for the number of times the <b>Cancel</b></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">button is clicked, by adding the highlighted line:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">const Confirm: React.SFC&lt;IProps&gt; = props =&gt; {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">const [cancelClickCount, setCancelClickCount] = React.useState(0);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleOkClick = () =&gt; { props.onOkClick();</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><a name="bookmark371">This line of code looks a little strange, so let&#39;s break it down:</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_196.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_197.png"/></span></p><p class="s22" style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">React.useState <span class="p">is a React function that lets us create state, passing in a default value as a parameter. In our case, we pass it a default value of 0. The </span>useState <span class="p">function returns an array containing two elements:</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_198.png"/></span></p><p style="padding-top: 1pt;padding-left: 98pt;text-indent: 0pt;text-align: left;">The first array element contains the current value of state</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_199.png"/></span></p><p style="padding-top: 1pt;padding-left: 98pt;text-indent: 0pt;line-height: 89%;text-align: left;">The second array element contains a function to set state to a different value</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_200.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: justify;">We destructure the array and store the first array element (the state value) in <span class="s22">cancelClickCount</span>, and the second array element (the function to set state) in <span class="s22">setCancelClickCount</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_201.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The rest of the function now has access to the cancel click count, via the <span class="s22">cancelClickCount </span>variable. The function is also able to increment the cancel click <b>count</b>, via the <span class="s22">setCancelClickCount </span>variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Let&#39;s refactor the <span class="s22">handleCancelClick </span>arrow function to increment <span class="s22">cancelClickCount</span>, and only invoke the <span class="s22">onCancelClick </span>prop if the count has reached <span class="s22">2</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const handleCancelClick = () =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">const newCount = cancelClickCount + 1; setCancelClickCount(newCount);</p><p class="s21" style="padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (newCount &gt;= 2) { props.onCancelClick();</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Now, functions to set the piece of state take in the new state as their parameter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Next, we&#39;ll change the <b>Cancel </b>button caption, to say <b>Really? </b>after the first click:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;button className=&quot;confirm-cancel&quot; onClick={handleCancelClick}&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{cancelClickCount === 0 ? props.cancelCaption : &quot;Really?&quot;}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we access the state value in JSX through the variable we destructured when the state was defined.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we give this a try in the running app, we should find the <b>Cancel </b>button text changes to <b>Really? </b>after the first click, and the confirmation dialog closes after the second click.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">After we&#39;ve got our heads around the code needed to define state, accessing and setting state is fairly simple and elegant.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark291">Let&#39;s continue to the next section, and look into how we can hook into a function component&#39;s life cycle events.</a><a name="bookmark372">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part155.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part157.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
