<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Never</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part46.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part48.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark92">Never</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">never </span>type represents something that would never occur and is typically used to specify unreachable areas of code. Again, this doesn&#39;t exist in JavaScript.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Time for an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Type the following code into the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function foreverTask(taskName: string): never { while (true) {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">console.log(`Doing ${taskName} over and over again ...`);</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="86" alt="image" src="Image_061.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">In the preceding example, we used a JavaScript template literal to construct the string to log to the console. Template literals are enclosed by back-ticks (<span class="s22">``</span>) and can include a JavaScript expression in curly braces prefixed with a dollar sign (<span class="s22">${expression}</span>). Template literals are great when we need to merge static text with variables.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark93">The function invokes an infinite loop and never returns, and so we have given it a type annotation of </a><span class="s22">never</span>. This is different to <span class="s22">void </span>because void means it will return, but with no value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s change the <span class="s22">foreverTask </span>function to break out of the loop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function foreverTask(taskName: string): never { while (true) {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">console.log(`Doing ${taskName} over and over again ...`); break;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The TypeScript compiler quite rightly complains:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="551" height="149" alt="image" src="Image_062.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. Let&#39;s now remove the <span class="s22">break </span>statement and the <span class="s22">never </span>type annotation. If we hover over the <span class="s22">foreverTask </span>function name with our mouse, we see that TypeScript has inferred the type to be <span class="s22">void</span>, which is not what we want in this example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="512" height="115" alt="image" src="Image_063.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark21">The </a><span class="s22">never </span>type is useful in places where the code never returns. However, we will probably need to explicitly define the <span class="s22">never </span>type annotation because the TypeScript compiler isn&#39;t smart enough yet to infer that.<a name="bookmark94">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part46.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part48.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
