<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Implementing the search query</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part322.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part324.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark878">Implementing the search query</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We are now at the point where we need to make the GraphQL query to do the actual search:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s start by creating an interface for the repository data we expect to get back from the query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IRepo { id: string; name: string;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">description: string; viewerHasStarred: boolean; stargazers: {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">totalCount: number;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">issues: { edges: [</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">node: {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 145pt;text-indent: 0pt;line-height: 120%;text-align: left;">id: string; title: string; url: string;</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">];</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is the structure we got back from the GitHub GraphQL Explorer in an earlier section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We are going to need a default value for this state. So, let&#39;s define this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const defaultRepo: IRepo = { id: &quot;&quot;,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">name: &quot;&quot;, description: &quot;&quot;,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">viewerHasStarred: false, stargazers: {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">totalCount: 0</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">issues: { edges: [</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: -10pt;line-height: 120%;text-align: left;">node: { id: &quot;&quot;,</p><p class="s12" style="padding-left: 145pt;text-indent: 0pt;text-align: left;">title: &quot;&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">url: &quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">]</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We can also define an interface for the query result as a whole:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IQueryResult { repository: IRepo;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Now we can create the query itself using a tagged template literal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const GET_REPO = gql`</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">query GetRepo($orgName: String!, $repoName: String!) { repository(owner: $orgName, name: $repoName) {</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;line-height: 120%;text-align: left;">id name</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;line-height: 120%;text-align: left;"><a name="bookmark879">description viewerHasStarred stargazers {</a></p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">totalCount</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">issues(last: 5) { edges {</p><p class="s12" style="padding-left: 155pt;text-indent: -10pt;line-height: 120%;text-align: left;">node { id title url</p><p class="s12" style="padding-left: 155pt;text-indent: 0pt;text-align: left;">publishedAt</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">`;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is the query we made in the GitHub GraphQL Explorer in an earlier section. Unlike our previous queries, this one has parameters that we&#39;ll need to include when we execute the query a little later.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. We need to store the data we get from the query in state. So, let&#39;s create a state variable called <span class="s22">repo</span>, along with a function to set it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 112pt;text-indent: -21pt;line-height: 120%;text-align: left;">const [repo, setRepo]: [ IRepo,</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">(repo: IRepo) =&gt; void</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">] = React.useState(defaultRepo);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">6. We are also going to store any problems with the <span class="s22">search </span>in state as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const [searchError, setSearchError]: [ string,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(searchError: string) =&gt; void</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">] = React.useState(&quot;&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. Let&#39;s update the <span class="s22">handleSearch </span>arrow function to clear any search error state before we do the <span class="s22">search</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; { e.preventDefault();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">setSearchError(&quot;&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s go on and use <span class="s22">ApolloClient </span>passed in as a prop to make the query:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; { e.preventDefault();</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">setSearchError(&quot;&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">props.client</p><p class="s21" style="padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">.query&lt;IQueryResult&gt;({ query: GET_REPO</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">9. There is more work to do here, though. First, we need to pass in the <span class="s22">query </span>parameters for the organization name and repository name from the values we have in our <span class="s22">search </span>state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">.query&lt;IQueryResult&gt;({ query: GET_REPO,</p><p class="s21" style="padding-left: 91pt;text-indent: 10pt;line-height: 106%;text-align: left;">variables: { orgName: search.orgName, repoName: search.repoName }</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">})</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">10. Now it&#39;s time to handle the response in the <span class="s22">then </span>method and set the <span class="s22">repo </span>state to the data in the response:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">props.client</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.query&lt;IQueryResult&gt;( ... )</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">.then(response =&gt; { setRepo(response.data.repository);</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">11. We will also handle any errors in the <span class="s22">catch </span>method and update the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">searchError <span class="p">state:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">props.client</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.query&lt;IQueryResult&gt;(...)</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.then(...)</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: left;">.catch(error =&gt; { setSearchError(error.message);</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we try a <span class="s22">search </span>in the running app, the query will be made okay, but we are not showing the results yet. Let&#39;s do that in the next section.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part322.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part324.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
