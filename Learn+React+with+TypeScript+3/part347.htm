<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using a mock function in Jest</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part346.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part348.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark944">Using a mock function in Jest</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">We are going to make another improvement to the test that verified that submitting</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">the <b>Contact Us </b>form without filling in the fields results in errors being displayed on the page. We are going to add an additional check, to make sure the submit handler is not executed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s go back to the first component test we wrote: <span class="s22">ContactUs.test.tsx</span>. We manually created a <span class="s22">handleSubmit </span>function that we referenced in our instance of the <span class="s22">ContactUs </span>component. Let&#39;s change this to a Jest mock function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const handleSubmit = <span class="s21">jest.fn()</span>;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our test will run correctly, as it did before, but this time Jest is mocking the function for us.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. Now that Jest is mocking the submit handler, we can check whether it was called as an additional check at the end of our test. We do this using the <span class="s22">not</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">and <span class="s22">toBeCalled </span>Jest matcher functions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const errorSpans = container.querySelectorAll(&quot;.form-error&quot;); expect(errorSpans.length).toBe(2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">expect(handleSubmit).not.toBeCalled();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is really nice, because we&#39;ve not only simplified our submit handler function, but we&#39;ve also really easily added a check to verify that it hasn&#39;t been called.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Let&#39;s move on to the second test we implemented, which verified that a valid <b>Contact Us </b>form was submitted okay:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We&#39;ll again change the <span class="s22">handleSubmit </span>variable to reference a Jest mock function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const handleSubmit = <span class="s21">jest.fn()</span>;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">2. Let&#39;s verify that the submit handler is called. We do this using</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">the <span class="s22">toBeCalledTimes </span>Jest function to pass in the number of times we expect the function to be called, which is <span class="s22">1 </span>in our case:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const errorsDiv = container.querySelector(&quot;[data- testid=&#39;formErrors&#39;]&quot;); expect(errorsDiv).toBeNull();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">expect(handleSubmit).toBeCalledTimes(1);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">When the test executes, it should still pass.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. There is one other useful check we can do. We know that the submit handler is being called, but does it have the correct arguments? We can use the <span class="s22">toBeCalledWith </span>Jest function to check this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">expect(handleSubmit).toBeCalledTimes(1);</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">expect(handleSubmit).toBeCalledWith({ name: &quot;Carl&quot;,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="mailto:carl.rippon@testmail.com" class="s26" target="_blank">email: </a>&quot;carl.rippon@testmail.com&quot;, reason: &quot;Support&quot;,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">notes: &quot;&quot;</p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">Again, when the test executes, it should still pass.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;"><a name="bookmark911">So, by letting Jest mock our submit handler, we&#39;ve quickly added a few valuable additional checks to our tests.</a><a name="bookmark945">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part346.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part348.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
