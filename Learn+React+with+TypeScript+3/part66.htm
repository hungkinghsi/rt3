<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Property setters and getters</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark137">Property setters and getters</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">Our classes so far have had simple property declarations. However, for more complex scenarios, we can implement a property with a <span class="s22">getter </span>and a <span class="s22">setter</span>. When implementing <span class="s22">getters </span>and <span class="s22">setters</span>, generally, you&#39;ll need a private property to hold the property value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_086.png"/></span></p><p class="s22" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;line-height: 91%;text-align: justify;">getter <span class="p">is a function with the property name and the </span>get <span class="p">keyword at the beginning and no parameters. Generally, this will return the value of the associated private property.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_087.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 91%;text-align: left;">setter <span class="p">is a function with the same name with the </span>set <span class="p">keyword at the beginning and a single parameter for the value. This will set the value of the associated private property.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_088.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The <span class="s22">private </span>property is commonly named the same as the <span class="s22">getter </span>and <span class="s22">setter</span></p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">with an underscore in front.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark138">Let&#39;s take a look at an example:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">1. Let&#39;s create <span class="s22">getters </span>and <span class="s22">setters </span>for the <span class="s22">unitPrice </span>property in our <span class="s22">Product </span>class. The <span class="s22">setter </span>ensures the value is not less than <span class="s22">0</span>. The <span class="s22">getter </span>ensures <span class="s22">null </span>or <span class="s22">undefined </span>is never returned:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Product { name: string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: left;">private _unitPrice: number; get unitPrice(): number {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">return this._unitPrice || 0;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">set unitPrice(value: number) { if (value &lt; 0) {</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">value = 0;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">this._unitPrice = value;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s consume the <span class="s22">Product </span>class and try this out:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const table = new Product(); table.name = &quot;Table&quot;; console.log(table.unitPrice); table.unitPrice = -10; console.log(table.unitPrice);</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark40">If we run this, we should see two </a><b>0</b>&#39;s in the console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
