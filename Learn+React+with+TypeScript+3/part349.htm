<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Getting code coverage</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark949">Getting code coverage</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Code coverage is how we refer to how much of our app code is covered by unit tests. As we write our unit tests, we&#39;ll have a fair idea of what code is covered and what code is not covered, but as the app grows and time passes, we&#39;ll lose track of this.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Jest comes with a great code coverage tool, so we don&#39;t have to keep what is covered in our heads. In this section, we&#39;ll use this to discover the code coverage in the project we worked on in the previous section, where we mocked <span class="s22">axios</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: justify;">1. Our first task is to add an <span class="s22">npm </span>script that will run the tests with the coverage tracking tool switched on. Let&#39;s add a new script called <span class="s22">test-coverage </span>that includes the <span class="s22">--coverage </span>option when <span class="s22">react-scripts </span>is executed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">&quot;scripts&quot;: {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;line-height: 120%;text-align: justify;">&quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test&quot;,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&quot;test-coverage&quot;: &quot;react-scripts test --coverage&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&quot;eject&quot;: &quot;react-scripts eject&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">},</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We can then run this command in the terminal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">npm run test-coverage</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="531" height="218" alt="image" src="Image_592.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="545" height="234" alt="image" src="Image_593.png"/></span></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">After a few seconds, Jest will render some nice high-level coverage statistics on each file in the terminal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. If we look in our project file structure, we&#39;ll see that a <span class="s22">coverage </span>folder has been added with a <span class="s22">lcov-report </span>folder within it. There is an <span class="s22">index.html </span>file within the <span class="s22">lcov-report </span>folder that contains more detailed information on the coverage within each file. Let&#39;s open this and have a look:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="155" alt="image" src="Image_594.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;line-height: 152%;text-align: left;">We see the same information as presented in the terminal. What do these four columns of statistics mean?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_595.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Statements </span>column shows how many statements in the code have been executed</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_596.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">Branches </span>column shows how many branches in the conditional statements in the code have been executed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_597.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark950">The </a><span class="s22">Function </span>column shows how many functions in the code have been called</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_598.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 92%;text-align: left;">The <span class="s22">Line </span>column shows how many lines in the code have been executed. Generally, this will be the same as the <span class="s22">Statements </span>figure. However, it can be different if multiple statements have been placed on a single line. For example, the following is counted as a single line, but two statements:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: center;">let name = &quot;Carl&quot;; console.log(name);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. We can drill into each file to find which specific bits of code aren&#39;t covered. Let&#39;s click on the <span class="s22">App.tsx </span>link:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="402" height="383" alt="image" src="Image_599.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">1x </span>with a green background to the left of the lines of code indicates that those lines have been executed by our tests once. The code highlighted in red is code that isn&#39;t covered by our tests.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark913">So, getting coverage statistics and identifying additional tests that we may want to implement is pretty easy. It&#39;s something well worth using to give us confidence that our app is well-tested.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
