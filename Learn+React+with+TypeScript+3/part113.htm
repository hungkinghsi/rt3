<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Default JSX properties</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part112.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part114.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark203">Default JSX properties</a><a name="bookmark245">&zwnj;</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;">TypeScript 3 has also improved how we can set default properties on React components with <span class="s22">--strictNullChecks</span>. Before TypeScript 3, we had to set properties that had default values as optional and perform <span class="s22">null </span>checks when referencing them. We haven&#39;t introduced React yet in this book, so we&#39;ll only touch on this briefly at this point.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s look through an example to get a feel for the improvement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. The following is a React component with some default properties in TypeScript</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">2.9. The component is called <span class="s22">SplitText </span>and it takes in some text, splits it, and renders the bits that have been split in a list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 118%;text-align: left;">interface IProps { text: string; delimiter<span class="s21">?</span>: string;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">class SplitText extends Component&lt;IProps&gt; { static defaultProps = {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">delimiter: &quot;,&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">render() {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;line-height: 110%;text-align: left;">const bits = this.props.text.split(this.props.delimiter<span class="s21">!</span>); return (</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">{bits.map((bit: string) =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: center;">&lt;li key={bit}&gt;{bit}&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">))}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const App = () =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;SplitText text=&quot;Fred,Jane,Bob&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">export default App;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">The component has a <span class="s22">delimiter </span>property that defaults to <span class="s22">&quot;,&quot;</span>. In TypeScript 2.9, we need to make <span class="s22">delimiter </span>an optional property, otherwise we get a compiler error if we don&#39;t specify it in the calling component (even though there is a <span class="s22">default</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Also notice that we need to put a <span class="s22">! </span>after we reference <span class="s22">delimiter </span>in</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">the <span class="s22">bits </span>variable declaration. This is to tell the compiler that this will never be undefined.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Here&#39;s the component that calls <span class="s22">SplitText</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const App = () =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;SplitText text=&quot;Fred,Jane,Bob&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">Here&#39;s what it looks like when rendered:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 88pt;text-indent: 0pt;text-align: left;"><span><img width="347" height="86" alt="image" src="Image_131.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Now, let&#39;s look at the component in TypeScript 3:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps { text: string; delimiter: string;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class SplitText extends React.Component&lt;IProps&gt; { static defaultProps = {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">delimiter: &quot;,&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><a name="bookmark246">render() {</a></p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">const bits = this.props.text.split(this.props.delimiter); return (</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">{bits.map((bit: string) =&gt; (</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;li key={bit}&gt;{bit}&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">))}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that we didn&#39;t need to make the <span class="s22">delimiter </span>property optional. Also notice that we didn&#39;t need to tell the compiler that <span class="s22">this.props.delimiter </span>can&#39;t be undefined.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, in summary, we don&#39;t have to fiddle around to make default properties work nicely in TypeScript 3!</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;"><a href="part117.htm#bookmark297" class="s20" name="bookmark204">This is our first taste of React. Don&#39;t worry if the code examples don&#39;t make much sense at this point. We&#39;ll start to learn about React components in </a><span class="s12">Chapter 3</span>, <i>Getting Started with React and TypeScript</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part112.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part114.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
