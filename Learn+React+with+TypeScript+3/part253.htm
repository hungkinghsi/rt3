<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a store</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part252.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part254.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark691">Creating a store</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this section, we&#39;ll create a store that is going to hold our state and manage the actions and reducer:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start off by creating a new file called <span class="s22">Store.tsx </span>with the following import statement to get the bits and pieces we need from Redux:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { applyMiddleware, combineReducers, createStore, Store } from &quot;redux&quot;;</p><p class="s22" style="padding-top: 7pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">createStore <span class="p">is a function we&#39;ll eventually use to create our store</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_429.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We need the <span class="s22">applyMiddleware </span>function because we need to use the Redux Thunk middleware to manage our asynchronous actions</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_430.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">combineReducers </span>function is a function we can use to merge our reducers together</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_431.png"/></span></p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;text-align: left;">Store <span class="p">is a TypeScript type we can use for the store</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s import <span class="s22">redux-thunk</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import thunk from &quot;redux-thunk&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Finally, let&#39;s import our reducer and state type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { productsReducer } from &quot;./ProductsReducer&quot;; import { IProductsState } from &quot;./ProductsTypes&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. A key part of the store is the state. So, let&#39;s define an interface for this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export interface IApplicationState { products: IProductsState;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">At this point, the interface simply contains our products state.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s put our reducer in the Redux <span class="s22">combineReducer </span>function now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const rootReducer = combineReducers&lt;IApplicationState&gt;({ products: productsReducer</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. With the state and root reducer defined, we can create our store. We are actually going to create a function that creates the store:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default function configureStore(): Store&lt;IApplicationState&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const store = createStore(rootReducer, undefined, applyMiddleware(thunk));</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">return store;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_432.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The function that creates our store is called <span class="s22">configureStore </span>and returns the generic <span class="s22">Store </span>type with our specific store state passed in to it.</p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 92%;text-align: left;">The function uses the Redux <span class="s22">createStore </span>function to create and return the store. We pass in our reducer as well as the Redux Thunk middleware. We pass <span class="s22">undefined </span>as the initial state because our reducer takes care of the initial state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark659">We&#39;ve made a great start on our store. In the next section, we&#39;ll start to connect our React shop to our store.</a><a name="bookmark692">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part252.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part254.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
