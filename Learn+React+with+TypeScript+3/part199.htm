<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark498">Questions</a></h3><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s have a go at some questions on advanced types:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have an <span class="s22">interface </span>that represents a course result, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ICourseMark { courseName: string; grade: string;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We can use this <span class="s22">interface </span>as follows:</p><p class="s12" style="padding-top: 9pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const geography: ICourseMark = { courseName: &quot;Geography&quot;, grade: &quot;B&quot;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The grades can only be A, B, C, or D. How can we create a stronger typed version of the <span class="s22">grade </span>property in this interface?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We have the following functions that validate that numbers and strings are populated with a value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">function isNumberPopulated(field: number): boolean { return field !== null &amp;&amp; field !== undefined;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">function isStringPopulated(field: string): boolean {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return field !== null &amp;&amp; field !== undefined &amp;&amp; field !== &quot;&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">How can we combine these into a single function called <span class="s22">isPopulated </span>with signature overloads?</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. How can we implement a more flexible version of the <span class="s22">isPopulated </span>function with generics?</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">4. We have the follow <span class="s22">type </span>alias of stages:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">type Stages = { pending: &#39;Pending&#39;, started: &#39;Started&#39;,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">completed: &#39;Completed&#39;,</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. How can we programmatically turn this into the <span class="s22">&#39;Pending&#39; | &#39;Started&#39; | &#39;Completed&#39; </span>union type?</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. We have the following union type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type Grade = &#39;gold&#39; | &#39;silver&#39; | &#39;bronze&#39;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">How can we programmatically create the following type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">type GradeMap = { gold: string; silver: string; bronze: string</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
