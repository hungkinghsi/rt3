<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Objects</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part48.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part50.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark98">Objects</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">The object type is shared with JavaScript and represents a non-primitive type. Objects can contain typed properties to hold bits of information.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s work through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. Let&#39;s enter the following code into the TypeScript playground, which creates an object with several properties of information:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">const customer = { name: &quot;Lamps Ltd&quot;, turnover: 2000134, active: true</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we hover over <span class="s22">name</span>, <span class="s22">turnover</span>, and <span class="s22">active</span>, we&#39;ll see that TypeScript has smartly inferred the types to be <span class="s22">string</span>, <span class="s22">number</span>, and <span class="s22">boolean </span>respectively.</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. If we hover over the <span class="s22">customer </span>variable name, we see something interesting:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="117" alt="image" src="Image_066.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark99">3. Rather than the type being </a><span class="s22">object</span>, it is a specific type with <span class="s22">name</span>, <span class="s22">turnover</span>, and <span class="s22">active </span>properties. On the next line, let&#39;s set the <span class="s22">turnover </span>property to some other value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">customer.turnover = 500000;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">As we type the turnover property, IntelliSense provides the properties that are available on the object:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span><img width="564" height="76" alt="image" src="Image_067.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="86" alt="image" src="Image_068.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">We used <span class="s22">const </span>to declare the <span class="s22">customer </span>variable and then was able to change one of its property values later in the program. Shouldn&#39;t this have thrown an error? Well, the customer variable reference hasn&#39;t changed <span class="s23">â€” </span>just some properties within it. So, this is fine with the TypeScript compiler.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. This line of code is perfectly fine, so we don&#39;t get any complaints from the compiler. If we set the <span class="s22">turnover </span>to a value that has an incorrect type, we&#39;ll be warned as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="519" height="125" alt="image" src="Image_069.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark100">5. Now let&#39;s set a property on </a><span class="s22">customer </span>that doesn&#39;t exist yet:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">customer.profit = 10000;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We&#39;ll see that TypeScript complains:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><span><img width="556" height="135" alt="image" src="Image_070.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">This makes sense if we think about it. We&#39;ve declared <span class="s22">customer </span>with <span class="s22">name</span>, <span class="s22">turnover</span>, and <span class="s22">active </span>properties, so setting a <span class="s22">profit </span>property should cause an error. If we wanted a <span class="s22">profit </span>property, we should have declared it in the original declaration.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark23">In summary, the </a><span class="s22">object </span>type is flexible because we get to define any properties we require, but TypeScript will narrow down the type to prevent us incorrectly typing a property name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part48.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part50.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
