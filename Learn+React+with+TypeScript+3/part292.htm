<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic GET request</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part291.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part293.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark739">Basic GET request</a><a name="bookmark789">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ll start off by getting the posts using a basic GET request with <span class="s22">axios</span>, and then rendering them in an unordered list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s open <span class="s22">App.tsx </span>and add an import statement for <span class="s22">axios</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import axios from &quot;axios&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s also create an interface for the posts that will come from JSONPlaceholder:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPost { userId: number; id?: number; title: string; body: string;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We are going to store the posts in state, so let&#39;s add an interface for this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface IState { posts: IPost[];</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class App extends React.Component<span class="s21">&lt;{}, IState&gt; </span>{ ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s then initialize the post-state to an empty array in a constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class App extends React.Component&lt;{}, IState&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">public constructor(props: {}) { super(props);</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">this.state = { posts: []</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">5. When getting data from a REST API, we usually do this in</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">the <span class="s22">componentDidMount </span>life cycle method. So, let&#39;s do this with <span class="s22">axios </span>to get our posts:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public componentDidMount() { axios</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.then(response =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">this.setState({ posts: response.data });</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_492.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use the <span class="s22">get </span>function in <span class="s22">axios </span>to get data, which is a promised-based function like <span class="s22">fetch</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_493.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_494.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">This is a generic function that accepts the response body type as a parameter We pass the URL we are requesting as the parameter to the <span class="s22">get </span>function</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_495.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We can then handle the response in the <span class="s22">then </span>method</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_496.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We get access to the response body via the <span class="s22">data </span>property in the response object that is typed, as per the generic parameter</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">So, straight away this is nicer than <span class="s22">fetch </span>in two ways:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_497.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We can easily type the response</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_498.png"/></span></p><p style="padding-left: 78pt;text-indent: 0pt;text-align: left;">There is one step (rather than two) to get the response body</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">6. Now that we have the posts in the component state, let&#39;s render the posts in the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">render <span class="p">method. Let&#39;s also remove the </span>header <span class="p">tag:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;App&quot;&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;posts&quot;&gt;</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">{this.state.posts.map(post =&gt; (</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">&lt;li key={post.id}&gt;</p><p class="s21" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">&lt;h3&gt;{post.title}&lt;/h3&gt;</p><p class="s21" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{post.body}&lt;/p&gt;</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s21" style="text-indent: 0pt;text-align: right;">))}</p><p class="s21" style="text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We use the <span class="s22">posts </span>array&#39;s <span class="s22">map </span>function to display the posts in an unordered list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. We reference a <span class="s22">posts </span>CSS class, so let&#39;s add this to <span class="s22">index.css</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">.posts {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">list-style: none; margin: 0px auto; width: 800px; text-align: left;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="533" height="197" alt="image" src="Image_499.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="554" height="216" alt="image" src="Image_500.png"/></span></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a name="bookmark790">If we look at the running app, it will now look like the following:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, a basic <span class="s22">GET </span>request with <span class="s22">axios </span>is nice and easy. We need to use the <span class="s22">componentDidMount </span>life cycle method in a class component to make a REST API call that will have data from the response rendered.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark740">How do we handle errors though? We&#39;ll cover this in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part291.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part293.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
