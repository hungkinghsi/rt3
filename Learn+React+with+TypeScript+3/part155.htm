<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a basic function component</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part154.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part156.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark366">Creating a basic function component</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Let&#39;s refactor our <span class="s22">Confirm </span>component to be a function component, in order to learn how to implement these:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Open <span class="s22">Confirm.tsx </span>and replace the class signature with the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">const Confirm: React.SFC&lt;IProps&gt; = (props) =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We define a function component using an arrow function, passing the props type in as a generic parameter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_195.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We&#39;ll learn about generic functions later in the book<span class="s23">â€”</span>so don&#39;t worry if this doesn&#39;t make perfect sense right now.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark367">We use </a><b>stateless functional component </b>(<b>SFC</b>) <span class="s22">React.SFC </span>to represent these type of components.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our component is now throwing several compilation errors. We&#39;ll resolve these in the next steps.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. Function components don&#39;t have render methods. Instead, the function itself returns the JSX that should be rendered. So, let&#39;s change this part of our function by removing the <span class="s22">render </span>signature, and leaving the return statement as it was:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: -10pt;line-height: 120%;text-align: left;">className={ this.props.open</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">? &quot;confirm-wrapper confirm-visible&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">: &quot;confirm-wrapper&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">3. We need to change the event handlers to be arrow function constants, and access props directly rather than through <span class="s22">this</span>. We should also move these handlers above the <span class="s22">return </span>statement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const <span class="s12">handleCancelClick = () =&gt; {</span></p><p class="s21" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">props<span class="s12">.onCancelClick();</span></p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const <span class="s12">handleOkClick = () =&gt; {</span></p><p class="s21" style="padding-left: 96pt;text-indent: 0pt;text-align: left;">props<span class="s12">.onOkClick();</span></p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return ( ... )</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark368">4. We then reference the props and event handlers directly, rather than through</a></p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">this <span class="p">in our JSX:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">className={</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">props<span class="s12">.open</span></p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">? &quot;confirm-wrapper confirm-visible&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">: &quot;confirm-wrapper&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-title-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;span&gt;{<span class="s21">props</span>.title}&lt;/span&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-content-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{<span class="s21">props</span>.content}&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-buttons-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button className=&quot;confirm-cancel&quot; onClick=</p><p class="s12" style="padding-top: 1pt;padding-left: 128pt;text-indent: 0pt;text-align: left;">{<span class="s21">handleCancelClick</span>}&gt;</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">{<span class="s21">props</span>.cancelCaption}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button className=&quot;confirm-ok&quot; onClick={<span class="s21">handleOkClick</span>}&gt;</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">{<span class="s21">props</span>.okCaption}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">5. We also have a problem with the static <span class="s22">defaultProps </span>variable. We move this outside our function, and place it as an object literal under the function, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 114%;text-align: left;">Confirm.defaultProps = <span class="s12">{ cancelCaption: &quot;Cancel&quot;, okCaption: &quot;Okay&quot;</span></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app, all the compilation errors should be resolved, and the app should be working as it was before.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark369">The following code is a template for a function component. Our </a><span class="s22">Confirm </span>component should have a structure similar to this now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 29pt;text-indent: -5pt;line-height: 120%;text-align: left;">const ComponentName: React.SFC&lt;IProps&gt; = props =&gt; { const handler = () =&gt; {</p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">&lt;div&gt;Our JSX&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">ComponentName.defaultProps = {</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">export default ComponentName;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark290">So, function components are an alternative way to create components. In the next section, we&#39;ll look at how to add state to a function component.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part154.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part156.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
