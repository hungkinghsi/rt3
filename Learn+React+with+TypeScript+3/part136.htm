<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Component props</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part135.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part137.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark330">Component props</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">At the moment, the title and content text for our <span class="s22">Confirm </span>component is hardcoded. Let&#39;s change these to reference properties (props) that the component takes in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. First, we need to define a TypeScript type for our props. We&#39;ll use an interface for this preceding the <span class="s22">Confirm </span>class in <span class="s22">Confirm.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps { title: string; content: string;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. We can then reference the <span class="s22">IProps </span>type in angle brackets, after we reference</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">React.Component <span class="p">in the class definition:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="70" alt="image" src="Image_164.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;"><span class="s22">React.Component </span>is what is called a generic class. Generic classes allow types used within the class to be passed in. In our case, we have passed in our <span class="s22">IProps </span>interface. Don&#39;t worry if this doesn&#39;t make too much sense at the moment<span class="s23">â€”</span>we&#39;ll cover generic classes later in the book.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-left: 21pt;text-indent: 0pt;text-align: center;">class Confirm extends React.Component<span class="s21">&lt;IProps&gt;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. We get access to props in our class using <span class="s22">this.props.propName</span>. In our JSX, we can now reference props instead of hardcoding the title and content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-title-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;span&gt;<span class="s21">{this.props.title}</span>&lt;/span&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;confirm-content-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;p&gt;<span class="s21">{this.props.content}</span>&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark331">Note that we now have a TypeScript compilation error when we reference our</a></p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Confirm <span class="p">component in </span>App.tsx<span class="p">. This is because our component now expects </span>title <span class="p">and </span>content <span class="p">attributes, as follows:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="228" alt="image" src="Image_165.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s add the <span class="s22">title </span>and <span class="s22">content </span>attributes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Confirm</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">title=&quot;React and TypeScript&quot;</p><p class="s21" style="padding-left: 91pt;text-indent: 10pt;line-height: 106%;text-align: left;">content=&quot;Are you sure you want to learn React and TypeScript?&quot;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark271">The compilation error now goes away, and if we look at the browser, our component is rendered exactly as it was before we implemented props.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part135.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part137.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
