<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Optional tuple elements</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part102.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part104.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark225">Optional tuple elements</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">The final tuple enhancement in TypeScript 3 is the ability to have optional elements. Optional elements are specified using a <span class="s22">? </span>at the end of the element type.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s look at another example using our scores theme:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s create a type for between one and three scores:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 84pt;text-indent: 0pt;text-align: left;">type Scores = [number, number?, number?];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. So, we should be able to create variables to hold between one and three scores:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const samScores: Scores = [55]; const bobScores: Scores = [95, 75];</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">const jayneScores: Scores = [65, 50, 70];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">As expected, this compiles just fine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. What about four elements? Let&#39;s give this a go:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">const sarahScores: Scores = [95, 50, 75, 75];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">We get a compilation error, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;text-align: left;"><span><img width="509" height="166" alt="image" src="Image_123.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. If we try no elements, we again get a compilation error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">const benScores: Scores = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">When defining optional elements in a tuple, they are restricted to the end of the tuple. Let&#39;s try to define a required element after an optional element:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 25pt;text-indent: 0pt;text-align: center;">type ProblematicScores = [number?, number?, number];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">We get a compilation error, as expected:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="73" alt="image" src="Image_124.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Optional elements also work in a function <span class="s22">rest </span>parameter. Let&#39;s try this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s use our <span class="s22">scores </span>type in our <span class="s22">logScores </span>function we worked with in earlier sections:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">type Scores = [number, number?, number?];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScores(...scores: Scores) { console.log(scores);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;"><a name="bookmark226">2. If we try to pass in two scores, the code will compile just fine, because the last parameter is optional:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">logScores(45, 80);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">3. As expected, if we pass in four scores, we receive <span class="s22">Expected 1-3 arguments, but got 4</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">logScores(45, 70, 80, 65);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">When we have optional parameters, it is likely our function&#39;s implementation will need to know which arguments have been passed. We can use the tuple&#39;s <span class="s22">length </span>property to do this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. Let&#39;s create an enhanced version of our scores logger,</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">called <span class="s22">logScoresEnhanced</span>, which thanks us if we log all <span class="s22">3 </span>scores:</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 22pt;text-align: left;">type Scores = [number, number?, number?]; function logScoresEnhanced(...scores: Scores) {</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;line-height: 8pt;text-align: left;">if (scores.length === 3) {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">console.log(scores, &quot;Thank you for logging all 3 scores&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">} else { console.log(scores);</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Now, let&#39;s call this function with various parameters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">logScoresEnhanced(60, 70, 75);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">logScoresEnhanced(45, 80); logScoresEnhanced(95);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we run the program, we only get thanked after the first call when we pass all three scores.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">All the enhancements to tuples in TypeScript 3 allow us to use the <span class="s22">rest </span>and <span class="s22">spread </span>syntax in a strongly-typed fashion. We&#39;ll make use of this feature later in the book, when we work with React components.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part102.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part104.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
