<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic PUT request</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part285.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part287.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark733">Basic PUT request</a><a name="bookmark780">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">A common way to change data is via a <span class="s22">PUT </span>request. Let&#39;s open up the TypeScript playground and enter the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">fetch(&quot;https://jsonplaceholder.typicode.com/posts/1&quot;, { method: &quot;PUT&quot;,</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">headers: {</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: -10pt;line-height: 120%;text-align: left;">body: JSON.stringify({ title: &quot;Corrected post&quot;,</p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;line-height: 120%;text-align: left;">body: &quot;This is corrected post about ...&quot;, userId: 1</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: -10pt;line-height: 120%;text-align: left;">.then(response =&gt; { console.log(response.status); return response.json();</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">.then(data =&gt; console.log(data));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, the structure of a <span class="s22">fetch </span>call to do an HTTP <span class="s22">PUT </span>is very similar to a <span class="s22">POST </span>request. The only difference is that we specify the <span class="s22">method </span>property in the options object as <span class="s22">PUT</span>.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we run the preceding code, we get <b>200 </b>and the updated <span class="s22">POST </span>object output to the console.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part285.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part287.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
