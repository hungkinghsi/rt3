<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Connecting ProductPage to the store</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part260.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part262.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark666">Connecting ProductPage to the store</a><a name="bookmark705">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this section, we&#39;ll connect the <span class="s22">ProductPage </span>component to our store:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s first import the following into <span class="s22">ProductPage.tsx</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import { connect } from &quot;react-redux&quot;;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { addToBasket } from &quot;./BasketActions&quot;; import { getProduct } from &quot;./ProductsActions&quot;; import { IApplicationState } from &quot;./Store&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We are going to reference the store&#39;s <span class="s22">getProduct </span>now and not the one from <span class="s22">ProductsData.ts</span>. So, let&#39;s remove this from this import so that it looks like the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { IProduct } from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Next, let&#39;s move the state into props:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps extends RouteComponentProps&lt;{ id: string }&gt; { addToBasket: typeof addToBasket;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">getProduct: typeof getProduct; loading: boolean;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">product?: IProduct; added: boolean;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class ProductPage extends React.Component&lt;IProps&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, the <span class="s22">IState </span>interface and the <span class="s22">Props </span>type should be removed after this movement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. We can remove the constructor as we don&#39;t need to initialize any state now. This is all done in the store.</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Let&#39;s change the <span class="s22">componentDidMount </span>life cycle method to call the action creator for getting the product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">if (this.props.match.params.id) {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">const id: number = parseInt(this.props.match.params.id, 10);</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">this.props.getProduct(id);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Notice that we also remove the <span class="s22">async </span>keyword because the method is no longer asynchronous.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. Moving on to the <span class="s22">render </span>function, let&#39;s replace the references to state with references to props:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public render() {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 110%;text-align: left;">const product = this.<span class="s21">props</span>.product; return (</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 32pt;line-height: 110%;text-align: left;">&lt;Prompt when={!this.<span class="s21">props</span>.added} message={this.navAwayMessage}</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">{product || this.<span class="s21">props</span>.loading ? (</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: -10pt;line-height: 113%;text-align: left;">&lt;Product loading={this.<span class="s21">props</span>.loading} product={product} inBasket={this.<span class="s21">props</span>.added}</p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;line-height: 8pt;text-align: left;">onAddToBasket={this.handleAddClick}</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">) : (</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;p&gt;Product not found!&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">7. Let&#39;s look at the click handler now and refactor it to call the action creator for adding to the basket:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleAddClick = () =&gt; { if (this.props.product) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">this.props.addToBasket(this.props.product);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">8. On to the final few steps now in the connection process. Let&#39;s implement the function that maps the action creators from the store into the component props:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const mapDispatchToProps = (dispatch: any) =&gt; { return {</p><p class="s12" style="padding-left: 68pt;text-indent: 21pt;line-height: 120%;text-align: left;">addToBasket: (product: IProduct) =&gt; dispatch(addToBasket(product)),</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">getProduct: (id: number) =&gt; dispatch(getProduct(id))</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">9. Mapping the state to the component props is a little more complex. Let&#39;s start with the simple mappings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const mapStateToProps = (store: IApplicationState) =&gt; { return {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">basketProducts: store.basket.products, loading: store.products.productsLoading,</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">product: store.products.currentProduct || undefined</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Note that we map a null <span class="s22">currentProduct </span>to <span class="s22">undefined</span>.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">10. The remaining prop we need to map to is <span class="s22">added</span>. We need to check whether the current product in the store is in the basket state in order to set this <span class="s22">boolean </span>value. We can use the <span class="s22">some </span>function in the products array for this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const mapStateToProps = (store: IApplicationState) =&gt; { return {</p><p class="s21" style="padding-left: 68pt;text-indent: 21pt;line-height: 106%;text-align: left;">added: store.basket.products.some(p =&gt; store.products.currentProduct ? p.id === store.products.currentProduct.id : false),</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">11. The last step is to use the <span class="s22">connect </span>HOC from React Redux to wire the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">ProductPage <span class="p">component to the store:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export default connect( mapStateToProps, mapDispatchToProps</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">)(ProductPage);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark706">We can now go to the running app, visit the product page, and add it to the basket. The </a><b>Add to basket </b>button should disappear after it is clicked. If we browse to a different product and then come back to a product we&#39;ve already added to the basket, the <b>Add to basket </b>button shouldn&#39;t be present.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark667">So, we now have both the </a><b>Products </b>and <b>Product </b>pages connected to our Redux store. In the next section, we&#39;ll create a basket summary component and connect that to the store.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part260.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part262.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
