<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic classes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part59.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part61.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark123">Basic classes</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Classes have lots of features. So, in this section we&#39;ll look at the basic features of a class. We use the <span class="s22">class </span>keyword followed by the class name, followed by the definition of the class.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s look at this in more depth with the following example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We could use a class to define the <span class="s22">Product </span>type we previously defined as an interface and as a type alias:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Product { name: string; unitPrice: number;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;"><a name="bookmark124">2. We create an instance of our </a><span class="s22">Product </span>class by using the <span class="s22">new </span>keyword followed by the class name and parentheses. We then go on to interact with the class, setting property values or calling methods:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const table = new Product(); table.name = &quot;Table&quot;; table.unitPrice = 500;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Notice that when we use this approach we don&#39;t need a type annotation for the table variable because the type can be inferred.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Classes have many more features than type aliases and interfaces though. One of these features is the ability to define the implementation of methods in a class.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s explore this with an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s change the <span class="s22">OrderDetail </span>type we have been working within previous sections to a class. We can define the implementation of the <span class="s22">getTotal </span>method in this class:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: justify;">class OrderDetail { product: Product; quantity: number;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We can create an instance of <span class="s22">OrderDetail</span>, specifying a <span class="s22">product </span>and <span class="s22">quantity</span>, and then calling the <span class="s22">getTotal </span>method with a <span class="s22">discount </span>to get the total price:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const table = new Product(); table.name = &quot;Table&quot;; table.unitPrice = 500;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 120%;text-align: left;">const orderDetail = new OrderDetail(); orderDetail.product = table; orderDetail.quantity = 2;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 240%;text-align: left;">const total = orderDetail.getTotal(0.1); console.log(total);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark125">If we run this and look at the console, we should see an output of </a><span class="s22">900</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part59.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part61.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
