<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part263.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part265.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark669">Summary</a><a name="bookmark711">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We started the chapter by introducing ourselves to Redux, learning the principles and key concepts. We learned that the state is stored in a single object and changed by pure functions called reducers when actions are dispatched.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We created our own store in our React shop to put the theory into practice. Here are some key points we learned in our implementation:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_445.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_446.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Enumerations for action types give us nice IntelliSense when referencing them. Using interfaces to define the actions gives a nice level of type safety and allows us to create a union type that a reducer can use for the actions it has to deal with.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_447.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">Using read-only properties within the state interface helps us avoid mutating the state directly.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_448.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_449.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Synchronous action creators simply return the required action object. Asynchronous action creators return a function that eventually returns the action object.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_450.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">The reducer contains a branch of logic for each action type it deals with, creating new state by spreading old state into a new object and then overwriting it with changed properties.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_451.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">A function called <span class="s22">createStore </span>from Redux creates the actual store. We pass all our reducers merged together along with Redux Thunk middleware to</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">manage asynchronous actions.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We then connected some components to the store. Here are the key points in this process:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_452.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">A <span class="s22">Provider </span>component from React Redux needs to sit above all the components that want to consume the store. This takes in a prop that contains the store.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_453.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;line-height: 91%;text-align: left;">A <span class="s22">connect </span>HOC from React Redux then wires up the individual components to the store. This takes in two parameters than can be used to map the state and action creators to the component props.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">There are lots of bits and pieces to get our heads around when implementing Redux within our React apps. It does shine in scenarios where the state management is complex</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">because Redux forces us to break the logic up into separate pieces that are easy to understand and maintain.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We learned that we can use a Redux-like approach within just a single component by leveraging React&#39;s <span class="s22">useReducer </span>function. This can be used when the state is complex and just exists in a single component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark670">One task that Redux actions often do is interact with a REST API. We are going to learn how we can interact with REST APIs in both class- and function-based components in the next chapter. We&#39;ll also learn about a native function we use to call to a REST API as well as a popular open source library.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part263.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part265.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
