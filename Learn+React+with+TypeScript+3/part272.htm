<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Handling callback errors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part271.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part273.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark759">Handling callback errors</a></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this section, we are going to explore how we can handle errors when using callback code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s start by entering the following code in the TypeScript playground:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">try {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">setTimeout(() =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">throw new Error(&quot;Something went wrong&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">}, 1000);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">} catch (ex) {</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">console.log(&quot;An error has occurred&quot;, ex);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">We are again using <span class="s22">setTimeout </span>to experiment with callbacks. This time, we throw an error inside the callback. We are hoping to catch the error outside the callback using a <span class="s22">try / catch </span>around the <span class="s22">setTimeout </span>function.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">If we run the code, we see that we don&#39;t catch the error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span><img width="486" height="58" alt="image" src="Image_468.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We must handle errors within the callback. So, let&#39;s adjust our example to the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: justify;">interface IResult { success: boolean; error?: any;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">let result: IResult = { success: true }; setTimeout(() =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">try {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">throw new Error(&quot;Something went wrong&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">} catch (ex) { result.success = false; result.error = ex;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}, 1000);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">console.log(result);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: justify;">This time, the <span class="s22">try / catch </span>is within the callback. We use a variable, <span class="s22">result</span>, to determine whether the callback was executed successfully, along with any error. The <span class="s22">IResult </span>interface gives us a nice bit of type safety with the result <span class="s22">variable</span>.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: justify;">If we run this code, we&#39;ll see that we successfully handle the error:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="557" height="80" alt="image" src="Image_469.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark720">So, handling errors along with reading callback-based code is a challenge. Luckily, there are alternative approaches that deal with these challenges, which we&#39;ll go through in the next sections.</a><a name="bookmark760">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part271.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part273.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
