<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Type narrowing with a type assertion</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part105.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part107.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark232">Type narrowing with a type assertion</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The other way of performing type checking we are going to look at when using <span class="s22">unknown </span>is to use type assertion. Type assertion lets us tell the compiler what the type is with the</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">as <span class="p">keyword.</span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s create yet another version of our <span class="s22">logScores </span>function as an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. First, let&#39;s create a type alias for the structure we want the function parameter to be:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">type Scores = { name: string; scores: number[]</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. In our <span class="s22">logScores </span>function, we can now use the <span class="s22">as </span>keyword to tell the compiler what type to expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 111%;text-align: left;">function logScores(scores: unknown) { console.log((scores <span class="s21">as Scores</span>).firstName); console.log((scores <span class="s21">as Scores</span>).scores);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: center;">That&#39;s enough information for the compiler to pinpoint the problem:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="495" height="142" alt="image" src="Image_127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 93%;text-align: left;"><a name="bookmark197">The </a><span class="s22">unknown </span>type allows us to reduce our use of the <span class="s22">any </span>type and create more strongly- typed and robust TypeScript programs. We do have to write more code, though, when referencing <span class="s22">unknown </span>types. The additional code we need to write needs to check the type of the <span class="s22">unknown </span>variable so that the TypeScript compiler can be sure we are accessing valid members within it.<a name="bookmark233">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part105.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part107.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
