<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Canceling requests</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part295.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part297.htm">Next &gt;</a></p><p class="s24" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark743">Canceling requests</a><a name="bookmark796">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Allowing the user to cancel a request can improve the user experience in our app. We&#39;ll do this with the help of <span class="s22">axios </span>in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, we are going to import the <span class="s22">CancelTokenSource </span>type from <span class="s22">axios</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 4pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import axios, <span class="s21">{ CancelTokenSource } </span>from &quot;axios&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s add a cancel token and a loading flag to our state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">interface IState { posts: IPost[]; error: string;</p><p class="s21" style="padding-left: 74pt;text-indent: 0pt;line-height: 106%;text-align: left;">cancelTokenSource?: CancelTokenSource; loading: boolean;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s initialize the loading state in the constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 72pt;text-indent: 0pt;line-height: 120%;text-align: center;">this.state = { posts: [],</p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">error: &quot;&quot;,</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">loading: true</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;ve defined the cancel token as optional so we don&#39;t need to initialize it in the constructor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. Next, we&#39;ll generate the cancel token source and add it to the state, just before we make the <span class="s22">GET </span>request:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">const cancelToken = axios.CancelToken;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">const cancelTokenSource = cancelToken.source(); this.setState({ cancelTokenSource });</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(...)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.then(...)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.catch(...);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. We can then use the token in the GET request as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">cancelToken: cancelTokenSource.token,</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">})</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">6. We can handle cancellations in the <span class="s22">catch </span>method as follows. Let&#39;s also set the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">loading <span class="p">state to </span>false<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.catch(ex =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">const error = <span class="s21">axios.isCancel(ex)</span></p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">? &quot;Request cancelled&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">: ex.code === &quot;ECONNABORTED&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">? &quot;A timeout has occurred&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">: ex.response.status === 404</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">? &quot;Resource not found&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 32pt;line-height: 115%;text-align: left;">: &quot;An unexpected error has occurred&quot;; this.setState({ error, <span class="s21">loading: false </span>});</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, we use the <span class="s22">isCancel </span>function in <span class="s22">axios </span>to check if the request has been canceled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">7. While we are in the <span class="s22">componentDidMount </span>method, let&#39;s set the <span class="s22">loading </span>state to</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">false <span class="p">in the </span>then <span class="p">method as well:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.then(response =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">this.setState({ posts: response.data, <span class="s21">loading: false </span>});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">})</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">8. In the <span class="s22">render </span>method, let&#39;s add a <b>Cancel </b>button, which will allow the user to cancel the request:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{this.state.loading &amp;&amp; (</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;button onClick={this.handleCancelClick}&gt;Cancel&lt;/button&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;posts&quot;&gt;...&lt;/ul&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">9. Let&#39;s implement the <b>Cancel </b>button handler that we have just referenced:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleCancelClick = () =&gt; { if (this.state.cancelTokenSource) {</p><p class="s12" style="padding-left: 68pt;text-indent: 21pt;line-height: 120%;text-align: left;">this.state.cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">In order to cancel the request, the cancel method is called on the cancel token source.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">So, users can now cancel requests by clicking the <b>Cancel </b>button.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;">10. Now, this is going to be hard to test because the REST API we are using is really fast! So, in order to see a canceled request, let&#39;s cancel it in</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">the <span class="s22">componentDidMount </span>method immediately after the request is sent:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;( ... )</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">.then(response =&gt; { ... })</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">.catch(ex =&gt; { ... });</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app, we should see verification that the request was cancelled by <b>Request cancelled </b>being displayed in red.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark797">So, </a><span class="s22">axios </span>makes it really easy to improve our app&#39;s user experience by adding the ability to cancel requests.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark744">Before we move on to the next section, wherein we look at using </a><span class="s22">axios </span>to create data, let&#39;s remove the line we just added to cancel the request immediately after it was made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part295.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part297.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
