<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part239.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part241.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark583">Summary</a><a name="bookmark645">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this chapter, we discussed controlled components, which are React&#39;s recommended method for handling form data entry. With controlled components, we let React control input values via component state.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We looked at building generic <span class="s22">Form </span>and <span class="s22">Field </span>components containing state and change handlers, so that we don&#39;t need to implement individual state and change handlers for every field in every form in our apps.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We then created some standard validation functions, and added the ability to add validation rules within the generic <span class="s22">Form </span>component and render validation errors automatically in the <span class="s22">Field </span>component.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Finally, we added the ability to handle form submission when consuming the generic <span class="s22">Form </span>component. Our <b>Contact Us </b>page was changed to use the generic <span class="s22">Form </span>and <span class="s22">Field </span>components.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our generic components only deal with very simple forms. Not surprisingly, there are a fair number of well-established form libraries already out in the wild. A popular choice is Formik, which is similar in some ways to what we have just built but much more powerful.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark584">If you are building an app that contains lots of forms, it is well worth either building a generic form as we have just done or using an established library such as Formik to speed up the development process.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part239.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part241.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
