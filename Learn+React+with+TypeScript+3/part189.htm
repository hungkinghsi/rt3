<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the typeof keyword</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part188.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part190.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark473">Using the typeof keyword</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">typeof </span>keyword is a JavaScript keyword that returns a string that represents the type. So, we can use this in a condition to narrow down the type.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s go through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have a union type that can be a string or an array of strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type StringOrStringArray = string | string[];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. We need to implement a function called <span class="s22">first </span>that takes in a parameter of type</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">StringOrStringArray <span class="p">and returns a </span>string<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">function first(stringOrArray: StringOrStringArray): string {</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a name="bookmark474">3. The function needs to return the first character if </a><span class="s22">stringOrArray </span>is a</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">string<span class="p">; otherwise, it should return the first array element:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">function first(stringOrArray: StringOrStringArray): string { if (typeof stringOrArray === &quot;string&quot;) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">return stringOrArray.substr(0, 1);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">return stringOrArray[0];</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we hover over <span class="s22">stringOrArray </span>in the first branch, we see that the type has been successfully narrowed to <span class="s22">string</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="440" height="135" alt="image" src="Image_272.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we hover over <span class="s22">stringOrArray </span>in the second branch, we see that the type has been successfully narrowed to <span class="s22">string[]</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 79pt;text-indent: 0pt;text-align: left;"><span><img width="403" height="127" alt="image" src="Image_273.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. To check our function works, we can add the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">console.log(first(&quot;The&quot;)); console.log(first([&quot;The&quot;, &quot;cat&quot;]));</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">If we run the program, <b>T </b>and <b>The </b>will be output to the console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">typeof </span>keyword can only be used with JavaScript types, though. To illustrate that point, let&#39;s create an enhanced version of our function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We&#39;ll call our function <span class="s22">firstEnhanced</span>. We want to make the second branch specifically deal with the <span class="s22">string[] </span>type and mark the third branch as a place that should never be reached. Let&#39;s give this a try:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">function firstEnhanced(stringOrArray: StringOrStringArray): string</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (typeof stringOrArray === &quot;string&quot;) { return stringOrArray.substr(0, 1);</p><p class="s12" style="padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">} else if (typeof stringOrArray === &quot;string[]&quot;) { return stringOrArray[0];</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">const shouldNotReach: never = stringOrArray;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The TypeScript compiler isn&#39;t happy with the second branch:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="466" height="143" alt="image" src="Image_274.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The message gives us a clue as to what is going on. The JavaScript <span class="s22">typeof </span>keyword works with JavaScript types, which are <span class="s22">string</span>, <span class="s22">number</span>, <span class="s22">boolean</span>, <span class="s22">symbol</span>, <span class="s22">undefined</span>, <span class="s22">object</span>, and <span class="s22">function</span>; hence the union type in the error message combining these types. So, <span class="s22">typeof </span>in our second branch will actually return <span class="s22">&quot;object&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s implement this properly:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">function firstEnhanced(stringOrArray: StringOrStringArray): string</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (typeof stringOrArray === &quot;string&quot;) { return stringOrArray.substr(0, 1);</p><p class="s12" style="padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">} else if (typeof stringOrArray === &quot;object&quot;) { return stringOrArray[0];</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">} else {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><a name="bookmark475">const shouldNotReach: never = stringOrArray;</a></p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The TypeScript compiler is now happy again.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark449">So, </a><span class="s22">typeof </span>is great for branching on JavaScript types but not ideal for TypeScript specific types. Let&#39;s find out how we can bridge this gap in the following sections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part188.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part190.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
