<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Triggering validation rule execution from field</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part233.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part235.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark629">Triggering validation rule execution from field</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">When the user fills in the form, we want the validation rules to trigger when a field loses focus. We&#39;ll implement this in this section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s create a function that is going to handle the <span class="s22">blur </span>event for all three of the different editors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const handleChange = (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">const handleBlur = ( e:</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">| React.FocusEvent&lt;HTMLInputElement&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">| React.FocusEvent&lt;HTMLTextAreaElement&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 10pt;line-height: 106%;text-align: left;">| React.FocusEvent&lt;HTMLSelectElement&gt;, context: IFormContext</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">) =&gt; {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">if (context.validate) {</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">context.validate(props.name, e.currentTarget.value);</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return ( ... )</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_376.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The TypeScript blur event type is <span class="s22">FocusEvent&lt;T&gt;</span>, where <span class="s22">T </span>is the type of the element that is being handled.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_377.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The handler&#39;s first parameter, <span class="s22">e</span>, is the React blur event handler parameter. We union all the different handler types for our different editors, so that we can handle all the blur events in a single function.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_378.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The handler&#39;s second parameter is the form context.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_379.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We need a conditional statement to check that the <span class="s22">validate </span>method is not</p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;line-height: 14pt;text-align: left;">undefined<span class="p">, to keep the TypeScript compiler happy.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_380.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We can then call the <span class="s22">validate </span>method with the field name and new value we need to validate.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark630">2. We can now reference this handler in the </a><span class="s22">Field </span>JSX for the text and email editor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">type={type.toLowerCase()} id={name} value={context.values[name]}</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">onBlur={e =&gt; handleBlur(e, context)}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We set the <span class="s22">onBlur </span>prop to a lamda expression that calls our <span class="s22">handleBlur</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">function, passing in the blur argument as well as the context value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s reference the handler in the other two editors now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{type === &quot;TextArea&quot; &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;textarea id={name}</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">value={context.values[name]}</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">onBlur={e =&gt; handleBlur(e, context)}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{type === &quot;Select&quot; &amp;&amp; (</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;select value={context.values[name]}</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">onChange={e =&gt; handleChange(e, context)}</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">onBlur={e =&gt; handleBlur(e, context)}</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">)}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Our field is now executing validation rules when it loses focus. There&#39;s one more task to do before we can give our <b>Contact Us </b>page a try, which we&#39;ll do in the next section.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part233.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part235.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
