<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Structuring code into modules</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part67.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part69.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark41">Structuring code into modules</a><a name="bookmark140">&zwnj;</a><a name="bookmark141">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">By default, TypeScript generated JavaScript code that executes in what is called the global scope. This means code from one file is automatically available in another file. This in turn means that the functions we implement can overwrite functions in other files if the names are the same, which can cause our applications to break.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Let&#39;s look at an example in Visual Studio Code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s create a file called <span class="s22">product.ts </span>and enter the following interface for a product:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface Product { name: string; unitPrice: number;</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s create another file, called <span class="s22">orderDetail.ts</span>, with the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: justify;">class OrderDetail { product: Product; quantity: number;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: justify;">getTotal(discount: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: justify;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: justify;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">The compiler doesn&#39;t give us any complaints. In particular, the reference to the <span class="s22">Product </span>interface in the <span class="s22">OrderDetail </span>class is able to be resolved, even though it&#39;s in a different file. This is because both <span class="s22">Product </span>and <span class="s22">OrderDetail </span>are in the global scope.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">Operating in the global scope is problematic because item names can conflict across different files, and as our code base grows, this is harder to avoid. Modules resolve this issue and help us write well organized and reusable code.</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part69.htm">Module formats</a><a class="toc0" href="part70.htm">Exporting</a><a class="toc0" href="part71.htm">Importing</a><a class="toc0" href="part72.htm">Default exports</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part67.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part69.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
