<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating actions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark687">Creating actions</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this section, we are going to create two actions for getting the products and indicating that products are being loaded.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by creating a <span class="s22">ProductsActions.ts </span>file with the following import statement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { ActionCreator, AnyAction, Dispatch } from &quot;redux&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">These are a few types from Redux that we are going to use when implementing our actions.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">2. One of our actions is going to be asynchronous. So, let&#39;s import a type from</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">redux-thunk <span class="p">ready for when we implement this action:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { ThunkAction } from &quot;redux-thunk&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s add another import statement so that we can use our fake API:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import { getProducts as getProductsFromAPI } from &quot;./ProductsData&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We&#39;ve renamed the API function to <span class="s22">getProductsFromAPI </span>to avoid a name clash because we are going to create an action called <span class="s22">getProducts </span>a little later.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s also import the types we created in the last section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">import { IProductsGetAllAction, IProductsLoadingAction, IProductsState, ProductsActionTypes } from &quot;./ProductsTypes&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. We are going to create what is called an action creator now. An action creator does what it says on the tin: it&#39;s a function that creates and returns an action! Let&#39;s create an action creator for creating the product loading action:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const loading: ActionCreator&lt;IProductsLoadingAction&gt; = () =&gt; { return {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">type: ProductsActionTypes.LOADING</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_417.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use the generic <span class="s22">ActionCreator </span>type containing the appropriate action interface for the function signature</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_418.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The function simply returns the required action object</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We can write this function more succinctly using an implicit return statement as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const loading: ActionCreator&lt;IProductsLoadingAction&gt; = () =&gt; ({ type: ProductsActionTypes.LOADING</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We&#39;ll use this shorter syntax from now on when implementing action creators.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Let&#39;s move on to implementing the action creator for getting products. This is more complex, so let&#39;s start with the function signature:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">export const getProducts: ActionCreator&lt;ThunkAction&lt;Promise&lt;AnyAction&gt;, IProductsState, null, IProductsGetAllAction&gt;&gt; = () =&gt; {};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">We again use the generic <span class="s22">ActionCreator </span>type, but this time it contains more than just the action interface that will eventually be returned. This is because this particular action is asynchronous.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We use <span class="s22">ThunkAction </span>inside <span class="s22">ActionCreator </span>for asynchronous actions, which is, in turn, a generic type with four parameters:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_419.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The first parameter is the return type, which should ideally be <span class="s22">Promise&lt;IProductsGetAllAction&gt;</span>. However, the TypeScript compiler struggles to resolve this, so, we have opted for the slightly looser <span class="s22">Promise&lt;AnyAction&gt; </span>type.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_420.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_421.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The second parameter is the state interface that the action is concerned with. The third parameter is the type of parameter passed into the action creator, which is <span class="s22">null </span>in our case because there is no parameter.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_422.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">The last parameter is the type of the action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We export this action creator because this is going to be eventually called from the <span class="s22">ProductsPage </span>component.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">7. Asynchronous actions need to return an asynchronous function that will eventually dispatch our action:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">export const getProducts: ActionCreator&lt;ThunkAction&lt;Promise&lt;AnyAction&gt;, IProductsState, null, IProductsGetAllAction&gt;&gt; = () =&gt; {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">return async (dispatch: Dispatch) =&gt; {</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">So, the first thing that function does is return another function, flagging that it is asynchronous, using the <span class="s22">async </span>keyword. The inner function takes the dispatcher from the store as a parameter.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">8. Let&#39;s implement the inner function then:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return async (dispatch: Dispatch) =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">dispatch(loading());</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 106%;text-align: left;">const products = await getProductsFromAPI(); return dispatch({</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">products,</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">type: ProductsActionTypes.GETALL</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_423.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The first thing we do is dispatch our other action so that the loading state is eventually changed accordingly by the reducer</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_424.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_425.png"/></span></p><p style="padding-left: 76pt;text-indent: 0pt;text-align: left;">The next step is to get the products asynchronously from the fake API The final step is to dispatch the required action</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;"><a name="bookmark657">Now that we have created a couple of actions, we&#39;ll create a reducer in the next section.</a><a name="bookmark688">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
