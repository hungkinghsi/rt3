<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the in keyword</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part190.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part192.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark478">Using the in keyword</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">in </span>keyword is another JavaScript keyword that can be used to check whether a property is in an object.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s implement the example from the last section using the <span class="s22">in </span>keyword:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Instead of classes for the <span class="s22">Person </span>and <span class="s22">Company </span>structures, we have interfaces this time:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number; firstName: string; surname: string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><a name="bookmark479">}</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ICompany { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. We again create a union type from the <span class="s22">Person </span>and <span class="s22">Company </span>structures:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">type PersonOrCompany = IPerson | ICompany;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Finally, let&#39;s implement our function using the <span class="s22">in </span>keyword:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">function logName(personOrCompany: PersonOrCompany) { if (&quot;firstName&quot; in personOrCompany) {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">console.log(`${personOrCompany.firstName}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">${personOrCompany.surname}`);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -5pt;line-height: 120%;text-align: left;">} else { console.log(personOrCompany.name);</p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We put the property name in double quotes before the <span class="s22">in </span>keyword, followed by the object to check.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">If we hover over <span class="s22">personOrCompany </span>in the first branch, we get the</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">IPerson <span class="p">type.  If we hover over </span>personOrCompany <span class="p">in the second branch, we get the </span>ICompany <span class="p">type.</span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, the <span class="s22">in </span>keyword is pretty flexible. It can be used with any object to narrow down its type by checking if a property exists.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark451">There is one final type guard we will go through in the next section.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part190.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part192.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
