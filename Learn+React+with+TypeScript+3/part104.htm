<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The unknown type</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part103.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part105.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark194">The unknown type</a><a name="bookmark227">&zwnj;</a><a name="bookmark228">&zwnj;</a></h3><p class="s22" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">unknown <span class="p">is a new type that has been added in TypeScript 3. Before TypeScript 3, we may have used the </span>any <span class="p">type when we weren&#39;t sure of all the properties and methods in an object from a third-party library. However, when we declare a variable with the </span>any <span class="p">type, the TypeScript compiler won&#39;t do any type checking on it. The </span>unknown <span class="p">type can be used in these situations to make our code more type-safe. This is because </span>unknown <span class="p">types are type- checked. So, </span>unknown <span class="p">can often be used as an alternative to </span>any<span class="p">.</span></p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In the TypeScript playground, let&#39;s go through an example of a function using <span class="s22">any </span>and an improved version using <span class="s22">unknown</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, let&#39;s create a <span class="s22">logScores </span>function that takes in a parameter of type <span class="s22">any</span>. It logs out the <span class="s22">name </span>and <span class="s22">scores </span>properties from the argument to the console:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScores(scores: any) { console.log(scores.firstName); console.log(scores.scores);</p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s call this function with the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">logScores({ name: &quot;Billy&quot;,</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">scores: [60, 70, 75]</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If we run the program, we get <span class="s22">undefined </span>followed by <span class="s22">[60, 70, 75] </span>in the console. We passed in a correct object parameter, but our function logs <span class="s22">firstName </span>instead of <span class="s22">name </span>to the console. The program compiled just fine and didn&#39;t produce an error at runtime, but didn&#39;t give the result we wanted. This is all because we told the compiler not to check any types with the <span class="s22">any </span>type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s start to create a better version of this function with the <span class="s22">unknown </span>type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">function logScoresBetter(scores: unknown) { console.log(scores.firstName); console.log(scores.scores);</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark229">We immediately get compiler warnings where we reference the properties in </a><span class="s22">scores</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 71pt;text-indent: 0pt;text-align: left;"><span><img width="394" height="117" alt="image" src="Image_125.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark195">So, the compiler is checking our </a><span class="s22">scores </span>variable now, which is great, and is even warning us about the <span class="s22">firstName </span>property. However, the <span class="s22">scores </span>property is also giving a complication error but is valid. So, how do we tell the compiler this? We need to explicitly do some type checking ourselves in our code. We&#39;ll cover a couple of ways of doing this in the following sections.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part105.htm">Type checking with a type predicate</a><a class="toc0" href="part106.htm">Type narrowing with a type assertion</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part103.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part105.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
