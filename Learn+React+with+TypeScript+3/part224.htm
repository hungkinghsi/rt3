<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating controlled inputs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part223.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part225.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark595">Creating controlled inputs</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this section, we&#39;ll start to create our form containing our first controlled input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Create a new file called <span class="s22">ContactUs.tsx </span>in the <span class="s22">src </span>folder containing the following code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import * as React from &quot;react&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const ContactUs: React.SFC = () =&gt; { return (</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;form className=&quot;form&quot; noValidate={true}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;"><a name="bookmark596">&lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</a></p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">export default ContactUs;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is a function component that renders a form containing a label and an input for the user&#39;s name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">2. We have referenced some CSS classes, so let&#39;s add these to the bottom of</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">index.css<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.form {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">width: 300px;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">margin: 0px auto 0px auto;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.form-group { display: flex;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">flex-direction: column; margin-bottom: 20px;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.form-group label {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">align-self: flex-start; font-size: 16px;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">margin-bottom: 3px;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">.form-group input, select, textarea { font-family: Arial;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">font-size: 16px; padding: 5px;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">border: lightgray solid 1px; border-radius: 5px;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">form-group </span>class wraps each field in our form, displaying the label above the input with nice spacing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark597">3. Let&#39;s reference our form from our page now. Go to </a><span class="s22">ContactUsPage.tsx </span>and import our component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">import ContactUs from &quot;./ContactUs&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">4. We can then reference our component in the <span class="s22">render </span>method at the bottom of the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">div <span class="p">container:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;page-container&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;Contact Us&lt;/h1&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">&lt;p&gt;If you enter your details we&#39;ll get back to you as soon as we can.&lt;/p&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;ContactUs /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we look at the running app and go to the <b>Contact Us </b>page, we&#39;ll see our name field rendered:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="506" height="268" alt="image" src="Image_349.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">We can enter our name into this field, but nothing will happen yet. We want the entered name to be stored in the <span class="s22">ContactUsPage </span>container component state. This is because <span class="s22">ContactUsPage </span>will eventually manage the form submission.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark598">5. Let&#39;s add a state type to </a><span class="s22">ContactUsPage</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-top: 4pt;padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface IState { name: string; email: string; reason: string; notes: string;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class ContactUsPage extends React.Component&lt;{}, <span class="s21">IState</span>&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">As well as the person&#39;s name, we are going to capture their email address, reason for contacting the shop, and any additional notes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s also initialize the state in a constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public constructor(props: {}) { super(props);</p><p class="s12" style="padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">this.state = { email: &quot;&quot;,</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">name: &quot;&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">notes: &quot;&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">reason: &quot;&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. We now need to get the name value from the state in <span class="s22">ContactUsPage </span>into the <span class="s22">ContactUs </span>component. This will allow us to display the value in the input. We can do this by first creating props in the <span class="s22">ContactUs </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">interface IProps { name: string; email: string; reason: string; notes: string;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const ContactUs: React.SFC&lt;<span class="s21">IProps</span>&gt; = <span class="s21">props </span>=&gt; { ... }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We have created props for all the data we are going to eventually capture in our form.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark599">8. Now, we can bind the name input value to the </a><span class="s22">name </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;input type=&quot;text&quot; id=&quot;name&quot; <span class="s21">value={props.name} </span>/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">9. We can now pass these from the state in <span class="s22">ContactUsPage</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 108%;text-align: left;">&lt;ContactUs <span class="s21">name={this.state.name} email={this.state.email} reason={this.state.reason} notes={this.state.notes}</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Let&#39;s go to the running app and go to our <b>Contact Us </b>page. Try typing something into the name input.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Nothing seems to happen... something is preventing us from entering the value.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We have just set the input value to some React state, so React is now controlling the value of the input. This is why we no longer appear to be able to type into it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We are part-way through creating our first controlled input. However, controlled inputs aren&#39;t much use if users can&#39;t enter anything into them. So, how can we make our input editable again?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The answer is that we need to listen to changes to the input value, and update the state accordingly. React will then render the new input value from the state.</p><p style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">10. Let&#39;s listen to changes to the input via the <span class="s22">onChange </span>prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;input type=&quot;text&quot; id=&quot;name&quot; value={props.name}</p><p class="s21" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">onChange={handleNameChange} <span class="s12">/&gt;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">11. Let&#39;s create the handler we have just referenced as well:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">const handleNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">props.onNameChange(e.currentTarget.value);</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">return ( ... );</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark600">Note that we&#39;ve used the generic </a><span class="s22">React.ChangeEvent </span>command with the type of the element we are handling (<span class="s22">HTMLInputElement</span>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">currentTarget </span>prop in the event argument gives us a reference to the element that the event handler is attached to. The <span class="s22">value </span>property within this gives us the latest value of the input.</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">12. The handler references an <span class="s22">onNameChange </span>function prop that we haven&#39;t defined yet. So, let&#39;s add this to our interface, along with similar props for the other fields:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IProps { name: string;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">onNameChange: (name: string) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">email: string;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">onEmailChange: (email: string) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">reason: string;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">onReasonChange: (reason: string) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">notes: string;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">onNotesChange: (notes: string) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">13. We can now pass these props from <span class="s22">ContactUsPage </span>into <span class="s22">ContactUs</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;ContactUs name={this.state.name}</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 112%;text-align: left;">onNameChange={this.handleNameChange} <span class="s12">email={this.state.email} </span>onEmailChange={this.handleEmailChange} <span class="s12">reason={this.state.reason} </span>onReasonChange={this.handleReasonChange} <span class="s12">notes={this.state.notes} </span>onNotesChange={this.handleNotesChange}</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">/&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 94%;text-align: left;">14. Let&#39;s create the change handlers we&#39;ve just referenced in <span class="s22">ContactUsPage </span>that set the relevant state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleNameChange = (name: string) =&gt; { this.setState({ name });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleEmailChange = (email: string) =&gt; { this.setState({ email });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleReasonChange = (reason: string) =&gt; { this.setState({ reason });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;"><a name="bookmark601">private handleNotesChange = (notes: string) =&gt; { this.setState({ notes });</a></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we now go to the <b>Contact Us </b>page in the running app and enter something into the name, this time the input behaves as expected.</p><p style="padding-top: 7pt;padding-left: 35pt;text-indent: 0pt;line-height: 14pt;text-align: left;">15. Let&#39;s add fields for email, reason, and notes in our <span class="s22">render </span>method for</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">ContactUs<span class="p">:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;form className=&quot;form&quot; noValidate={true} onSubmit={handleSubmit}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 21pt;line-height: 120%;text-align: left;">&lt;input type=&quot;text&quot; id=&quot;name&quot; value={props.name} onChange={handleNameChange} /&gt;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s21" style="padding-left: 84pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor=&quot;email&quot;&gt;Your email address&lt;/label&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 16pt;line-height: 106%;text-align: left;">&lt;input type=&quot;email&quot; id=&quot;email&quot; value={props.email} onChange={handleEmailChange} /&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s21" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor=&quot;reason&quot;&gt;Reason you need to contact us&lt;/label&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 27pt;line-height: 106%;text-align: left;">&lt;select id=&quot;reason&quot; value={props.reason} onChange={handleReasonChange}&gt;</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;option value=&quot;Marketing&quot;&gt;Marketing&lt;/option&gt;</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Support&quot;&gt;Support&lt;/option&gt;</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Feedback&quot;&gt;Feedback&lt;/option&gt;</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Jobs&quot;&gt;Jobs&lt;/option&gt;</p><p class="s21" style="padding-left: 106pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;form-group&quot;&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;label htmlFor=&quot;notes&quot;&gt;Additional notes&lt;/label&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 21pt;line-height: 106%;text-align: left;">&lt;textarea id=&quot;notes&quot; value={props.notes} onChange={handleNotesChange} /&gt;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">For each field, we render a <span class="s22">label </span>and the appropriate editor inside a <span class="s22">div</span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">container, with a <span class="s22">form-group </span>class to space our fields out nicely.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">All the editors reference handlers for handling changes to their value. All the editors also have their value set from the appropriate <span class="s22">ContactUs </span>prop. So, all the field editors have controlled components.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Let&#39;s have a closer look at the <span class="s22">select </span>editor. We set the value in the <span class="s22">select </span>tag using a <span class="s22">value </span>attribute. However, this doesn&#39;t exist in the native <span class="s22">select </span>tag.</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Usually, we have to include a <span class="s22">selected </span>attribute in the relevant <span class="s22">option </span>tag within the <span class="s22">select </span>tag:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;select id=&quot;reason&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Marketing&quot;&gt;Marketing&lt;/option&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Support&quot; <span class="s21">selected</span>&gt;Support&lt;/option&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Feedback&quot;&gt;Feedback&lt;/option&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Jobs&quot;&gt;Jobs&lt;/option&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/select&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">React adds the <span class="s22">value </span>prop to the <span class="s22">select </span>tag, and manages the <span class="s22">selected </span>attribute on the <span class="s22">option </span>tag for us, behind the scenes. This allows us to consistently manage <span class="s22">input</span>, <span class="s22">textarea</span>, and <span class="s22">selected </span>in our code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;">16. Let&#39;s now create the change handlers for these fields that call the function props we created earlier:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const handleEmailChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">props.onEmailChange(e.currentTarget.value);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleReasonChange = (e: React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">props.onReasonChange(e.currentTarget.value);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleNotesChange = (e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">props.onNotesChange(e.currentTarget.value);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">This completes our basic <b>Contact Us </b>form, using various controlled form elements. We haven&#39;t implemented any validation or submitted the form yet. We&#39;ll get to these later in the chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">We&#39;re already noticing lots of similar code for each field for getting changes to fields into state. In the next section, we are going to start work on a generic form component and switch to using this for our <b>Contact Us </b>form.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part223.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part225.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
