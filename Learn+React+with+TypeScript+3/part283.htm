<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic POST request</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part282.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part284.htm">Next &gt;</a></p><p class="s24" style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark730">Basic POST request</a><a name="bookmark775">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Creating data via a REST API usually involves using the HTTP <span class="s22">POST </span>method with the data we want to create in the request body.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s open up the TypeScript playground and enter the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">fetch(&quot;https://jsonplaceholder.typicode.com/posts&quot;, { method: &quot;POST&quot;,</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">body: JSON.stringify({</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><a name="bookmark776">title: &quot;Interesting post&quot;,</a></p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;line-height: 120%;text-align: left;">body: &quot;This is an interesting post about ...&quot;, userId: 1</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: -10pt;line-height: 120%;text-align: left;">.then(response =&gt; { console.log(response.status); return response.json();</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">})</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">.then(data =&gt; console.log(data));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">fetch </span>call is largely the same as for getting data. The key difference is the second parameter, which is an options object that can contain the method and body for the request. Notice also that the body needs to be a <span class="s22">string</span>.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark731">If we run the preceding code, we get a </a><b>201 </b>and an object containing the generated post ID in the console.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part282.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part284.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
