<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating a basic form component</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part225.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part227.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark569">Creating a basic form component</a><a name="bookmark604">&zwnj;</a><a name="bookmark605">&zwnj;</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">It&#39;s time to start work on our generic <span class="s22">Form </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. Let&#39;s start by creating a new file in the <span class="s22">src </span>folder called <span class="s22">Form.tsx</span>, containing the following content:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 240%;text-align: left;">import * as React from &quot;react&quot;; interface IFormProps {} interface IState {}</p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">export class Form extends React.Component&lt;IFormProps, IState&gt; { constructor(props: IFormProps) {}</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">public render() {}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Form <span class="p">is a class-based component because it needs to manage state. We have named the props interface </span>IFormProps <span class="p">because later on we&#39;ll need an interface for field props.</span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Let&#39;s add a <span class="s22">defaultValues </span>prop to the <span class="s22">IFormProps </span>interface. This will hold the default value for every field in the form:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">export interface IValues { [key: string]: any;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IFormProps {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">defaultValues: IValues;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;">We use an additional interface called <span class="s22">IValues </span>for the default value type. This is an indexable key/value type that has a <span class="s22">string </span>type key and an <span class="s22">any </span>type value. The key will be the field name, and the value will be the field value.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: justify;">So, the value for the <span class="s22">defaultValues </span>prop could be this:</p><p class="s12" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{ name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;"><a name="bookmark606">3. Let&#39;s move on to the state in </a><span class="s22">Form </span>now. We are going to store the field values in a state property called <span class="s22">values</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">interface IState {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">values: IValues;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Note that this is the same type as the <span class="s22">defaultValues </span>prop, which is <span class="s22">IValues</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. We are going to initialize the state with the default values in the constructor now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">constructor(props: IFormProps) { super(props);</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">this.state = {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">values: props.defaultValues</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">5. The final bit we are going to do in this section is to start implementing the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">render <span class="p">method in the </span>Form <span class="p">component:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;form className=&quot;form&quot; noValidate={true}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">{this.props.children}</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;/form&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We render the child components in a <span class="s22">form </span>tag, using the magical <span class="s22">children </span>prop we used in the last chapter.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">This leads us nicely to the <span class="s22">Field </span>component, which we&#39;ll implement in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part225.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part227.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
