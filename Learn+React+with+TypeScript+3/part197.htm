<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Lookup and mapped types</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part196.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part198.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark456">Lookup and mapped types</a><a name="bookmark492">&zwnj;</a><a name="bookmark493">&zwnj;</a></h3><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">The <span class="s22">keyof </span>is a keyword in TypeScript that creates a union type of all the properties in an object. The type that is created is called a lookup type. This allows us to create types dynamically, based on the properties of an existing type. It&#39;s a useful feature that we can use to create generic but strongly typed code against varying data.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s go through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have the following <span class="s22">IPerson </span>interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s create a lookup type on this interface using <span class="s22">keyof</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">type PersonProps = keyof IPerson;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">If we hover over the <span class="s22">PersonProps </span>type, we see that a union type containing</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">&quot;id&quot; <span class="p">and </span>&quot;name&quot; <span class="p">has been created:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 133pt;text-indent: 0pt;text-align: left;"><span><img width="228" height="109" alt="image" src="Image_285.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s add a new property to <span class="s22">IPerson</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">name: string; age: number</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;"><a name="bookmark494">If we hover over the </a><span class="s22">PersonProps </span>type again, we see that the type has been automatically extended to include <span class="s22">&quot;age&quot;</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 117pt;text-indent: 0pt;text-align: left;"><span><img width="270" height="126" alt="image" src="Image_286.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, the <span class="s22">PersonProps </span>type is a lookup type because it looks up the literals it needs to contain.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s create something useful now with a lookup type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. We&#39;re going to create a <span class="s22">Field </span>class that contains the field name, a label, and a default value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Field { name: string; label: string;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">defaultValue: any;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. This is a start, but we can make <span class="s22">name </span>more strongly typed by making our class generic:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 106%;text-align: left;">class Field<span class="s21">&lt;T, K extends keyof T&gt; </span>{ name: <span class="s21">K</span>;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">label: string; defaultValue: any;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">We have created two generic parameters on the class. The first one is for the type of the object containing the field, and the second one is for the property name within the object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">3. It will probably make more sense if we create an instance of the class. Let&#39;s do just that using <span class="s22">IPerson </span>from the last example and passing <span class="s22">&quot;id&quot; </span>in as the field name:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const idField: Field&lt;IPerson, &quot;id&quot;&gt; = new Field();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s try and reference a property that doesn&#39;t exist in <span class="s22">IPerson</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const addressField: Field&lt;IPerson, &quot;address&quot;&gt; = new Field();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">We get a compilation error, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><span><img width="542" height="69" alt="image" src="Image_287.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Catching problems like this is the benefit of the lookup type, rather than using a</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">string <span class="p">type.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. Let&#39;s move our attention to the <span class="s22">defaultValue </span>property in our <span class="s22">Field </span>class. This is not type-safe at the moment. For example, we can set <span class="s22">idField </span>to a string:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">idField.defaultValue = &quot;2&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">6. Let&#39;s resolve this and make <span class="s22">defaultValue </span>type-safe:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">class Field&lt;T, K extends keyof T&gt; { name: K;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;line-height: 115%;text-align: left;">label: string; defaultValue: <span class="s21">T[K]</span>;</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 8pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We are looking up the type using <span class="s22">T[K]</span>. For <span class="s22">idField</span>, this will resolve to the type of the <span class="s22">id </span>property in <span class="s22">IPerson</span>, which is <span class="s22">number</span>.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The line of code that sets <span class="s22">idField.defaultValue </span>now throws a compilation error, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 75pt;text-indent: 0pt;text-align: left;"><span><img width="380" height="88" alt="image" src="Image_288.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark495">7. Let&#39;s change </a><span class="s22">&quot;2&quot; </span>to <span class="s22">2</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">idField.defaultValue = 2;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">The compilation error disappears.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">So, lookup types can be useful when creating generic components for variable data types.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: justify;">Let&#39;s move on to mapped types now. Again, these let us create new types from an existing type&#39;s properties. However, mapped types allow us to specifically define the properties in the new type by mapping them from the existing property.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Let&#39;s go through an example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, let&#39;s create a type that we will map from in the next step:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface IPerson { id: number;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: string;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Now let&#39;s create a new version of the <span class="s22">interface </span>where all the properties are</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 14pt;text-align: left;">readonly <span class="p">using mapped type:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type ReadonlyPerson = { readonly [P in keyof IPerson]: IPerson[P]</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The important bit that creates the map is <span class="s22">[P in keyof IPerson]</span>. This iterates through all the properties in <span class="s22">IPerson </span>and assigns each one to <span class="s22">P </span>to create the type. So, the type that is generated in the previous example is the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">type ReadonlyPerson = { readonly id: number readonly name: string</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let try this out to see if our type really is <span class="s22">readonly</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">let billy: ReadonlyPerson = { id: 1,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: &quot;Billy&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">billy.name = &quot;Sally&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">As we expect, a compilation error is thrown where we try to set the <span class="s22">readonly</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="484" height="108" alt="image" src="Image_289.gif"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="503" height="122" alt="image" src="Image_290.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 14pt;text-align: left;">property to a new value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So our mapped type worked! A more generic version of this mapped type is actually in TypeScript as a standard type, and is <span class="s22">Readonly&lt;T&gt;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s use the standard <span class="s22">readonly </span>type now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">let sally: Readonly&lt;IPerson&gt; = { id: 1,</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">name: &quot;sally&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">5. Let&#39;s try changing the values in our <span class="s22">readonly</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">Sally.name = &quot;Billy&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">A compilation error is thrown, as we would expect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><span><img width="462" height="94" alt="image" src="Image_291.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">If we were in Visual Studio Code and used the <b>Go to Definition </b>option on the</p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Readonly <span class="p">type, we would get the following:</span></p><p class="s12" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">type Readonly&lt;T&gt; = {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">readonly [P in keyof T]: T[P];</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This is very similar to our <span class="s22">ReadonlyPerson </span>type, but <span class="s22">IPerson </span>has been substituted with generic type <span class="s22">T</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark496">Let&#39;s have a go at creating our own generic mapped type now:</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">1. We are going to create a mapped type that makes all the properties of an existing type of type <span class="s22">string</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">type Stringify&lt;T&gt; = { [P in keyof T]: string };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Let&#39;s try to consume our mapped type:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: -5pt;line-height: 120%;text-align: left;">let tim: Stringify&lt;IPerson&gt; = { id: &quot;1&quot;,</p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">name: &quot;Tim&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s try to set <span class="s22">id </span>to a number:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">tim.id = 1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">The expected compilation error is thrown:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 104pt;text-indent: 0pt;text-align: left;"><span><img width="306" height="113" alt="image" src="Image_292.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 92%;text-align: left;"><a name="bookmark457">So, mapped types are useful in situations when we need a new type that is based on an existing type. Along with </a><span class="s22">Readonly&lt;T&gt;</span>, there are quite a few standard mapped types in TypeScript, such as <span class="s22">Partial&lt;T&gt;</span>, which creates a mapped type making all the properties optional.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part196.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part198.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
