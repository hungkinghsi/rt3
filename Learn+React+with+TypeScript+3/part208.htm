<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Sharing state with React context</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part207.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part209.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark538">Sharing state with React context</a></h4><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">React context allows state to be shared between components. It works really well with compound components. We are going to use it in our <span class="s22">Tabs </span>and <span class="s22">Tab </span>components to share state between them:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. Our first task is to create an interface for the context we are going to use in</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Tabs.tsx <span class="p">at the top of the file just beneath the import statements:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ITabsContext { activeName?: string;</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">handleTabClick?: (name: string) =&gt; void;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, our context will contain the active tab name as well as a reference to a tab click handler. These are the two bits of state that need to be shared between the components.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. Next, let&#39;s create the context underneath the <span class="s22">ITabsContext </span>interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">const TabsContext = React.createContext&lt;ITabsContext&gt;({});</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">We&#39;ve used the <span class="s22">createContext </span>function in React to create our context, which is a generic function that creates a context of a generic type, which in our case in <span class="s22">ITabsContext</span>.</p><p style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;line-height: 92%;text-align: left;">We are required to pass the default context value as the parameter value to <span class="s22">createContext </span>but that doesn&#39;t make sense in our case, so we just pass an empty <span class="s22">{} </span>object to keep the TypeScript compiler happy. This is why both the properties in <span class="s22">ITabsContext </span>are optional.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. It&#39;s time to use this context now in our compound components. The first thing we need to do is to define the context provider in the <span class="s22">Tabs render </span>method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">public render() { return (</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;TabsContext.Provider</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">value={{</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;line-height: 106%;text-align: left;">activeName: this.state ? this.state.activeName : &quot;&quot;, handleTabClick: this.handleTabClick</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;ul className=&quot;tabs&quot;&gt;{this.props.children}&lt;/ul&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&lt;/TabsContext.Provider&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">There are a few things going on here, so let&#39;s break this down:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_309.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: left;">The constant for our context we declared earlier, <span class="s22">TabsContext</span>, is available in JSX as a <span class="s22">&lt;TabsContext /&gt; </span>component.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_310.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The context provider fills the context with values. Given that <span class="s22">Tabs </span>manages the state and event handling, it makes sense for the provider to be referenced there.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_311.png"/></span></p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We reference the provider using <span class="s22">&lt;TabsContext.Provider /&gt;</span>.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_312.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">The provider takes in a property called <span class="s22">value </span>for the context value. We set this to an object containing the active tab name and the tab click event handler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">4. We need to adjust the tab click handler slightly because the click isn&#39;t going to be handled directly in <span class="s22">Tabs </span>anymore. So, we simply need to take in the active tab name as a parameter and then set the active tab name state within the method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleTabClick = (name: string) =&gt; { this.setState({ activeName: name });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 13pt;text-align: left;">5. Now that we have fed the context some data, it&#39;s time to consume this in the</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Tab <span class="p">component:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 25pt;text-indent: 0pt;text-align: center;">public static Tab: React.SFC&lt;ITabProps&gt; = props =&gt; (</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;TabsContext.Consumer&gt;</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">{(context: ITabsContext) =&gt; {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const activeName = context.activeName</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">? context.activeName</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">: props.initialActive</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">? props.name</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">: &quot;&quot;;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const handleTabClick = (e: React.MouseEvent&lt;HTMLLIElement&gt;)</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">{</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">if (context.handleTabClick) {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">context.handleTabClick(props.name);</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;li</p><p class="s21" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">onClick={handleTabClick}</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">className={props.name === activeName ? &quot;active&quot; : &quot;&quot;}</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">{props.children}</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">}}</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/TabsContext.Consumer&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">This again looks a little daunting, so let&#39;s break it down:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_313.png"/></span></p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: justify;">We can consume a context via a <span class="s22">Consumer </span>component within the context component. So, this is <span class="s22">&lt;TabsContext.Consumer /&gt; </span>in our case.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_314.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The child for <span class="s22">Consumer </span>needs to be a function that has a parameter for the context value and returns some JSX. <span class="s22">Consumer </span>will then render the JSX we return.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_315.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">Don&#39;t worry if this is still a little confusing. We&#39;ll cover this pattern in a lot more detail later when we cover children props and render props.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_316.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 91%;text-align: left;">This context function gives us everything we need to render the tab. We have access to the state from the <span class="s22">context </span>argument as well as access to the <span class="s22">Tab </span>component <span class="s22">props </span>object.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_317.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The first line of the function determines the active tab name by using what is in the context. If the active tab in the context is an empty string, we use the current tab name if it has been defined as the initial active tab.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_318.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The second line of the function creates a tab click handler that calls the context tab click handler if it has been specified.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_319.png"/></span></p><p style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 89%;text-align: left;">The return statement is as it was before, but we&#39;ve been able to add a reference to the tab click handler and the class name now.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, that&#39;s it for our tabs compound component. The syntax for React context may seem a little strange at first, but when you get used to it, it is really simple and elegant.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;"><a name="bookmark539">Before we can give this a try, we need to consume our compound component in our </a><span class="s22">Product </span>component. Let&#39;s replace our previous consumption of the <span class="s22">Tabs </span>component with the following highlighted JSX:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 29pt;text-indent: 0pt;text-align: left;">&lt;React.Fragment&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;h1&gt;{product.name}&lt;/h1&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;Tabs&gt;</p><p class="s21" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">&lt;Tabs.Tab name=&quot;Description&quot; initialActive={true}&gt;</p><p class="s21" style="padding-left: 56pt;text-indent: 0pt;text-align: left;">&lt;b&gt;Description&lt;/b&gt;</p><p class="s21" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">&lt;/Tabs.Tab&gt;</p><p class="s21" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">&lt;Tabs.Tab name=&quot;Reviews&quot;&gt;Reviews&lt;/Tabs.Tab&gt;</p><p class="s21" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;/Tabs&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{product.description}&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">&lt;/React.Fragment&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">This is exactly the JSX we wanted to achieve when we started to build the compound tabs component. If we go to the running app and browse to the product page, our tabs component works perfectly, with the description tab in bold:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 18pt;text-indent: 0pt;text-align: left;"><span><img width="524" height="339" alt="image" src="Image_320.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a name="bookmark540">So, compound components are great for components that rely on each other.</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">The <span class="s22">&lt;Tabs.Tab /&gt; </span>syntax really <i>calls out the fact </i>that <span class="s22">Tab </span>needs to be used with <span class="s22">Tabs</span>.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">React context works really well with compound components allowing the components, in the compound to easily share state. The state can even include functions such as event handlers.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark508">Allowing the consumer to specify the content to be rendered in sections of a component gives the consumer a great deal of flexibility. Specifying this custom content as a child of a component is intuitive and feels natural. We&#39;ll continue with this approach in the following section where we&#39;ll complete our tabs component.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part207.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part209.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
