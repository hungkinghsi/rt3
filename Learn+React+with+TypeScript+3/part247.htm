<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Key concepts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part246.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part248.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark679">Key concepts</a></h4><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">The whole state of the application lives inside what is called a <b>store</b>. The state is stored in a JavaScript object like the one following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;line-height: 120%;text-align: left;">products: [{ id: 1, name: &quot;Table&quot;, ...}, {...}, ...], productsLoading: false,</p><p class="s12" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">currentProduct: { id: 2, xname: &quot;Chair&quot;, ... },</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">basket: [{ product: { id: 2, xname: &quot;Chair&quot; }, quantity: 1 }],</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_405.png"/></span></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -48pt;line-height: 22pt;text-align: left;">In this example, the single object contains these: An array of products</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_406.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_407.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Whether the products are being fetched from a web API The current product the user is looking at</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_408.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">The items in the users basket</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">The state won&#39;t contain any functions or setters or any getters. It&#39;s a simple JavaScript object. The store also orchestrates all the moving parts in Redux. This includes pushing actions though reducers to update state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">So, the first thing that needs to happen in order to update state in a store is to dispatch an</p><p class="s9" style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">action<span class="p">. An action is another simple JavaScript object like the one following:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">type: &quot;PRODUCTS/LOADING&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 93%;text-align: left;">The <span class="s22">type </span>property determines the type of action that needs to be performed. This is an important and required part of the action. The reducer won&#39;t know how to change the state without the <span class="s22">type </span>in the action object. In the previous example, the action doesn&#39;t contain anything else other than the <span class="s22">type </span>property. This is because the reducer doesn&#39;t need any more information in order to make the change to state for this type of action.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The following example is another action:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">type: &quot;PRODUCTS/GETSINGLE&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">product: { id: 1, name: &quot;Table&quot;, ...}</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">This time, an additional bit of information is included in the action in a <span class="s22">product </span>property. This additional information is needed by the reducer to make the change to state for this type of action.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_409.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">A pure function always returns the same result for a given set of parameters. So, these functions don&#39;t depend on any state outside the scope of the function that isn&#39;t passed into the function. Pure functions also don&#39;t change any state outside the scope of the function.</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">So, reducers are pure functions that make the actual state changes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The following is an example of a reducer:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 34pt;text-indent: -10pt;line-height: 120%;text-align: left;">export const productsReducer = (state = initialProductState, action) =&gt; { switch (action.type) {</p><p class="s12" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">case &quot;PRODUCTS/LOADING&quot;: {</p><p class="s12" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">return {</p><p class="s12" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;line-height: 120%;text-align: left;">...state, productsLoading: true</p><p class="s12" style="padding-left: 56pt;text-indent: 0pt;text-align: left;">};</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">case &quot;PRODUCTS/GETSINGLE&quot;: {</p><p class="s12" style="padding-top: 1pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">return {</p><p class="s12" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">...state,</p><p class="s12" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;line-height: 120%;text-align: left;">currentProduct: action.product, productsLoading: false</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 56pt;text-indent: 0pt;text-align: left;"><a name="bookmark680">};</a></p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">default:</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">return state || initialProductState;</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Here is something about reducers:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_410.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">Reducers take in two parameters for the current state and the action that is being performed</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_411.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">The state argument defaults to an initial state object for when the reducer is called for the very first time</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_412.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">A switch statement is used on the action type and creates a new state object appropriately for each action type in each of its branches</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_413.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">To create the new state, we spread the current state into a new object and then overwrite it with properties that have changed</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_414.png"/></span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;">The new state is returned from the reducer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">You&#39;ll notice that the actions and reducer we have just seen didn&#39;t have TypeScript types. Obviously, we&#39;ll include the necessary types when we implement these in the following sections.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark653">So, now that we have started to get an understanding of what Redux is, it&#39;s time to put this into practice in our React shop.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part246.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part248.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
