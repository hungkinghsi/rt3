<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Configuring rules</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part87.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part89.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark174">Configuring rules</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The rules that <span class="s22">tslint </span>uses when checking our code are configurable in a file called</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">tslint.json<span class="p">. In order to explore some of the rules, we first need a TypeScript file:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. So, let&#39;s create a file called <span class="s22">orderDetail.ts </span>with the following content in Visual Studio Code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">export interface Product { name: string;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">unitPrice: number;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">export class OrderDetail { product: Product; quantity: number;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">getTotal(discount: number): number {</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: left;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. Let&#39;s now create a <span class="s22">tslint.json </span>file. We define the rules we want to implement in a <span class="s22">rules </span>field. Let&#39;s add the following rule:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&quot;rules&quot;: {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&quot;member-access&quot;: true</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;"><a href="https://palantir.github.io/tslint/rules/" class="s20" target="_blank" name="bookmark175">3. A full list of the rules can be found at: </a><a href="https://palantir.github.io/tslint/rules/" class="a" target="_blank">https://palantir.github.io/tslint/ rules/</a>. The <span class="s22">member-access </span>rule forces us to explicitly declare the access modifier for classes. We haven&#39;t explicitly defined the property and method access modifiers in the <span class="s22">OrderDetail </span>class because they are <span class="s22">public </span>by default. So, with our linting rule in place, Visual Studio Code will highlight the lack of access modifiers to us:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="234" alt="image" src="Image_100.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. As we put a <span class="s22">public </span>access modifier in front of the properties and method, the warnings go away:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 111%;text-align: justify;">export class OrderDetail { <span class="s21">public </span>product: Product; <span class="s21">public </span>quantity: number;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">public <span class="s12">getTotal(discount: number): number {</span></p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: justify;">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;line-height: 120%;text-align: justify;">const discountAmount = priceWithoutDiscount * discount; return priceWithoutDiscount - discountAmount;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 90%;text-align: left;">The <span class="s22">member-access </span>rule forces us to write more code <span class="s23">– </span>how can this be a good thing? The rule is useful if you&#39;re reading the code and don&#39;t know TypeScript well enough to understand that class members without access modifiers are public. So, it&#39;s great if our team consists of developers who don&#39;t know TypeScript that well yet, but not necessarily for an experienced team of TypeScript developers.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark62">Lots of the </a><span class="s22">tslint </span>rules are like <span class="s22">member-access </span><span class="s23">– </span>in some teams, they will work well and in others, they don&#39;t really add value. This is why rules are configurable!<a name="bookmark176">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part87.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part89.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
