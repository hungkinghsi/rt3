<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Updating data with axios</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part297.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part299.htm">Next &gt;</a></p><h4 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark745">Updating data with axios</a><a name="bookmark800">&zwnj;</a><a name="bookmark801">&zwnj;</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Let&#39;s move on to updating data now. We are going to allow the user to click an <b>Update</b></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">button in an existing post to change and save it:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s first create an <b>Update </b>button in each list item in the posts:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;li key={post.id}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;h3&gt;{post.title}&lt;/h3&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{post.body}&lt;/p&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 106%;text-align: left;">&lt;button onClick={() =&gt; this.handleUpdateClick(post)}&gt; Update</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. We can now implement the <b>Update </b>button click handler, which sets the post being edited in the component state:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">private handleUpdateClick = (post: IPost) =&gt; { this.setState({</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">editPost: post</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. In our existing save click handler, we need two branches of code now for the existing <span class="s22">POST </span>request and the <span class="s22">PUT </span>request we need to implement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">private handleSaveClick = () =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">if (this.state.editPost.id) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">// TODO - make a PUT request</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.post&lt;IPost&gt;( ... )</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.then( ... );</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s implement the <span class="s22">PUT </span>request now:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">if (this.state.editPost.id) {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">axios</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">.put&lt;IPost&gt;(</p><p class="s21" style="padding-left: 111pt;text-indent: -10pt;line-height: 106%;text-align: left;">`https://jsonplaceholder.typicode.com/posts/${ this.state.editPost.id</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 106%;text-align: left;">}`, this.state.editPost,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 7pt;text-indent: 0pt;text-align: center;"><a name="bookmark802">headers: {</a></p><p class="s21" style="padding-left: 25pt;text-indent: 0pt;text-align: center;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">)</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">.then(() =&gt; { this.setState({</p><p class="s21" style="padding-left: 122pt;text-indent: -10pt;line-height: 106%;text-align: left;">editPost: { body: &quot;&quot;,</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;line-height: 106%;text-align: left;">title: &quot;&quot;, userId: 1</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;line-height: 10pt;text-align: left;">},</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">posts: this.state.posts</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">.filter(post =&gt; post.id !== this.state.editPost.id)</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">.concat(this.state.editPost)</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">} else {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 28pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we filter out and concatenate the updated post to create a new posts array for the state.</p><p style="padding-top: 8pt;padding-left: 28pt;text-indent: 0pt;line-height: 91%;text-align: left;">The structure of the <span class="s22">put </span>function call is very similar to <span class="s22">get </span>and <span class="s22">post</span>.  Again, we could add error handling, a timeout, and the ability to cancel the request in the same way as we did for <span class="s22">get</span>.</p><p style="padding-top: 9pt;padding-left: 28pt;text-indent: 0pt;line-height: 89%;text-align: left;">In the running app, if we click an <b>Update </b>button in a post, change the title and body, and click the <b>Save </b>button, we see it removed from where it was and added to the bottom of the posts list with the new title and body.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">If we want to <span class="s22">PATCH </span>a post, we can use the <span class="s22">patch axios </span>method. This has the same structure as <span class="s22">put </span>but instead of passing the whole object that is being changed, we can just pass the values that need updating.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the next section, we will allow users to delete posts.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part297.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part299.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
