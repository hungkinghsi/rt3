<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using axios with function components</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part299.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part301.htm">Next &gt;</a></p><h3 style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark747">Using axios with function components</a><a name="bookmark805">&zwnj;</a><a name="bookmark806">&zwnj;</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">In this section, we&#39;ll implement REST API calls using <span class="s22">axios </span>in a function component. We&#39;ll refactor the <span class="s22">App </span>component we built in the last section:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. First, we are going to declare a constant, called <span class="s22">defaultPosts </span>that is going to hold the default posts state we&#39;ll use a little later. We&#39;ll add this after the <span class="s22">IPost </span>interface and set this to an empty array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const defaultPosts: IPost[] = [];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. We&#39;ll remove the <span class="s22">IState </span>interface because the state will be structured as individual pieces of state now.</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">3. We&#39;ll also remove the previous <span class="s22">App </span>class component.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Next, let&#39;s start the <span class="s22">App </span>function component under the <span class="s22">defaultPosts </span>constant:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">const App: React.SFC = () =&gt; {}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">5. We can now create the state for the posts, error, cancel token, loading flag, and posts being edited:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const App: React.SFC = () =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const [posts, setPosts]: [IPost[], (posts: IPost[]) =&gt; void] = React.useState(defaultPosts);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const [error, setError]: [string, (error: string) =&gt; void] = React.useState(&quot;&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">const cancelToken = axios.CancelToken;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const [cancelTokenSource, setCancelTokenSource]: [CancelTokenSource,(cancelSourceToken: CancelTokenSource) =&gt; void]</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">= React.useState(cancelToken.source());</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const [loading, setLoading]: [boolean, (loading: boolean) =&gt; void] = React.useState(false);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 10pt;line-height: 120%;text-align: left;">const [editPost, setEditPost]: [IPost, (post: IPost) =&gt; void] = React.useState({</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">body: &quot;&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;line-height: 120%;text-align: left;">title: &quot;&quot;, userId: 1</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">So, we use the <span class="s22">useState </span>function to define and initialize all these pieces of state.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">6. We want to make the REST API call to get the posts when the component has first been mounted. We can use the <span class="s22">useEffect </span>function, after the lines where the state is defined, to do this passing of an empty array as the second parameter:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 39pt;text-indent: 0pt;text-align: center;">React.useEffect(() =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">// TODO - get posts</p><p class="s12" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: center;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;">7. Let&#39;s call the REST API to get the posts in the arrow function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">React.useEffect(() =&gt; {</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">axios</p><p class="s21" style="padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, { cancelToken: cancelTokenSource.token,</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">headers: {</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">},</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">timeout: 5000</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">8. Let&#39;s handle the response and set the post-state along with setting the loading state to <span class="s22">false</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.useEffect(() =&gt; { axios</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(...)</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: -10pt;line-height: 106%;text-align: left;">.then(response =&gt; { setPosts(response.data); setLoading(false);</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">9. Let&#39;s also handle any errors, setting the error state along with the loading state to <span class="s22">false</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">React.useEffect(() =&gt; { axios</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">.get&lt;IPost[]&gt;(...)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.then(...)</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.catch(ex =&gt; {</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">const err = axios.isCancel(ex)</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">? &quot;Request cancelled&quot;</p><p class="s21" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">: ex.code === &quot;ECONNABORTED&quot;</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">? &quot;A timeout has occurred&quot;</p><p class="s21" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">: ex.response.status === 404</p><p class="s21" style="padding-left: 133pt;text-indent: 0pt;text-align: left;">? &quot;Resource not found&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 32pt;line-height: 106%;text-align: left;">: &quot;An unexpected error has occurred&quot;; setError(err);</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;line-height: 10pt;text-align: left;">setLoading(false);</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}, []);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 91%;text-align: left;">10. We can move on to the event handlers now. These are very similar to the class component implementation, with <span class="s22">const </span>replacing the <span class="s22">private </span>access modifier, as well as <span class="s22">this.state </span>and <span class="s22">this.setState </span>being replaced by the specific state variables and state setter functions. We&#39;ll start with the <b>Cancel </b>button click handler:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleCancelClick = () =&gt; { if (cancelTokenSource) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">11. Next, we can add the change handlers for the title and body inputs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">const handleTitleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">=&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">setEditPost({ ...editPost, title: e.currentTarget.value });</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">const handleBodyChange = (e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; {</p><p class="s12" style="padding-left: 79pt;text-indent: 0pt;text-align: left;">setEditPost({ ...editPost, body: e.currentTarget.value });</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">12. The <b>Save </b>button click handler is next:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleSaveClick = () =&gt; { if (editPost.id) {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">axios</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">.put&lt;IPost&gt;(</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: -43pt;line-height: 120%;text-align: left;">`https://jsonplaceholder.typicode.com/posts/${editPost.id}`, editPost,</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: center;">headers: {</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: -10pt;line-height: 120%;text-align: left;">.then(() =&gt; { setEditPost({</p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">body: &quot;&quot;,</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">title: &quot;&quot;,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 122pt;text-indent: 0pt;text-align: left;">userId: 1</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">setPosts(</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 54pt;line-height: 120%;text-align: left;">posts.filter(post =&gt; post.id !== editPost.id).concat(editPost)</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">);</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">} else { axios</p><p class="s12" style="padding-left: 111pt;text-indent: -10pt;line-height: 120%;text-align: left;">.post&lt;IPost&gt;( &quot;https://jsonplaceholder.typicode.com/posts&quot;,</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;line-height: 120%;text-align: left;">body: editPost.body, title: editPost.title, userId: editPost.userId</p><p class="s12" style="padding-left: 111pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: center;">headers: {</p><p class="s12" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">&quot;Content-Type&quot;: &quot;application/json&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 122pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">)</p><p class="s12" style="padding-top: 1pt;padding-left: 111pt;text-indent: -10pt;line-height: 120%;text-align: left;">.then(response =&gt; { setPosts(posts.concat(response.data));</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">13. Let&#39;s do the <b>Update </b>button next:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleUpdateClick = (post: IPost) =&gt; { setEditPost(post);</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">14. The last handler is for the <b>Delete </b>button:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">const handleDeleteClick = (post: IPost) =&gt; { axios</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">.delete(`https://jsonplaceholder.typicode.com/posts/${post.id}`)</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">.then(() =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">setPosts(posts.filter(p =&gt; p.id !== post.id));</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -18pt;line-height: 89%;text-align: left;"><a name="bookmark807">15. Our final task is to implement the return statement. Again, this is very similar to the class component </a><span class="s22">render </span>method, with references to <span class="s22">this </span>removed:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;App&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;div className=&quot;post-edit&quot;&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;input</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: 0pt;line-height: 120%;text-align: left;">type=&quot;text&quot; placeholder=&quot;Enter title&quot; value={editPost.title} onChange={handleTitleChange}</p><p class="s12" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 134pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;textarea placeholder=&quot;Enter body&quot; value={editPost.body}</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">onChange={handleBodyChange}</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">&lt;button onClick={handleSaveClick}&gt;Save&lt;/button&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 21pt;line-height: 120%;text-align: left;">{loading &amp;&amp; &lt;button onClick={handleCancelClick}&gt;Cancel&lt;/button&gt;}</p><p class="s12" style="text-indent: 0pt;text-align: right;">&lt;ul className=&quot;posts&quot;&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">{posts.map(post =&gt; (</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;li key={post.id}&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;h3&gt;{post.title}&lt;/h3&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">&lt;p&gt;{post.body}&lt;/p&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 54pt;line-height: 120%;text-align: left;">&lt;button onClick={() =&gt; handleUpdateClick(post)}&gt;Update&lt;/button&gt;</p><p class="s12" style="padding-left: 91pt;text-indent: 54pt;line-height: 120%;text-align: left;">&lt;button onClick={() =&gt; handleDeleteClick(post)}&gt;Delete&lt;/button&gt;</p><p class="s12" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">))}</p><p class="s12" style="padding-top: 1pt;text-indent: 0pt;text-align: right;">&lt;/ul&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">{error &amp;&amp; &lt;p className=&quot;error&quot;&gt;{error}&lt;/p&gt;}</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">&lt;/div&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">That&#39;s it! Our function component that interacts with a REST API is complete. If we try this, it should behave exactly as it did before.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">The main difference in terms of REST API interaction is that we use the <span class="s22">useEffect </span>function to make a REST API call to get data that needs to be rendered. We still do this when the component has been mounted, like we do in class-based components. It&#39;s just a different way of tapping into that component life cycle event.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part299.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part301.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
