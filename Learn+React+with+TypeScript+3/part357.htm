<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Chapter 4: Routing with React Router</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part356.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part358.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark959">Chapter 4: Routing with React Router</a><a name="bookmark971">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. We have the following <span class="s22">Route </span>that shows a list of customers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 19pt;text-indent: 0pt;text-align: center;">&lt;Route path=&quot;/customers&quot; component={CustomersPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Will the <span class="s22">CustomersPage </span>component render when the page is <span class="s22">&quot;/customers&quot;</span>? Yes</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Will the <span class="s22">CustomersPage </span>component render when the page is</p><p class="s22" style="padding-left: 53pt;text-indent: 0pt;line-height: 94%;text-align: left;">&quot;/customers/24322&quot;<span class="p">? Yes</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 14pt;text-align: left;">3. We only want the <span class="s22">CustomersPage </span>component to render when the path is</p><p class="s22" style="padding-left: 50pt;text-indent: 3pt;line-height: 162%;text-align: left;">&quot;/customers&quot;<span class="p">. How can we change the attributes on </span>Route <span class="p">to achieve this? We can use the </span>exact <span class="p">attribute:</span></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Route <span class="s21">exact={true} </span>path=&quot;/customers&quot; component={CustomersPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">4. What would be the <span class="s22">Route </span>that could handle the path <span class="s22">&quot;/customers/24322&quot;</span>? It should put <span class="s22">&quot;24322&quot; </span>in a route parameter called <span class="s22">customerId</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 110%;text-align: left;">&lt;Route <span class="s21">exact={true} </span>path=&quot;/customers/:customerId&quot; component={CustomerPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. We can then use <span class="s22">RouteComponentProps </span>as the <span class="s22">CustomerPage </span>props type and get access to <span class="s22">customerId </span>via <span class="s22">props.match.params.customerId</span>.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">How can we catch paths that don&#39;t exist so that we can inform the user?</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Make sure all the <span class="s22">Route </span>components are wrapped in a <span class="s22">Switch </span>component. We can then add a <span class="s22">Route </span>to a component that renders a <b>not found </b>message to the user as the last <span class="s22">Route </span>in Switch:</p><p class="s21" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Switch&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/customers/:customerId&quot; component={CustomerPage} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Route exact={true} path=&quot;/customers&quot; component={CustomersPage}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Route component={NotFoundPage} /&gt;</p><p class="s21" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Switch&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. How would we implement a <span class="s22">search </span>query parameter in <span class="s22">CustomersPage</span>? So, <span class="s22">&quot;/customers/?search=Cool Company&quot; </span>would show customers the name <b>Cool Company</b>.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">First we need the props type to be <span class="s22">RouteComponentProps </span>in our class:</p><p class="s12" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">import { RouteComponentProps } from &quot;react-router-dom&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">class CustomersPage extends React.Component&lt;RouteComponentProps, IState&gt; { ... }</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We can the use <span class="s22">URLSearchParams </span>to get the <span class="s22">search </span>query parameter and do the search in the <span class="s22">componentDidMount </span>life cycle method:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">public componentDidMount() {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">const searchParams = new URLSearchParams(props.location.search); const search = searchParams.get(&quot;search&quot;) || &quot;&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 79pt;text-indent: 0pt;line-height: 120%;text-align: left;">const products = await ... // make web service call to do search this.setState({ products });</p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">7. After a while we decide to change the <span class="s22">&quot;customer&quot; </span>paths to <span class="s22">&quot;clients&quot;</span>. How can we implement this so that users can still use the existing <span class="s22">&quot;customer&quot; </span>paths but have the paths automatically redirect to the new <span class="s22">&quot;client&quot; </span>paths.</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">We can use the <span class="s22">Redirect </span>component to redirect the old paths to the new paths:</p><p class="s12" style="padding-top: 9pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Switch&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;Route path=&quot;/clients/:customerId&quot; component={CustomerPage} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;Route exact={true} path=&quot;/clients&quot; component={CustomersPage} /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;Redirect from=&quot;/customers/:customerId&quot; to=&quot;/clients/:customerId&quot;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;Redirect exact={true} from=&quot;/customers&quot; to=&quot;/clients&quot; /&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">&lt;Route component={NotFoundPage} /&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Switch&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part356.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part358.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
