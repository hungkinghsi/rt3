<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic query</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part307.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part309.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark815">Basic query</a><a name="bookmark845">&zwnj;</a><a name="bookmark846">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">In this section, we&#39;ll use the GitHub GraphQL API explorer to get information about our GitHub user account:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Let&#39;s open the following URL in a browser to open the tool:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 1pt;padding-left: 73pt;text-indent: 0pt;text-align: left;"><a href="https://developer.github.com/v4/explorer/" class="a" target="_blank">https://developer.github.com/v4/</a>explorer/<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 39pt;text-indent: 0pt;text-align: center;">We will need to be signed in to our GitHub account if we aren&#39;t already.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">2. In the panel in the top-left corner, let&#39;s enter the following and click the <b>Execute Query </b>button:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">query { viewer {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">name</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">This is our first GraphQL query. Here are some key points:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_514.png"/></span></p><p style="padding-top: 7pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">We prefix a query with the <span class="s22">query </span>keyword. This is actually optional.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_515.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">viewer <span class="p">is the name of the object we want to get.</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_516.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">name <span class="p">is a field within </span>viewer <span class="p">that we want to return.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">The query result will appear on the right-hand side:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="229" alt="image" src="Image_517.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: justify;"><a name="bookmark847">The data we requested is returned as a JSON object. The JSON contains a </a><span class="s22">data </span>object that contains a <span class="s22">viewer </span>object containing the <span class="s22">name </span>field. The <span class="s22">name </span>value should be our name, since this is the name stored in our GitHub account.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. On the right-hand side of the results pane there is a <b>Docs </b>link. If we click this link, a <b>Documentation Explorer </b>appears:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="569" height="185" alt="image" src="Image_518.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">If we then click on the <b>Query </b>link, all the objects are shown that can be queried, including <span class="s22">viewer</span>, which is the one we just queried. If we click into this, we see all the fields that are available within <span class="s22">viewer</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. Let&#39;s add <span class="s22">avatarUrl </span>to our query, as this is an additional field available to us:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 101pt;text-indent: -10pt;line-height: 120%;text-align: left;">query { viewer {</p><p class="s12" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">name</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">avatarUrl</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">So, we simply add the <span class="s22">avatarUrl </span>field inside the <span class="s22">viewer </span>object with a carriage return between the <span class="s22">name </span>and <span class="s22">avatarUrl </span>fields. If we execute the query, we</p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 13pt;text-align: left;">see <span class="s22">avatarUrl </span>added to the JSON result. This should be a path to an image of us.</p><p style="padding-top: 9pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, we are already seeing how flexible GraphQL is with being able to specify exactly which fields we want returned in the response. In the next section, we&#39;ll take this further</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;">by specifying the nested objects we want to return.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part307.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part309.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
