<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using render prop for tab headings</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part210.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part212.htm">Next &gt;</a></p><p class="s24" style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark510">Using render prop for tab headings</a><a name="bookmark544">&zwnj;</a><a name="bookmark545">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">So, let&#39;s change the implementation of the tab headings to use a render prop:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">1. In <span class="s22">Tabs.tsx</span>, let&#39;s start by adding a new property in the tab props interface for the heading:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">interface ITabProps { name: string; initialActive?: boolean;</p><p class="s21" style="padding-left: 79pt;text-indent: 0pt;line-height: 10pt;text-align: left;">heading: () =&gt; string | JSX.Element;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">This property is a function with no parameters that returns a <span class="s22">string </span>or some JSX. This is the definition of our render prop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 91%;text-align: left;">2. Changing the implementation is very straightforward. We simply replace the call to the <span class="s22">children </span>prop function with our new render prop function in the return statement in the <span class="s22">Tab </span>component:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">return (</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;li</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">onClick={handleTabClick}</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">className={props.name === activeName ? &quot;active&quot; : &quot;&quot;}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">{props.heading()}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;/li&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. Let&#39;s switch the consumption of <span class="s22">Tabs </span>in <span class="s22">Product.tsx </span>to the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;Tabs&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 90pt;text-indent: -10pt;line-height: 120%;text-align: left;">&lt;Tabs.Tab name=&quot;Description&quot; initialActive={true}</p><p class="s21" style="padding-left: 90pt;text-indent: 0pt;line-height: 10pt;text-align: left;">heading={() =&gt; &lt;b&gt;Description&lt;/b&gt;}</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&lt;Tabs.Tab name=&quot;Reviews&quot; <span class="s21">heading={() =&gt; &quot;Reviews&quot;} </span>/&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">&lt;/Tabs&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark546">We may get a TSLint warning: </a><b>Lambdas are forbidden in JSX attributes due to their rendering performance impact. </b>It is useful to know that lambdas can be problematic so that we can keep this in mind for when we do experience a performance problem. However, we are going to switch this rule off in <span class="s22">tslint.json </span>by specifying <span class="s22">&quot;jsx-no-lambda&quot; </span>as <span class="s22">false</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">&quot;extends&quot;: [&quot;tslint:recommended&quot;, &quot;tslint-react&quot;, &quot;tslint-config-</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: -10pt;line-height: 120%;text-align: left;">prettier&quot;], &quot;rules&quot;: {</p><p class="s12" style="padding-left: 90pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 90pt;text-indent: 0pt;text-align: left;">&quot;jsx-no-lambda&quot;: false</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">},</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><span><img width="529" height="67" alt="image" src="Image_324.png"/></span></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">If we want to be super performance-conscious, instead of using a lambda function we can reference a method within the component.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">After we have saved the new TSLint settings, the compiler complaint will hopefully go away. Note that we may need to kill the <b>Terminal </b>and <span class="s22">npm start </span>the app again for the compiler complaint to go away.</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">If we try using the product page in our app, it will behave just as it did before.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">So, implementing the render prop pattern is very simple. The most time-consuming thing with this pattern is understanding what it can do and how it works. Once we&#39;ve got to grips with it, it is an excellent pattern we can use to provide rendering flexibility to consumers of our components.</p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We have just one more section to go now before our <span class="s22">Tab </span>component is complete.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part210.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part212.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
