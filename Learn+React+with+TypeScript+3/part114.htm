<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part113.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part115.htm">Next &gt;</a></p><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark247">Summary</a></h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">Using the <span class="s22">rest </span>and <span class="s22">spread </span>syntax is very common nowadays, particularly when building React apps. We&#39;ve seen how TypeScript 3, with the enhancement of tuples, allows us to use <span class="s22">rest </span>and <span class="s22">spread </span>in a strongly-typed fashion.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">We&#39;ve also seen how we can use the <span class="s22">unknown </span>type to reduce our use of the <span class="s22">any </span>type.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">unknown </span>type does require us to write more code, but it also allows us to create a more strongly-typed, more maintainable code base.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;">TypeScript has always made working with large code bases easier. With the introduction of project references, we can now split our solution into smaller projects more easily. This approach makes large solutions even more maintainable and flexible, and also yields faster build times with the new <span class="s22">--build </span>flag.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 91%;text-align: left;">We briefly went through how using <span class="s22">defaultprops </span>in a React component has improved. We&#39;ll be using this frequently as we start to learn how to build strongly-typed React components in subsequent chapters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 89%;text-align: left;"><a name="bookmark205">So, now that we are starting to get comfortable with TypeScript, in the next chapter, we&#39;ll get started with React. We&#39;ll start by learning how to create a React and TypeScript project, and then move on to how to create React and TypeScript components.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part113.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part115.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
