<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Updating the cache after a Mutation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part327.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part329.htm">Next &gt;</a></p><h4 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark890">Updating the cache after a Mutation</a></h4><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let&#39;s think through the problem one more time:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_543.png"/></span></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">We have some information about a repository in a cache that includes the number of stars it has.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_544.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">When we star the repository, we want to see that the number of stars has been incremented by one.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_545.png"/></span></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 89%;text-align: left;">What if we could just increment the number of stars in the cache by one? This should hopefully resolve the problem.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">So, let&#39;s give this a go and update the cache after the <span class="s22">mutation </span>has finished:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. First, let&#39;s remove the <span class="s22">refetchQueries </span>prop we implemented in the last section.</p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">2. There is an <span class="s22">update </span>prop on the <span class="s22">Mutation </span>component that we can leverage to update the cache. So, let&#39;s start to implement this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 124pt;text-indent: -10pt;line-height: 118%;text-align: left;">&lt;Mutation mutation={STAR_REPO} <span class="s21">update={cache =&gt; {</span></p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;line-height: 9pt;text-align: left;">// Get the cached data</p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">// update the cached data</p><p class="s21" style="padding-left: 135pt;text-indent: 0pt;text-align: left;">// update our state</p><p class="s21" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">}}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 113pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">3. So, we need to implement an arrow function that updates the cache that is available as an argument:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;Mutation</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">update={cache =&gt; {</p><p class="s21" style="padding-left: 91pt;text-indent: 21pt;line-height: 106%;text-align: left;">const data: { repository: IRepo } | null = cache.readQuery({</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: left;">query: GET_REPO, variables: {</p><p class="s21" style="padding-left: 134pt;text-indent: 0pt;line-height: 106%;text-align: left;">orgName: search.orgName, repoName: search.repoName</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">});</p><p class="s21" style="padding-left: 123pt;text-indent: -10pt;line-height: 106%;text-align: left;">if (data === null) { return;</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}}</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt;</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">&lt;/Mutation&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 91%;text-align: left;">So, the cache has a <span class="s22">readQuery </span>function that we can use to get the cached data. If no data is found in the cache then we can exit the function without doing anything else.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">4. So, now that we have the data from the cache, we can increment the number of stars. To do this, we create a new object and spread the props from the cached repository into it and overwrite it with the incremented number of stars and the fact that the viewer has starred the repository:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">update={cache =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 120%;text-align: left;">if (data === null) { return;</p><p class="s12" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">}</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">const newData = {</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 106%;text-align: left;">...data.repository, viewerHasStarred: true, stargazers: {</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...data.repository.stargazers,</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">totalCount: data.repository.stargazers.totalCount + 1</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;"><a name="bookmark891">};</a></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. We can then update the cache with its <span class="s22">writeQuery </span>function. We pass in the query with the variable values and the new data to store in the cache:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">update={cache =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">const newData = {</p><p class="s12" style="padding-top: 1pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">};</p><p class="s21" style="padding-top: 1pt;padding-left: 112pt;text-indent: -10pt;line-height: 106%;text-align: justify;">cache.writeQuery({ query: GET_REPO, variables: {</p><p class="s21" style="padding-left: 123pt;text-indent: 0pt;line-height: 106%;text-align: justify;">orgName: search.orgName, repoName: search.repoName</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;line-height: 10pt;text-align: left;">},</p><p class="s21" style="padding-left: 112pt;text-indent: 0pt;text-align: left;">data: { repository: newData }</p><p class="s21" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">});</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">6. There&#39;s one more job to do, which is to update the <span class="s22">repo </span>state so that the number of stars updates immediately onscreen:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">update={cache =&gt; {</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">...</p><p class="s12" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">cache.writeQuery(...);</p><p class="s21" style="padding-top: 1pt;padding-left: 101pt;text-indent: 0pt;text-align: left;">setRepo(newData);</p><p class="s12" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">That should be it. If we try to star a repository in our app again, we should see that the number of stars is immediately incremented.</p><p style="padding-top: 8pt;padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">Caching is one of the great features that Apollo gives us out-of-the-box. The <span class="s22">update </span>prop on the <span class="s22">Mutation </span>component gives us a precise way to update our cache.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 94%;text-align: left;">The <span class="s22">refetchQueries </span>prop on the <span class="s22">Mutation </span>component is a more heavy-handed and less efficient way of forcing a cache to be updated.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part327.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part329.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
