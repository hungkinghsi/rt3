<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Chapter 1: TypeScript Basics</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part353.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part355.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark956">Chapter 1: TypeScript Basics</a><a name="bookmark968">&zwnj;</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. What are the five primitive types?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_605.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_606.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_607.png"/></span></p><p class="s22" style="padding-top: 2pt;padding-left: 76pt;text-indent: 0pt;line-height: 109%;text-align: left;">string<span class="p">: Represents a sequence of Unicode characters </span>number<span class="p">: Represents both integers and floating-point numbers </span>boolean<span class="p">: Represents a logical true or false</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_608.png"/></span></p><p class="s22" style="padding-left: 76pt;text-indent: 0pt;text-align: left;">undefined<span class="p">: Represents a value that hasn&#39;t been initialized yet</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_609.png"/></span></p><p class="s22" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">null<span class="p">: Represents no value</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">2. What will the inferred type be for the <span class="s22">flag </span>variable be in the following code?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">const flag = false;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 50pt;text-indent: 0pt;text-align: left;">flag <span class="p">will be inferred as the </span>boolean <span class="p">type.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3. What&#39;s the difference between an interface and a type alias?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 89%;text-align: left;">The main difference is that type aliases can&#39;t be extended or implemented from, like you can with interfaces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">4. What is wrong with the following code?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class Product {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">constructor(public name: string, public unitPrice: number) {}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;line-height: 120%;text-align: left;">let table = new Product(); table.name = &quot;Table&quot;; table.unitPrice = 700;</p><p style="padding-top: 7pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">The constructor requires <span class="s22">name </span>and <span class="s22">unitPrice </span>to be passed. Here are two ways to resolve the problem.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">Pass the values in the constructor:</p><p class="s12" style="padding-top: 8pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">let table = new Product(<span class="s21">&quot;Table&quot;, 700</span>);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;text-align: left;">Make the parameters optional:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">class Product {</p><p class="s12" style="padding-top: 1pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">constructor(public name<span class="s21">?</span>: string, public unitPrice<span class="s21">?</span>: number) {}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 53pt;text-indent: -13pt;line-height: 94%;text-align: left;">5. If we want our TypeScript program to support IE11, what should the <span class="s22">-- target </span>compiler option be?</p><p style="padding-top: 8pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">This should be <span class="s22">es5 </span>because IE11 only supports up to ES5 features.</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: -13pt;line-height: 89%;text-align: left;">6. Is it possible to get the TypeScript compiler to transpile ES6 JavaScript files? If so, how?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">Yes! We can use the <span class="s22">--allowJS </span>setting to get the compiler to transpile JavaScript files.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">7. How can we prevent <span class="s22">console.log() </span>statements from getting into our code?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 50pt;text-indent: 0pt;line-height: 94%;text-align: left;">We can use tslint and the <span class="s22">&quot;no-console&quot; </span>rule to enforce this. This would be the rule in <span class="s22">tslint.json</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 68pt;text-indent: 0pt;text-align: left;">{</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&quot;rules&quot;: {</p><p class="s21" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">&quot;no-console&quot;: true</p><p class="s12" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p class="s12" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part353.htm">&lt; Previous</a><span> | </span><a href="../Learn+React+with+TypeScript+3.htm">Contents</a><span> | </span><a href="part355.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
